source("global.R")
source("queries.R")

server <- function(input, output, session) {
  
  ds_implementer <- NULL
  
  dashboard_counts <- reactiveValues(
    active_projects = 0, 
    in_progress_projects = 0,
    completed_projects = 0,
    status_summary = NULL,
    allocation_summary = NULL 
  )
  
  project_summary_content <- reactiveVal(NULL)
  
  rv <- reactiveValues(
    user = NULL,
    team_id = NULL,
    user_full_name = NULL,
    supervisor_flag = 0
  )
  
  
  observe({
    
    # Get the user from the session
    #user <<- session$user
    # Uncomment the following line and comment the above line to test locally in RStudio
    user <<- 'polargi@MFCGD.COM' 
    
    rv$user <- user
   
    rv$supervisor_flag <- 0

    team_id_query           <<- get_team_id(user, con)
    team_id                 <<- executeQuery(con, team_id_query)
    rv$team_id <- team_id
    user_full_name          <<- get_full_name(team_id, con)
    timeentry_twelvemonths  <<- get_timeentry_12_months(team_id, con)
    timesheet_data          <<- get_timesheet_data(team_id, con)
    time_entry_details      <<- get_time_entry_details(team_id, con)
    projects                <<- get_projects_details(user, con)
    supervisor_flag_query   <<- get_supervisor_flag(user, con)
    supervisor_flag         <<- executeQuery(con, supervisor_flag_query)
    ds_implementer_query    <<- get_people(user, con)
    ds_implementer          <<- executeQuery(con, ds_implementer_query)
    metrics                 <<- get_metrics()

    # Fetch dashboard counts - these are global, not user-specific
    active_count_df <- executeQuery(con, get_active_projects_count(user,con))
    dashboard_counts$active_projects <- if (!is.null(active_count_df) && nrow(active_count_df) > 0) active_count_df$count else 0
    
    in_progress_count_df <- executeQuery(con, get_in_progress_projects_count(user,con))
    dashboard_counts$in_progress_projects <- if (!is.null(in_progress_count_df) && nrow(in_progress_count_df) > 0) in_progress_count_df$count else 0
    
    completed_count_df <- executeQuery(con, get_completed_projects_count(user,con))
    dashboard_counts$completed_projects <- if (!is.null(completed_count_df) && nrow(completed_count_df) > 0) completed_count_df$count else 0
    
    status_summary_df <- executeQuery(con, get_project_status_summary(user,con))
    dashboard_counts$status_summary <- if (!is.null(status_summary_df) && nrow(status_summary_df) > 0) status_summary_df else data.frame(status=character(), count=integer())
    
    allocation_summary_df <- executeQuery(con, get_recent_total_allocation_per_active_project(user,con))
    dashboard_counts$allocation_summary <- if (!is.null(allocation_summary_df) && nrow(allocation_summary_df) > 0) allocation_summary_df else data.frame(project_name=character(), total_allocation_sum=numeric())
    
    
    if (supervisor_flag > 0) {
      if (get_manage_flag(user, con) > 0){
        shinyjs::runjs("$('#tabset li a:contains(\"Project for Approval\")').parent().show();")
        shinyjs::runjs("$('#tabset li a:contains(\"Submitted Project\")').parent().hide();")
      }else {
        shinyjs::runjs("$('#tabset li a:contains(\"Project for Approval\")').parent().hide();")
        shinyjs::runjs("$('#tabset li a:contains(\"Submitted Project\")').parent().hide();")
      }
    } else {
      shinyjs::runjs("$('#tabset li a:contains(\"Project for Approval\")').parent().hide();")
      shinyjs::runjs("$('#tabset li a:contains(\"Submitted Project\")').parent().show();")
    }
    
    show_closed <- input$show_closed_projects
    
    if (is.null(show_closed)) {
      show_closed <- FALSE
    }
    
    if (!show_closed) {
      query <- get_projects(1)
    }else
    {
      query <- get_projects()
    }

    # Helper function to truncate long names
    truncate_text <<- function(x, max_length = 150) {
      ifelse(nchar(x) > max_length, 
             paste0(substr(x, 1, max_length - 3), "..."), 
             x)
    }
    
    project_list      <<- executeQuery(con, query)
    dataproject_list <<- setNames(
      as.list(project_list$project_id), 
      truncate_text(project_list$project_name)
    )
    dataproject_list  <<- c("Choose" = 0, dataproject_list)
    
    updatePickerInput(session, "projectparent", choices = dataproject_list)
    
    if (!is.null(user) && nzchar(user)) {
      
      full_name <<- dbGetQuery(con, user_full_name)
      rv$user_full_name <- full_name
      
      output$greeting <- renderText({
        paste("Hello, ", full_name, "!")
      })
      
    } else {
      output$greeting <- renderText({
        paste("Hello, not found user")
      })
    }
  })
  
  # Dashboard valueBoxes
  output$totalProjectsBox <- renderValueBox({
    valueBox(
      dashboard_counts$active_projects, "Active Projects", icon = icon("folder-open"),
      color = "purple"
    )
  })
  
  output$projectsInProgressBox <- renderValueBox({
    valueBox(
      dashboard_counts$in_progress_projects, "Projects In Progress", icon = icon("cogs"),
      color = "yellow"
    )
  })
  
  output$completedProjectsBox <- renderValueBox({
    valueBox(
      dashboard_counts$completed_projects, "Completed Projects", icon = icon("check-circle"),
      color = "green"
    )
  })
  
  # Dashboard pie chart
  output$projectStatusPieChart <- renderPlot({
    summary_data <- dashboard_counts$status_summary
    if (!is.null(summary_data) && nrow(summary_data) > 0 && sum(summary_data$count) > 0) {
      ggplot(summary_data, aes(x = "", y = count, fill = status)) +
        geom_bar(stat = "identity", width = 1, color="white") +
        coord_polar("y", start = 0) +
        theme_void() +
        labs(fill = "Status") +
        geom_text(aes(label = ifelse(count > 0, paste0(status, "\n(", count, ")"), "")), 
                  position = position_stack(vjust = 0.5), 
                  check_overlap = TRUE, size = 3.5) +
        ggtitle("Active Projects by Status")
    } else {
      plot(1, type="n", xlab="", ylab="", main="No Active Project Status Data Available", xaxt='n', yaxt='n')
    }
  })
  
  # Dashboard bar chart for project allocations
  output$projectAllocationBarChart <- renderPlot({
    alloc_data <- dashboard_counts$allocation_summary
    if (!is.null(alloc_data) && nrow(alloc_data) > 0 && sum(alloc_data$total_allocation_sum) > 0) {
      # Ensure project_name is a factor for ordering
      alloc_data$project_name <- factor(alloc_data$project_name, levels = alloc_data$project_name[order(alloc_data$total_allocation_sum, decreasing = TRUE)])
      
      ggplot(alloc_data, aes(x = project_name, y = total_allocation_sum, fill = project_name)) +
        geom_bar(stat = "identity", show.legend = FALSE) +
        geom_text(aes(label = scales::percent(total_allocation_sum, accuracy = 0.1)), 
                  vjust = -0.5, size = 3) + # Display sum as percentage
        scale_y_continuous(labels = scales::percent_format(accuracy = 1)) + # Format y-axis as percentage
        theme_minimal() +
        labs(x = "Project", y = "Sum of Allocation % (Last Month)") +
        theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
        ggtitle("Project Allocation Consumption")
    } else {
      plot(1, type="n", xlab="", ylab="", main="No Project Allocation Data Available", xaxt='n', yaxt='n')
    }
  })
  
  # Reactive expression to fetch the entry data for the bar chart
  time_data <- reactive({
    executeQuery(con, timeentry_twelvemonths)
  })
  
  # Reactive expression to fetch time saved details data to the time entry tab
  time_saved_data <- reactive({
    executeQuery(con, time_entry_details)
  })
  
  # Function to fetch time data
  fetch_time_data <- function(team_id) {
    executeQuery(con, timesheet_data)
  }
  
  # Render the bar chart for time allocation
  render_time_bar_chart <- function(data) {
    
    data_clean <- na.omit(data)
    
    data_grouped <- data_clean %>%
      group_by(effective_date, project_name) %>%
      summarize(allocation_pct = sum(allocation_pct), .groups = 'drop')
    
    data_grouped$effective_date     <- as.Date(data_grouped$effective_date)
    data_grouped$effective_date_str <- format(data_grouped$effective_date, "%b %y")
    data_grouped$effective_date_str <- factor(data_grouped$effective_date_str, levels = unique(data_grouped$effective_date_str[order(data_grouped$effective_date)]))
    num_projects                    <- length(unique(data_grouped$project_name))
    nrow_legend                     <- ceiling(num_projects / 3)
    
    p <- ggplot(data_grouped, aes(x = effective_date_str, y = allocation_pct, fill = project_name, text = paste("Project:", project_name, "<br>Allocation:", scales::percent(allocation_pct)))) +
      geom_bar(stat = "identity", position = "stack") +
      scale_y_continuous(labels = scales::percent) +
      labs(x = "Month (Last 12 Months)", y = "Allocation Percentage", fill = "Project Name") +
      theme_minimal() +
      theme(
        legend.position = "bottom",
        legend.text = element_text(size = 8),
        legend.key.size = unit(0.5, "lines"),
        legend.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 90, hjust = 1)
      ) +
      guides(fill = guide_legend(nrow = nrow_legend, title = NULL))
    
    ggplotly(p, tooltip = "text") %>% layout(showlegend = FALSE)
  }
  
  output$time_bar_chart <- renderPlotly({
    data <- fetch_time_data()
    render_time_bar_chart(data)
  })
  
  
  ########################################################################################
  ##                                  Chat Assistant                                    ## 
  ########################################################################################
  
  DEFAULT_PROJECT_NAME <<- 0
  DEFAULT_WORK_TYPE <<- "Admin"
  
  chat_rv <- reactiveValues(
    history = list(),
    step = "start",
    time_entry_data = list(),
    staffing_project_id = NULL,
    staffing_project_name = NULL,
    staffing_staff_list = NULL,
    staffing_selected_person = NULL,
    staffing_action = NULL
  )

  
  get_allocation_project <- function(project_id, effective_date, team_id, con) {
    query <- paste0(
      "SELECT SUM(allocation_pct) as total_allocation FROM projects.time_sheet ",
      "WHERE project_id = ", project_id,
      " AND effective_date = '", effective_date, "'",
      " AND team_member = ", team_id
    )
    executeQuery(con, query)
  }
  
  refresh_and_display_staff_table <- function(project_id) {
    refreshed_staff_df <- get_project_staff(project_id, con)
    chat_rv$staffing_staff_list <- refreshed_staff_df
    
    if (nrow(refreshed_staff_df) > 0) {
      #chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Here is the updated staff list:")))
      staff_table_for_kable <- refreshed_staff_df[, c("name", "role", "level")]
      colnames(staff_table_for_kable) <- c("Name", "Role", "Level")
      staff_table_html <- knitr::kable(staff_table_for_kable, format = "html", table.attr = "class='table table-striped' style='width:100%;'")
      
      chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = staff_table_html)))
    }
  }
  update_timesheet <- function(project_id, effective_date, team_id, work_type, allocation, con) {

    project_id <- as.integer(project_id)
    team_id <- as.integer(team_id)
    allocation <- as.numeric(allocation)
    
    sql <- sprintf(
      "UPDATE projects.time_sheet SET allocation_pct = %f WHERE project_id = %d AND effective_date = '%s' AND team_member = %d AND work_type = '%s'",
      allocation, project_id, effective_date, team_id, work_type
    )

    return(sql)
  }
  
  # Initialize or reset chat
  observeEvent(rv$user, {
    chat_rv$history <- list(
      list(author = "bot", msg = paste0("Hello! ", rv$user_full_name, ", what would you like to do today?"))
    )
    chat_rv$step <- "start"
  })
  
  output$chat_time_bar_chart <- renderPlotly({
    data <- fetch_time_data()
    req(data)
    render_time_bar_chart(data)
  })
  assistant_right_content <- reactiveVal("context")
  
  output$assistant_right_panel <- renderUI({
    if (assistant_right_content() == "context") {
      tagList(
        fluidRow(
          valueBoxOutput("totalProjectsBox", width = 4),
          valueBoxOutput("projectsInProgressBox", width = 4),
          valueBoxOutput("completedProjectsBox", width = 4)
        ),
        div(
          style = "padding: 20px; font-size: 15px;",
          tags$b("Welcome to the IA&D Project Tracker Assistant!"),
          tags$ul(
            tags$li(
              tags$b("Time Entry:"),
              " Record your monthly allocation to each project you work on. This helps track your effort and capacity, ensures your time is accurately reported, and supports resource planning. You can roll forward last month's allocations or enter each project manually. Select a project, choose the effective month (end-of-month, defaulting to the previous month), and enter your allocation as a decimal (e.g., 0.5 for 50%)."
            ),
            tags$li(
              tags$b("Project Entry:"),
              " Start a new project by providing essential details such as project name, description, start and idea dates, implementer, requestor, and other attributes. This ensures all projects are tracked from initiation and have the required information for approvals and reporting."
            ),
            tags$li(
              tags$b("Project Update:"),
              " Update project details as work progresses. You can change status, completion percentage, dates, and other key fields to keep project information current and accurate."
            ),
            tags$li(
              tags$b("Project Notes:"),
              " Add, review, and manage notes related to your projects. Use this section for collaboration, sharing updates, or documenting important decisions and milestones."
            ),
            tags$li(
              tags$b("Project Metrics:"),
              " View and analyze key performance metrics for your projects, such as progress, allocation, and other custom indicators. This helps you and your team monitor outcomes and identify areas for improvement."
            ),
            tags$li(
              tags$b("Project Approval:"),
              " Review and approve projects submitted by your team. Supervisors can validate project details before they become active, ensuring quality and compliance with team standards."
            )
          ),
          tags$hr(),
          "Select an action on the left or use the chat to get started. For more help, see the Q&A tab or contact the Digital Enablement team."
        )
      )
    } else if (assistant_right_content() == "chart") {
      tagList(
        
        fluidRow(
          valueBoxOutput("totalProjectsBox", width = 4),
          valueBoxOutput("projectsInProgressBox", width = 4),
          valueBoxOutput("completedProjectsBox", width = 4)
        ),
        shinycssloaders::withSpinner(
          plotlyOutput("chat_time_bar_chart")
        )
      )
    }
  })
  
  # When the user clicks the Time Entry button, show the chart
  observeEvent(input$chat_action_time_entry, {
    assistant_right_content("chart")
  })
  
  # Optionally, reset to context when restarting the chat
  observeEvent(input$chat_restart, {
    assistant_right_content("context")
  })
  
  output$chat_ui <- renderUI({
    tagList(
      div(class = "chat-container",
          div(class = "chat-history", id = "chat_history_window",
              lapply(chat_rv$history, function(m) {
                div(class = paste("chat-message", ifelse(m$author == "bot", "bot-message", "user-message")), HTML(m$msg))
              })
          ),
          div(class = "chat-input-area",
              uiOutput("chat_controls")
          ),
          # --- Add this script for auto-scroll ---
          tags$script(HTML("
          setTimeout(function() {
            var chatWindow = document.getElementById('chat_history_window');
            if(chatWindow) { chatWindow.scrollTop = chatWindow.scrollHeight; }
          }, 100);
        "))
      )
    )
  })
  
  output$chat_controls <- renderUI({
    end_of_month_dates      <- get_end_of_month_dates()
    previous_month_end_date <- format(as.Date(format(Sys.Date(), "%Y-%m-01")) - days(1), "%Y-%m-%d")
    step <- chat_rv$step
    last_month_with_data <- get_last_timeentry_month(rv$team_id)
    months_with_data <- get_timeentry_months(rv$team_id)
    empty_months <- get_empty_months(rv$team_id)
    if (step == "start") {
      div(class = "chat-buttons",
          actionButton("chat_action_time_entry", "Time Entry", class = "custom-button"),
          actionButton("chat_action_manage_staffing", "Manage Staffing", class = "custom-button"),
          actionButton("chat_action_create_project", "Create Project", class = "custom-button", disabled = TRUE),
          actionButton("chat_action_update_project", "Update Project", class = "custom-button", disabled = TRUE)
      )
    } else if (step == "insert_time_choice") {
      tagList(
        actionButton("chat_roll_forward", "Roll Forward", class = "custom-button"),
        actionButton("chat_manual_entry", "Manually", class = "custom-button"),
        actionButton("chat_cancel", "Cancel", class = "btn-secondary")
      )
    } else if (step == "time_entry_project") {
      tagList(
        pickerInput("chat_project_select", "Select Project:", choices = dataproject_list, options = list(`live-search` = TRUE)),
        actionButton("chat_cancel", "Cancel", class = "btn-secondary")
      )
    } else if (step == "time_entry_date_default") {
      tagList(
        actionButton("chat_keep_month", "Keep This Month", class = "custom-button"),
        actionButton("chat_change_month", "Change Month", class = "custom-button"),
        actionButton("chat_cancel", "Cancel", class = "btn-secondary")
      )
    } else if (step == "time_entry_date") {
      tagList(
        pickerInput(
          inputId  = "chat_date_select",
          choices  = c("Choose..." = "", end_of_month_dates),
          options  = list('actions-box' = TRUE, 'live-search' = TRUE),
          multiple = FALSE
        ),
        actionButton("chat_cancel", "Cancel", class = "btn-secondary")
      )
    } else if (step == "time_entry_allocation") {
      tagList(
        numericInput("chat_allocation_input", "Enter Allocation (e.g., 0.5 for 50%):", value = 0.1, min = 0.01, max = 1, step = 0.05),
        actionButton("chat_submit_allocation", "Submit Allocation", class = "btn-success"),
        actionButton("chat_cancel", "Cancel", class = "btn-secondary")
      )
    } else  if (step == "roll_forward_choose_source") {
      tagList(
        actionButton("chat_roll_forward_last", 
                     label = if (!is.null(last_month_with_data)) paste("Most Recent Month with Data (", last_month_with_data, ")") else "No Data Found", 
                     class = "custom-button", disabled = is.null(last_month_with_data)),
        actionButton("chat_roll_forward_select", "Another Month", class = "custom-button"),
        actionButton("chat_cancel", "Cancel", class = "btn-secondary")
      )
    } else if (step == "roll_forward_select_month") {
      tagList(
        pickerInput(
          inputId = "chat_roll_forward_source_month",
          choices = c("Choose..." = "", months_with_data),
          selected = "",
          options = list('actions-box' = TRUE, 'live-search' = TRUE),
          multiple = FALSE
        ),
        actionButton("chat_roll_forward_source_next", "Next", class = "custom-button"),
        actionButton("chat_cancel", "Cancel", class = "btn-secondary")
      )
    } else if (step == "roll_forward_choose_dest") {
      selected_month <- if (length(empty_months) == 1) empty_months else ""
      tagList(
        pickerInput(
          inputId = "chat_roll_forward_dest_month",
          label = NULL,
          choices = c("Choose..." = "", empty_months),
          selected = selected_month,
          options = list('actions-box' = TRUE, 'live-search' = TRUE),
          multiple = FALSE
        ),
        actionButton("chat_roll_forward_confirm", "Roll Forward", class = "btn-success"),
        actionButton("chat_cancel", "Cancel", class = "btn-secondary")
      )
    } else if (step == "time_entry_exists_choice") {
      tagList(
        actionButton("chat_update_allocation", "Update Allocation", class = "btn-success"),
        actionButton("chat_restart", "Start Over", class = "custom-button")
      )
    }
    else if (step == "staffing_select_project") {
      tagList(
        pickerInput("staffing_chat_project_select", "Select Project:", choices = dataproject_list, options = list(`live-search` = TRUE)),
        actionButton("chat_cancel", "Cancel", class = "btn-secondary")
      )
    } else if (step == "staffing_select_action") {
      tagList(
        actionButton("staffing_chat_action_add", "Add Person", icon = icon("plus"),class = "custom-button"),
        actionButton("chat_cancel", "Cancel", class = "btn-secondary")
      )
    } else if (step == "staffing_remove_confirm") {
      person <- chat_rv$staffing_selected_person
      tagList(
        p(paste("Please confirm removal of", strong(person$name), "from this project.")),
        dateInput("staffing_chat_remove_date", "Contribution End Date:", value = Sys.Date()),
        actionButton("staffing_chat_confirm_remove", "Confirm Removal", class = "btn-danger"),
        actionButton("chat_cancel", "Cancel", class = "btn-secondary")
      )
    } else if (step == "staffing_remove_main_replacement") {
      person <- chat_rv$staffing_selected_person
      contributors <- chat_rv$staffing_staff_list %>% filter(role_level > 1)
      choices <- setNames(contributors$human_id, contributors$name)
      tagList(
        p(strong(person$name), "is the Main contact. You must select a replacement."),
        pickerInput("staffing_chat_replacement_select", "Select New Main Contact:", choices = choices),
        actionButton("staffing_chat_confirm_replacement", "Promote and Remove", class = "btn-primary"),
        actionButton("chat_cancel", "Cancel", class = "btn-secondary")
      )
    } else if (step == "staffing_replace_implementer_confirm") {
      tagList(
        actionButton("staffing_chat_confirm_replacement_action", "Yes, Replace Implementer", class = "custom-button"),
        actionButton("chat_cancel", "No, Cancel", class = "btn-secondary")
      )
    } else if (step == "staffing_add_person") {
      tagList(
        pickerInput("staffing_chat_add_person_select", "Select Person to Add:", choices = datapj_employee, options = list(`live-search` = TRUE)),
        selectInput("staffing_chat_add_level", "Set Role Level:", choices = c("Contributor" = 2, "Implementer" = 1)),
        actionButton("staffing_chat_confirm_add", "Add Person", class = "custom-button"),
        actionButton("chat_cancel", "Cancel", class = "btn-secondary")
      )
    }else if (step == "staffing_add_another") {
      tagList(
        actionButton("staffing_chat_action_add", "Add Another Person", icon = icon("plus"), class = "custom-button"),
        actionButton("chat_restart", "Finish", class = "btn-secondary")
      )
    }  else if (step == "end") {
      actionButton("chat_restart", "Start Over", class = "custom-button")
    }
  })
  
  # 1. User clicks "Manage Staffing"
  observeEvent(input$chat_action_manage_staffing, {
    chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = "Manage Staffing")))
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "...")))
    chat_rv$step <- "thinking_insert_time_choice"
    shinyjs::delay(1500, {
      chat_rv$history <- chat_rv$history[-length(chat_rv$history)]
      chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Of course. First, which project would you like to manage the staffing for?")))
      chat_rv$step <- "staffing_select_project"
    })
    assistant_right_content("context") # Keep context panel
  })
  
  # 2. User selects a project for staffing
  observeEvent(input$staffing_chat_project_select, {
    req(input$staffing_chat_project_select, input$staffing_chat_project_select != 0)
    chat_rv$staffing_project_id <- input$staffing_chat_project_select
    chat_rv$staffing_project_name <- names(dataproject_list[dataproject_list == chat_rv$staffing_project_id])[1]
    
    chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = paste("Project:", chat_rv$staffing_project_name))))
    
    staff_df <- get_project_staff(chat_rv$staffing_project_id, con)
    chat_rv$staffing_staff_list <- staff_df

    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "...")))
    chat_rv$step <- "thinking_insert_time_choice"
    
    # Format the data frame as an HTML table for the chat history
    shinyjs::delay(1500, {
      chat_rv$history <- chat_rv$history[-length(chat_rv$history)] 
      if (nrow(staff_df) > 0) {
        chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Here is the current staff list. What would you like to do?")))
        
        staff_table_for_kable <- staff_df[, c("name", "role", "level")]
        colnames(staff_table_for_kable) <- c("Name", "Role", "Level")
        staff_table_html <- knitr::kable(staff_table_for_kable, format = "html", table.attr = "class='table table-striped' style='width:100%;'")
        chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = staff_table_html)))
      } else {
        bot_message <- "There are no staff members currently assigned to this project."
        chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = bot_message)))
      }
      chat_rv$step <- "staffing_select_action"
    })
    
    #chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = bot_message)))
    
  })
  
  
  # 3. Render the staff table in the chat
  output$staffing_chat_table <- DT::renderDataTable({
    req(chat_rv$staffing_staff_list)
    DT::datatable(chat_rv$staffing_staff_list[, c("name", "role", "level")],
                  selection = 'single',
                  options = list(dom = 't', pageLength = 5),
                  rownames = FALSE,
                  colnames = c("Name", "Role", "Level")
    )
  })
  
  # 4. Handle "Remove" button click
  observeEvent(input$staffing_chat_action_remove, {
    req(input$staffing_chat_table_rows_selected)
    selected_row_index <- input$staffing_chat_table_rows_selected
    person_to_remove <- chat_rv$staffing_staff_list[selected_row_index, ]
    chat_rv$staffing_selected_person <- person_to_remove
    
    chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = paste("Remove", person_to_remove$name))))
    
    if (person_to_remove$role_level == 1) {
      contributors <- chat_rv$staffing_staff_list %>% filter(role_level > 1)
      if (nrow(contributors) > 0) {
        chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = paste(person_to_remove$name, "is a Main contact. Please choose a replacement from the list of contributors."))))
        chat_rv$step <- "staffing_remove_main_replacement"
      } else {
        chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "This person is the only one on the project. To remove them, you must first add another person to take over as the Main contact.")))
        chat_rv$step <- "staffing_select_action" # Send them back
      }
    } else {
      chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Please set an end date for this person's contribution.")))
      chat_rv$step <- "staffing_remove_confirm"
    }
  })
  
  # 5. Handle final confirmation of removal (for non-main)
  observeEvent(input$staffing_chat_confirm_remove, {
    person <- chat_rv$staffing_selected_person
    end_date <- input$staffing_chat_remove_date
    
    query <- remove_person_from_project(chat_rv$staffing_project_id, person$human_id, end_date, con)
    executeQuery(con, query)
    
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = paste(person$name, "has been removed from the project as of", end_date, "."))))
    chat_rv$step <- "end"
  })
  
  # 6. Handle "Add Person" button click
  observeEvent(input$staffing_chat_action_add, {
    chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = "Add Person")))
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "...")))
    chat_rv$step <- "thinking_insert_time_choice"
    shinyjs::delay(1500, {
      chat_rv$history <- chat_rv$history[-length(chat_rv$history)]
      chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Who would you like to add, and what should their role level be?")))
      chat_rv$step <- "staffing_add_person"
    })
    
  })
  
  # 7. Handle confirmation of adding a person
  observeEvent(input$staffing_chat_confirm_add, {
    req(input$staffing_chat_add_person_select, input$staffing_chat_add_person_select != 0, input$staffing_chat_add_level)
    
    human_id <- input$staffing_chat_add_person_select
    selected_role_type <- as.integer(input$staffing_chat_add_level)
    person_name <- names(datapj_employee)[datapj_employee == human_id]
    
    current_staff_df <- get_project_staff(chat_rv$staffing_project_id, con)
    chat_rv$staffing_staff_list <- current_staff_df
    
    person_on_project <- current_staff_df %>% filter(human_id == !!human_id)
    
    if (selected_role_type == 1) { 
      role_name <- "implementer"
      
      if (nrow(person_on_project) > 0 && person_on_project$level[1] == 1) {
        chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = paste0("No action taken. ", person_name, " is already the implementer for this project. What would you like to do?"))))
        chat_rv$step <- "staffing_select_action" # Go back to the main options
        return()
      }
      
      current_implementer <- current_staff_df %>% filter(role == 'implementer')
      if (nrow(current_implementer) > 0) {
        chat_rv$current_implementer_info <- as.list(current_implementer[1, ])
        chat_rv$new_implementer_info <- list(human_id = human_id, name = person_name)
        
        if (nrow(person_on_project) > 0) {
          chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = paste("Promote", person_name, "to Implementer."))))
          chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = paste0(person_name, " is currently a contributor. If you proceed, they will be promoted to Implementer, and the current implementer (", chat_rv$current_implementer_info$name, ") will be removed. Are you sure?"))))
        } else {
          chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = paste("Add", person_name, "as Implementer."))))
          chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = paste0("This project already has an implementer (", chat_rv$current_implementer_info$name, "). If you proceed, their contribution will end, and ", chat_rv$new_implementer_info$name, " will be assigned. Are you sure?"))))
        }
        
        chat_rv$step <- "staffing_replace_implementer_confirm"
        return()
      }
      
      chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = paste("Add", person_name, "as Implementer."))))
      
      if (nrow(person_on_project) > 0) {
        update_query <- update_person_role(project_id = chat_rv$staffing_project_id, human_id = human_id, new_role_level = 1, role_type = role_name, .con = con)
        executeQuery(con, update_query)
        chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = paste(person_name, "has been promoted to Implementer."))))
      } else {
        add_query <- add_person_to_project(chat_rv$staffing_project_id, human_id, role_name, 1, Sys.Date(), con)
        executeQuery(con, add_query)
        chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = paste(person_name, "has been added as the Implementer."))))
      }
      refresh_and_display_staff_table(chat_rv$staffing_project_id)
      
    } else { 
      role_name <- "contributor"
      

      if (nrow(person_on_project) > 0) {
        if (person_on_project$level[1] == 1) {
          chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = paste0(person_name, " is the project's Implementer and cannot be added as a Contributor. What would you like to do?"))))
        } else {
          chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = paste0(person_name, " is already a Contributor on this project. What would you like to do?"))))
        }
        chat_rv$step <- "staffing_select_action" # Go back to the main options
        return()
      }
      
      contributors <- current_staff_df %>% filter(level > 1)
      if (nrow(contributors) == 0) {
        implementer <- current_staff_df %>% filter(level == 1)
        base_level <- if(nrow(implementer) > 0) implementer$level[1] else 1
        role_level <- base_level + 0.1
      } else {
        max_level <- max(contributors$level)
        if (round(max_level %% 1, 1) == 0.9) {
          role_level <- floor(max_level) + 1
        } else {
          role_level <- max_level + 0.1
        }
      }
      role_level <- round(role_level, 1)
      
      chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = paste("Add", person_name, "as a", role_name, "with level", role_level))))
      query <- add_person_to_project(chat_rv$staffing_project_id, human_id, role_name, role_level, Sys.Date(), con)
      executeQuery(con, query)
      chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = paste(person_name, "has been added."))))
    }
    
    refreshed_staff_df <- get_project_staff(chat_rv$staffing_project_id, con)
    chat_rv$staffing_staff_list <- refreshed_staff_df
    refresh_and_display_staff_table(chat_rv$staffing_project_id)
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Would you like to add another person to this project?")))
    chat_rv$step <- "staffing_add_another"
  })
  
  observeEvent(input$staffing_chat_confirm_replacement_action, {
    # 1. Demote/End role of the old implementer
    req(chat_rv$current_implementer_info, chat_rv$new_implementer_info)
    old_implementer_id <- chat_rv$current_implementer_info$human_id
    new_implementer_id <- chat_rv$new_implementer_info$human_id
    yesterday <- Sys.Date() - 1
    
    update_query <- update_person_role(project_id = chat_rv$staffing_project_id, human_id = old_implementer_id, new_role_level = 99, end_date = yesterday, .con = con)

    executeQuery(con, update_query)
    
    # 2. Promote or Add the new implementer
    current_staff_df <- get_project_staff(chat_rv$staffing_project_id, con)
    person_on_project <- current_staff_df %>% filter(human_id == !!new_implementer_id)

    if (nrow(person_on_project) > 0) {
      promote_query <- update_person_role(project_id = chat_rv$staffing_project_id, human_id = new_implementer_id, new_role_level = 1, role_type = 'implementer', .con = con)

      executeQuery(con, promote_query)

    } else {
      add_query <- add_person_to_project(chat_rv$staffing_project_id, new_implementer_id, 'implementer', 1, Sys.Date(), con)

      executeQuery(con, add_query)
    }
    
    # 3. Refresh staff list and provide feedback
    refreshed_staff_df <- get_project_staff(chat_rv$staffing_project_id, con)
    chat_rv$staffing_staff_list <- refreshed_staff_df
    
    chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = "Yes, replace the implementer.")))
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = paste0(
      "Success! ", chat_rv$current_implementer_info$name, "'s role has been ended and ",
      chat_rv$new_implementer_info$name, " is now the implementer."
    ))))
    refresh_and_display_staff_table(chat_rv$staffing_project_id)
    
    chat_rv$step <- "staffing_add_another"
  })
  
  observeEvent(input$chat_update_allocation, {
    chat_rv$update_mode <- TRUE
    chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = "Update Allocation")))
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Please enter the new allocation value (decimal, e.g., 0.5 for 50%).")))
    chat_rv$step <- "time_entry_allocation"
  })
  observeEvent(input$chat_action_time_entry, {
    chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = "Time Entry")))
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "...")))
    chat_rv$step <- "thinking_insert_time_choice"
    shinyjs::delay(2000, {
      chat_rv$history <- chat_rv$history[-length(chat_rv$history)]
      chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Would you like to roll forward your previous month's allocations, or enter each entry manually?")))
      chat_rv$step <- "insert_time_choice"
    })
  })
  
  
  # Helper: Get last month with data in time_sheet for this user/team (within last 6 months)
  get_last_timeentry_month <- function(team_id) {
    query <- paste0(
      "SELECT DISTINCT effective_date FROM projects.time_sheet ",
      "WHERE team_member = ", team_id, 
      " AND effective_date >= '", format(Sys.Date() %m-% months(6), "%Y-%m-01"), "'",
      " ORDER BY effective_date DESC"
    )
    dates <- dbGetQuery(con, query)$effective_date
    if (length(dates) == 0) return(NULL)
    as.character(dates[1])
  }
  
  # Helper: Get all months with data in last 6 months
  get_timeentry_months <- function(team_id) {
    query <- paste0(
      "SELECT DISTINCT effective_date FROM projects.time_sheet ",
      "WHERE team_member = ", team_id, 
      " AND effective_date >= '", format(Sys.Date() %m-% months(6), "%Y-%m-01"), "'",
      " ORDER BY effective_date DESC"
    )
    as.character(dbGetQuery(con, query)$effective_date)
  }
  
  # Helper: Get months WITHOUT data for this team member in the last 6 months
  get_empty_months <- function(team_id) {
    # Get the sequence of months (first day of each month)
    months_seq <- seq.Date(
      from = as.Date(format(Sys.Date(), "%Y-%m-01")) %m-% months(5),
      to   = as.Date(format(Sys.Date(), "%Y-%m-01")),
      by   = "month"
    )
    # Get the last day of each month
    last_6_months <- as.character(lubridate::ceiling_date(months_seq, "month") - 1)
    months_with_data <- get_timeentry_months(team_id)
    empty_months <- setdiff(last_6_months, months_with_data)
    empty_months
  }
  

  # Step 1: When user clicks "Roll Forward Previous Month"
  observeEvent(input$chat_roll_forward, {
    chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = "Roll Forward Previous Month")))
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "...")))
    chat_rv$step <- "thinking_roll_forward"
    shinyjs::delay(1200, {
      chat_rv$history <- chat_rv$history[-length(chat_rv$history)]
      msg <- paste(
        "Would you like to roll forward your most recent month with data to the next month, or select a different month?"
      )
      chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = msg)))
      chat_rv$step <- "roll_forward_choose_source"
    })
  })
  
# Step 3: Handle user choosing "Use Most Recent Month with Data"
observeEvent(input$chat_roll_forward_last, {
  source_month <- get_last_timeentry_month(rv$team_id)
  if (is.null(source_month)) {
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "No previous data found to roll forward.")))
    chat_rv$step <- "end"
    return()
  }
  # Destination is next month after source
  #dest_month <- format(as.Date(source_month) %m+% months(1), "%Y-%m-%d")
  dest_month <- format(lubridate::ceiling_date(as.Date(source_month) %m+% months(1), "month") - 1, "%Y-%m-%d")
  chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = paste("Use Most Recent Month with Data (", source_month, ")"))))
  chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = paste("Destination month will be", dest_month))))
  chat_rv$step <- "thinking_roll_forward"
  shinyjs::delay(1200, {
    # Perform roll forward
    prev_entries <- dbGetQuery(
      con,
      paste0(
        "SELECT project_id, work_type, allocation_pct FROM projects.time_sheet ",
        "WHERE team_member = ", rv$team_id, " AND effective_date = '", source_month, "'"
      )
    )
    inserted <- 0
    for (i in seq_len(nrow(prev_entries))) {
      project_id <- prev_entries$project_id[i]
      work_type  <- prev_entries$work_type[i]
      allocation <- prev_entries$allocation_pct[i]
      check_query <- paste0(
        "SELECT count(*) as cnt FROM projects.time_sheet ",
        "WHERE team_member = ", rv$team_id,
        " AND project_id = ", project_id,
        " AND work_type = '", work_type, "'",
        " AND effective_date = '", dest_month, "'"
      )
      exists <- dbGetQuery(con, check_query)$cnt[1]
      if (exists == 0) {
        insert_query <- insert_timesheet(
          project_id,
          dest_month,
          rv$team_id,
          work_type,
          allocation,
          con
        )
        tryCatch({
          executeQuery(con, insert_query)
          inserted <- inserted + 1
        }, error = function(e) {
          log_error(paste("Roll Forward Error:", e$message))
        })
      }
    }
    time_entry_trigger(time_entry_trigger() + 1)
    msg <- if (inserted > 0) {
      sprintf("Allocations from %s have been rolled forward to %s. (%d entries copied)", source_month, dest_month, inserted)
    } else {
      sprintf("No new allocations were rolled forward (all already exist for %s).", dest_month)
    }
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = msg)))
    chat_rv$history <- c(chat_rv$history, list(list(
      author = "bot",
      msg = "We hope you find the new roll forward feature helpful! If you have any feedback or suggestions, please click the \"Give Project Tracker Feedback\" button on the left. Thank you for helping us improve the tool."
    )))
    chat_rv$step <- "end"
  })
})

# Step 4: Handle user choosing "Select Another Month"
observeEvent(input$chat_roll_forward_select, {
  chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = "Select Another Month")))
  chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Please select the source month you want to roll forward from.")))
  chat_rv$step <- "roll_forward_select_month"
})

# In your observeEvent for input$chat_roll_forward_source_next, add a chat message:
observeEvent(input$chat_roll_forward_source_next, {
  req(input$chat_roll_forward_source_month, input$chat_roll_forward_source_month != "")
  chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = paste("Source Month:", input$chat_roll_forward_source_month))))
  chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Now select the destination month for your roll forward.")))
  chat_rv$step <- "roll_forward_choose_dest"
})

# Step 6: Handle user picking a destination month and perform roll forward
observeEvent(input$chat_roll_forward_confirm, {
  req(input$chat_roll_forward_source_month, input$chat_roll_forward_dest_month)
  source_month <- input$chat_roll_forward_source_month
  dest_month <- input$chat_roll_forward_dest_month
  chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = paste("Destination Month:", dest_month))))
  chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "...")))
  chat_rv$step <- "thinking_roll_forward"
  shinyjs::delay(1200, {
    chat_rv$history <- chat_rv$history[-length(chat_rv$history)]
    prev_entries <- dbGetQuery(
      con,
      paste0(
        "SELECT project_id, work_type, allocation_pct FROM projects.time_sheet ",
        "WHERE team_member = ", rv$team_id, " AND effective_date = '", source_month, "'"
      )
    )
    inserted <- 0
    for (i in seq_len(nrow(prev_entries))) {
      project_id <- prev_entries$project_id[i]
      work_type  <- prev_entries$work_type[i]
      allocation <- prev_entries$allocation_pct[i]
      check_query <- paste0(
        "SELECT count(*) as cnt FROM projects.time_sheet ",
        "WHERE team_member = ", rv$team_id,
        " AND project_id = ", project_id,
        " AND work_type = '", work_type, "'",
        " AND effective_date = '", dest_month, "'"
      )
      exists <- dbGetQuery(con, check_query)$cnt[1]
      if (exists == 0) {
        insert_query <- insert_timesheet(
          project_id,
          dest_month,
          rv$team_id,
          work_type,
          allocation,
          con
        )
        tryCatch({
          executeQuery(con, insert_query)
          inserted <- inserted + 1
        }, error = function(e) {
          log_error(paste("Roll Forward Error:", e$message))
        })
      }
    }
    time_entry_trigger(time_entry_trigger() + 1)
    msg <- if (inserted > 0) {
      sprintf("Allocations from %s have been rolled forward to %s. (%d entries copied)", source_month, dest_month, inserted)
    } else {
      sprintf("No new allocations were rolled forward (all already exist for %s).", dest_month)
    }
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = msg)))
    chat_rv$history <- c(chat_rv$history, list(list(
      author = "bot",
      msg = "We hope you find the new roll forward feature helpful! If you have any feedback or suggestions, please click the \"Give Project Tracker Feedback\" button on the left. Thank you for helping us improve the tool."
    )))
    chat_rv$step <- "end"
  })
})


  # Handle manual entry
  observeEvent(input$chat_manual_entry, {
    chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = "Enter Projects Manually")))
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "...")))
    chat_rv$step <- "thinking_time_entry_project"
    shinyjs::delay(2000, {
      chat_rv$history <- chat_rv$history[-length(chat_rv$history)]
      chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Great! Let's add your time. First, which project did you work on?")))
      chat_rv$step <- "time_entry_project"
    })
  })
  
  # Handle cancel at any step
  observeEvent(input$chat_cancel, {
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Action cancelled. What would you like to do next?")))
    chat_rv$step <- "start"
    chat_rv$time_entry_data <- list()
    assistant_right_content("context")  # <-- Add this line
  })
  
  # Handle project selection
  observeEvent(input$chat_project_select, {
    req(input$chat_project_select, input$chat_project_select != 0)
    project_id <- input$chat_project_select
    project_name <- names(dataproject_list)[dataproject_list == project_id]
    chat_rv$time_entry_data$project_id <- project_id
    chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = paste("Project:", project_name))))
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "...")))
    chat_rv$step <- "thinking_time_entry_date_default"
    shinyjs::delay(2000, {
      chat_rv$history <- chat_rv$history[-length(chat_rv$history)]
      previous_month_end_date <- format(as.Date(format(Sys.Date(), "%Y-%m-01")) - days(1), "%Y-%m-%d")
      msg <- sprintf("The default month is %s. Do you want to change it or keep this month?", previous_month_end_date)
      chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = msg)))
      chat_rv$step <- "time_entry_date_default"
    })
  })
  
  # Handle keep/change month
  observeEvent(input$chat_keep_month, {
    previous_month_end_date <- format(as.Date(format(Sys.Date(), "%Y-%m-01")) - days(1), "%Y-%m-%d")
    chat_rv$time_entry_data$effective_date <- previous_month_end_date
    chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = sprintf("Date: %s", previous_month_end_date))))
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "...")))
    chat_rv$step <- "thinking_time_entry_allocation"
    shinyjs::delay(2000, {
      chat_rv$history <- chat_rv$history[-length(chat_rv$history)]
      chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Perfect. What percentage of your time should be allocated to this project for the month? Please enter it as a decimal.")))
      chat_rv$step <- "time_entry_allocation"
    })
  })
  
  observeEvent(input$chat_change_month, {
    chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = "Change Month")))
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "...")))
    chat_rv$step <- "thinking_time_entry_date"
    shinyjs::delay(2000, {
      chat_rv$history <- chat_rv$history[-length(chat_rv$history)]
      chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Please select a different month.")))
      chat_rv$step <- "time_entry_date"
    })
  })
  
  # Handle date selection (add delay and "..." thinking)
  observeEvent(input$chat_date_select, {
    req(input$chat_date_select)
    chat_rv$time_entry_data$effective_date <- input$chat_date_select
    chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = paste("Date:", input$chat_date_select))))
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "...")))
    chat_rv$step <- "thinking_time_entry_allocation"
    shinyjs::delay(2000, {
      chat_rv$history <- chat_rv$history[-length(chat_rv$history)]
      chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Perfect. What percentage of your time should be allocated to this project for the month? Please enter it as a decimal.")))
      chat_rv$step <- "time_entry_allocation"
    })
  })
  
  # Handle allocation submission (add delay and "..." thinking for success/failure)
  observeEvent(input$chat_submit_allocation, {
    req(rv$team_id, chat_rv$time_entry_data$project_id, chat_rv$time_entry_data$effective_date, input$chat_allocation_input)
    allocation <- input$chat_allocation_input
    chat_rv$history <- c(chat_rv$history, list(list(author = "user", msg = paste("Allocation:", allocation))))
    chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "...")))
    #chat_rv$step <- "thinking_time_entry_submit"
    

    
    shinyjs::delay(2000, {
      chat_rv$history <- chat_rv$history[-length(chat_rv$history)]
      query_getcount <- get_count_timesheet(chat_rv$time_entry_data$project_id, chat_rv$time_entry_data$effective_date, rv$team_id, DEFAULT_WORK_TYPE, con)
      res <- executeQuery(con, query_getcount)
      

      
      query_get_allocation <- get_allocation_timesheet(chat_rv$time_entry_data$effective_date, rv$team_id, con)
      res_pct <- executeQuery(con, query_get_allocation)
      current_allocation <- if (is.na(res_pct$total_allocation)) 0 else as.numeric(res_pct$total_allocation)
      

      
      # For update mode, get the current allocation for this project
      current_project_allocation <- 0
      if (!is.null(chat_rv$update_mode) && chat_rv$update_mode) {

        query_get_project_allocation <- get_allocation_project(
          chat_rv$time_entry_data$project_id,
          chat_rv$time_entry_data$effective_date,
          rv$team_id,
          con
        )

        res_project <- query_get_project_allocation
        current_project_allocation <- if (is.null(res_project) || is.na(res_project$total_allocation)) 0 else as.numeric(res_project$total_allocation)
      }
      
      # Adjust total_allocation for update mode

      if (!is.null(chat_rv$update_mode) && chat_rv$update_mode) {

        total_allocation <- current_allocation - current_project_allocation + as.numeric(allocation)

      } else {

        total_allocation <- current_allocation + as.numeric(allocation)

      }
      
      # If entry exists, prompt user to update or start over

      if (!is.null(res) && !is.na(res$count) && res$count >= 1 && is.null(chat_rv$update_mode)) {

        msg <- "A time entry for this project and month already exists. Do you want to update the allocation or start over?"
        chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = msg)))
        chat_rv$step <- "time_entry_exists_choice"
      } else if (allocation > 1) {

        msg <- sprintf(
          "Your allocation of %.1f%% exceeds the 100%% limit for the month. You can only add up to %.1f%% more. Please try again.",
          allocation * 100, (1 - current_allocation) * 100
        )
        chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = msg)))
        chat_rv$step <- "time_entry_allocation"

      } else if (total_allocation > 1) {

        # For update mode, show the correct remaining allocation
        remaining <- if (!is.null(chat_rv$update_mode) && chat_rv$update_mode) {
          1 - (current_allocation - current_project_allocation)
        } else {
          1 - current_allocation
        }
        msg <- sprintf(
          "Your allocation of %.1f%% exceeds the 100%% limit for the month. You can only add up to %.1f%% more. Please try again.",
          allocation * 100, remaining * 100
        )
        chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = msg)))
        chat_rv$step <- "time_entry_allocation"
      } else {
        if (!is.null(chat_rv$update_mode) && chat_rv$update_mode) {

          # Update existing allocation
          tryCatch({

            update_query_ts <- update_timesheet(
              chat_rv$time_entry_data$project_id,
              chat_rv$time_entry_data$effective_date,
              rv$team_id,
              DEFAULT_WORK_TYPE,
              allocation,
              con
            )

            executeQuery(con, update_query_ts)
            chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Success! Your time entry has been updated.")))
            time_entry_trigger(time_entry_trigger() + 1)
          }, error = function(e) {
            log_error(paste("Chat Time Entry Update Error for", rv$user_full_name, ":", e$message))
            chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = paste("An error occurred:", e$message))))
          })
          chat_rv$history <- c(chat_rv$history, list(list(
            author = "bot",
            msg = "We hope you find the new Time Entry feature helpful! If you have any feedback or suggestions, please click the \"Give Project Tracker Feedback\" button on the left. Thank you for helping us improve the tool."
          )))
          chat_rv$step <- "end"
          chat_rv$update_mode <- NULL
        } else {
          # Insert new allocation
          tryCatch({
            insert_query_ts <- insert_timesheet(chat_rv$time_entry_data$project_id, chat_rv$time_entry_data$effective_date, rv$team_id, DEFAULT_WORK_TYPE, allocation, con)

            executeQuery(con, insert_query_ts)
            chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = "Success! Your time entry has been saved.")))
            time_entry_trigger(time_entry_trigger() + 1)
          }, error = function(e) {
            log_error(paste("Chat Time Entry Error for", rv$user_full_name, ":", e$message))
            chat_rv$history <- c(chat_rv$history, list(list(author = "bot", msg = paste("An error occurred:", e$message))))
          })
          chat_rv$history <- c(chat_rv$history, list(list(
            author = "bot",
            msg = "We hope you find the new Time Entry feature helpful! If you have any feedback or suggestions, please click the \"Give Project Tracker Feedback\" button on the left. Thank you for helping us improve the tool."
          )))
          chat_rv$step <- "end"
        }
      }
    })
  })
  
  
  # Handle restart
  observeEvent(input$chat_restart, {
    chat_rv$history <- list(
      list(author = "bot", msg = paste0("Hello! ", rv$user_full_name, ", what would you like to do today?"))
    )
    chat_rv$step <- "start"
    chat_rv$time_entry_data <- list()
    chat_rv$update_mode <- NULL   # <-- Add this line to clear update mode
  })
  
  
  
  ########################################################################################
  ##                                 Helper Function                                    ## 
  ######################################################################################## 
  
  show_message_shiny_alert <- function(text, title = "Error!", type = "error") {
    shinyalert::shinyalert(
      title = title,
      text  = text,
      type  = type
    )
  }
  
  log_error <- function(error_msg, extra_info = "") {

    timestamp <- Sys.time()
    date_str <- format(timestamp, "%Y-%m-%d_%H-%M-%S")
    log_file <- paste0(source_log,"error_log_", date_str, ".txt")
    log_line <- paste(timestamp, error_msg, extra_info, sep = ",")
    cat(log_line, file = log_file, sep = "\n", append = TRUE)
  }
  
  
  ########################################################################################
  ##                                List of Projects                                    ## 
  ######################################################################################## 
  
  # Render the DataTable for the list of projects
  renderProjectTable <- function() {
    output$PJ <- DT::renderDataTable({
      dbGetQuery(con, projects)
    }, options = list(
      scrollX = TRUE,  
      autoWidth = TRUE,  
      editable = TRUE,  
      columnDefs = list(
        list(width = '80px', targets = 0),  
        list(width = '150px', targets = 1),  
        list(width = '150px', targets = 2), 
        list(width = '250px', targets = 3), 
        list(width = '1000px', targets = 4), 
        list(width = '150px', targets = 9),  
        list(width = '350px', targets = 14),  
        list(width = '250px', targets = 20),  
        list(width = '250px', targets = 21),  
        list(width = '250px', targets = 22),  
        list(width = '250px', targets = 23),  
        list(width = '250px', targets = 24),  
        list(width = '250px', targets = 25),  
        list(width = '350px', targets = 30),  
        list(width = '250px', targets = 31)  
      )
    ), rownames = FALSE)  
  }
  
  renderProjectTable()
  
  is_project_completed <- function(project_id) {
    if (is.null(project_id) || is.na(project_id)) {
      return(FALSE)
    }
    
    query  <- get_completion_date_by_project_id(project_id, con)
    result <- dbGetQuery(con, query)
    
    if (nrow(result) > 0) {
      
      completion_date <- result$actual_completion_date
      completion_date <- as.character(completion_date)
      
      if (!is.null(completion_date) && !is.na(completion_date) && completion_date != "") {
        return(TRUE)
      }else{
        return(FALSE)
      }
    } else {
      return(FALSE)
    }
  }
  
  # Observe the event when the project is selected in the time entry tab
  observeEvent(input$projectparent, {
    
    project_id <- input$projectparent
    
    if (!is.null(project_id) && project_id != "Choose") {
      completed <- is_project_completed(project_id)
      
      if (completed) {
        show_message_shiny_alert(
          "This project has been marked as completed. You may still add hours if needed.",
          title = "Project Completed",
          type  = "warning"
        )
      }
    }
  })
  
  ########################################################################################
  ##                              Time Entry Functions                                  ## 
  ########################################################################################   
  
  # A trigger to refresh time entry data after a change
  time_entry_trigger <- reactiveVal(0)
  
  # This reactive now depends on the trigger. It will re-fetch data when the trigger changes.
  time_saved_data <- reactive({
    time_entry_trigger() # Establish dependency on the trigger
    req(rv$team_id)
    query <- get_time_entry_details(rv$team_id, con)
    executeQuery(con, query)
  })
  
  # This reactive also depends on the trigger
  fetch_time_data <- reactive({
    time_entry_trigger() # Establish dependency on the trigger
    req(rv$team_id)
    executeQuery(con, get_timesheet_data(rv$team_id, con))
  })
  
  output$time_bar_chart <- renderPlotly({
    data <- fetch_time_data()
    render_time_bar_chart(data)
  })
  
  is_project_completed <- function(project_id) {
    req(project_id)
    query  <- get_completion_date_by_project_id(project_id, con)
    result <- dbGetQuery(con, query)
    
    if (is.null(result) || nrow(result) == 0) {
      return(FALSE)
    }
    
    completion_date <- result$actual_completion_date
    !is.null(completion_date) && !is.na(completion_date) && completion_date != ""
  }
  
  observeEvent(input$projectparent, {
    req(input$projectparent, input$projectparent != 0)
    
    if (is_project_completed(input$projectparent)) {
      show_message_shiny_alert(
        "This project has been marked as completed. You may still add hours if needed.",
        title = "Project Completed",
        type  = "warning"
      )
    }
  }, ignoreInit = TRUE)
  
  ########################################################################################
  ##                                 Time Entry Tab                                     ## 
  ########################################################################################   


  
  output$time <- renderUI({
    
    end_of_month_dates      <- get_end_of_month_dates()
    previous_month_end_date <- format(as.Date(format(Sys.Date(), "%Y-%m-01")) - days(1), "%Y-%m-%d")
    
    box(
      solidHeader = TRUE,
      width = 12,
      class = "custom-box",
      column(12,
             checkboxInput("show_closed_projects", "Show Closed Projects", value = FALSE),
             pickerInput(
               inputId  = "projectparent",
               label    = "Project Name",
               choices  = datapj_projectparent,
               selected = "Choose",
               options  = list('actions-box' = TRUE, 'live-search' = TRUE),
               multiple = FALSE
             ),
             pickerInput(
               inputId  = "effective_date",
               label    = "Effective Date",
               choices  = end_of_month_dates,
               options  = list('actions-box' = TRUE, 'live-search' = TRUE),
               multiple = FALSE,
               selected = previous_month_end_date
             ),
             numericInput(
               inputId  = "allocation_pct",
               label    = "Allocation (decimal)",
               value    = 0,
               min      = 0,
               max      = 1,
               step     = 0.01
             )
      ),
      div(
        style = "text-align: center;",
        actionButton("insert_btn_time", "Insert", icon = icon("plus"), class = "custom-button"),
        actionButton("update_btn_time", "Update", icon = icon("edit"), class = "custom-button"),
        actionButton("delete_btn_time", "Delete", icon = icon("trash"), class = "custom-button"),
        actionButton("clear_btn_time", "Clear", icon = icon("times"), class = "custom-button")
      )
    )
  })
  
  # A helper function to perform validation for time entry
  validate_time_entry_inputs <- function() {
    if (is.null(input$projectparent) || input$projectparent == DEFAULT_PROJECT_NAME) {
      show_message_shiny_alert("You must choose a valid Project Name.")
      return(FALSE)
    }
    if (is.null(input$allocation_pct) || input$allocation_pct <= 0) {
      show_message_shiny_alert("Allocation must be greater than 0.")
      return(FALSE)
    }
    if (is.null(input$effective_date)) {
      show_message_shiny_alert("You must choose a valid Effective Date.")
      return(FALSE)
    }
    return(TRUE)
  }
  
  #####################################
  ##        Time Entry - Insert      ##
  #####################################
  
  observeEvent(input$insert_btn_time, {
    
    if (input$projectparent == DEFAULT_PROJECT_NAME || is.na(input$projectparent) || is.null(input$projectparent)) {
      shinyalert::shinyalert(
        title = "Error!",
        #text = "You have to choose a valid Project Name and Work Type from the list.",
        text  = "You have to choose a valid Project Name from the list.",
        type  = "error"
      )
      return()
    }
    
    if (input$allocation_pct <= 0) {
      shinyalert::shinyalert(
        title = "Error!",
        text  = "Allocation (decimal) must be more than 0.",
        type  = "error"
      )
      return()
    }
    
    if (is.na(input$effective_date) || is.null(input$effective_date)) {
      shinyalert::shinyalert(
        title = "Error!",
        text  = "You have to choose a valid Date from the list.",
        type  = "error"
      )
      return()
    }
    
    query_getcount        <- get_count_timesheet(input$projectparent,input$effective_date,team_id,DEFAULT_WORK_TYPE, con)
    query_get_allotcation <- get_allocation_timesheet(input$effective_date,team_id, con)
    res                   <- executeQuery(con, query_getcount)
    res_pct               <- executeQuery(con, query_get_allotcation)
    
    if (is.na(res_pct$total_allocation)) {
      res_pct$total_allocation <- 0
    }
    
    current_allocation <- as.numeric(res_pct$total_allocation)
    new_allocation     <- as.numeric(input$allocation_pct)
    total_allocation   <- current_allocation + new_allocation
    
    # Check if the combination already exists
    if (!is.null(res) && nzchar(res)) {
      if (res$count >= 1) {
        shinyalert::shinyalert(
          title = "Error!",
          text  = "A time sheet entry for this project, date, team member, and work type already exists. You can only add one entry for this combination.",
          type  = "error"
        )
      } else {
        # Check if the total allocation exceeds 100%
        if (total_allocation > 1) {
          shinyalert::shinyalert(
            title = "Allocation Exceeded",
            text  = sprintf("You can only add up to %.2f%% more allocation.", (1 - current_allocation) * 100),
            type  = "error"
          )
        } else {
          
          insert_query_ts <- insert_timesheet(input$projectparent, input$effective_date, team_id, DEFAULT_WORK_TYPE, input$allocation_pct, con)
          
          tryCatch({
            
            executeQuery(con, insert_query_ts)
            
            shinyalert::shinyalert(
              title = "Success!",
              text  = "You have successfully entered your time",
              type  = "success"
            )
            
            time_entry_trigger(time_entry_trigger() + 1)
            
            output$time_bar_chart <- renderPlotly({
              data <- fetch_time_data()
              render_time_bar_chart(data)
            })
            
          }, error = function(e) {
            log_error(paste0("Username: ",full_name,", Object: insert_btn_time, Location: Time Entry - Insert Button, Error Message: ",e$message))
            error_message <- paste("An error occurred while trying to save your time. Please copy the following error message and send it to the Digital Enablement team:\n\n", e$message)
            shinyalert::shinyalert(
              title = "Error",
              text = error_message,
              type = "error"
            )
          })

          

        }
      }
    }
    
    # Reactive expression to fetch time saved details data
    time_saved_data <- reactive({
      executeQuery(con, time_entry_details)
    })
    
    # Render the DataTable for time saved details
    output$time_saved_details <- DT::renderDataTable({
      time_saved_data()
    }, options = list(
      scrollX    = TRUE,  
      autoWidth  = FALSE,  
      editable   = FALSE,  
      columnDefs = list(
        list(width = '150px', targets = 1)  
      )
    ), rownames = FALSE)  
  })
  
  #####################################
  ##        Time Entry - Update      ##
  #####################################
  
  observeEvent(input$update_btn_time, {
    
    if (input$projectparent == DEFAULT_PROJECT_NAME ) {
      shinyalert::shinyalert(
        title = "Error!",
        text  = "You have to choose a valid Project Name from the list.",
        type  = "error"
      )
      return()
    }
    
    if (input$allocation_pct <= 0) {
      shinyalert::shinyalert(
        title = "Error!",
        text  = "Allocation (decimal) must be more than 0.",
        type  = "error"
      )
      return()
    }
    
    query_getcount        <- get_count_timesheet(input$projectparent,input$effective_date,team_id,DEFAULT_WORK_TYPE, con)
    #query_get_alloc_proj  <- get_allocation_project(input$projectparent,input$effective_date,team_id, con)
    query_get_allotcation <- get_allocation_timesheet(input$effective_date,team_id, con)
    res                   <- executeQuery(con, query_getcount)
    res_pct               <- executeQuery(con, query_get_allotcation)
    #pct_curr              <- executeQuery(con, query_get_alloc_proj)
    pct_curr              <- get_allocation_project(input$projectparent,input$effective_date,team_id, con)
    

    
    if (is.na(res_pct$total_allocation)) {
      res_pct$total_allocation <- 0
    }
    
    current_allocation <- as.numeric(res_pct$total_allocation)
    new_allocation     <- as.numeric(input$allocation_pct)
    total_allocation   <- current_allocation + new_allocation
    pct_curr_alloc     <- as.numeric(pct_curr$total_allocation)
    

    if (!is.null(res) && nzchar(res)) {
      if (res$count == 0) {
        shinyalert::shinyalert(
          title = "Error!",
          text  = "No existing entry found for this combination to update.",
          type  = "error"
        )
      } else {
        
        act_alloc_pct_bu <- res_pct - pct_curr_alloc
        total_allocation <- new_allocation + act_alloc_pct_bu
        
        if(total_allocation > 1){
          shinyalert::shinyalert(
            title = "Allocation Exceeded",
            text  = sprintf("You can only add up to %.2f%% more allocation.", (1 - act_alloc_pct_bu) * 100),
            type  = "error"
          )
          return()
        }

        update_query    <- update_timeentry(input$projectparent, input$effective_date, team_id, DEFAULT_WORK_TYPE, input$allocation_pct, con)
        
        tryCatch({
          
          executeQuery(con, update_query)
          
          shinyalert::shinyalert(
            title = "Success!",
            text  = "The time sheet entry has been successfully updated.",
            type  = "success"
          )
          
          output$time_bar_chart <- renderPlotly({
            data <- fetch_time_data()
            render_time_bar_chart(data)
          })
          
        }, error = function(e) {
          log_error(paste0("Username: ",full_name,", Object: update_btn_time, Location: Time Entry - Update Button, Error Message: ",e$message))
          error_message <- paste("An error occurred while trying to save your time. Please copy the following error message and send it to the Digital Enablement team:\n\n", e$message)
          shinyalert::shinyalert(
            title = "Error",
            text = error_message,
            type = "error"
          )
        })
        
        
      }
    }
    
    time_saved_data <- reactive({
      executeQuery(con, time_entry_details)
    })
    
    output$time_saved_details <- DT::renderDataTable({
      time_saved_data()
    }, options = list(
      scrollX    = TRUE,  
      autoWidth  = FALSE,  
      editable   = FALSE,  
      columnDefs = list(
        list(width = '150px', targets = 1)  
      )
    ), rownames = FALSE)  
  })
  
  #####################################
  ##        Time Entry - Delete      ##
  #####################################
  
  observeEvent(input$delete_btn_time, {
    
    if (input$projectparent == DEFAULT_PROJECT_NAME ) {
      shinyalert::shinyalert(
        title = "Error!",
        text  = "You have to choose a valid Project Name from the list.",
        type  = "error"
      )
      return()
    }
    
    query_getcount        <- get_count_timesheet(input$projectparent,input$effective_date,team_id,DEFAULT_WORK_TYPE, con)
    res <- executeQuery(con, query_getcount)
    
    if (res$count == 0) {
      shinyalert::shinyalert(
        title = "Error!",
        text  = "No matching entry found to delete.",
        type  = "error"
      )
      return()
    }
    
    delete_query <- delete_timeentry(input$projectparent, input$effective_date, team_id, DEFAULT_WORK_TYPE, con)
    tryCatch({
      
      executeQuery(con, delete_query)
      
      shinyalert::shinyalert(
        title = "Success!",
        text  = "The row has been successfully deleted.",
        type  = "success"
      )
      
      output$time_bar_chart <- renderPlotly({
        data <- fetch_time_data()
        render_time_bar_chart(data)
      })
      
      # Reactive expression to fetch time saved details data
      time_saved_data <- reactive({
        executeQuery(con, time_entry_details)
      })
      
      
      output$time_saved_details <- DT::renderDataTable({
        time_saved_data()
      }, options = list(
        scrollX    = TRUE,  
        autoWidth  = FALSE, 
        editable   = FALSE, 
        columnDefs = list(
          list(width = '150px', targets = 1)  
        )
      ), rownames = FALSE) 
      
    }, error = function(e) {
      log_error(paste0("Username: ",full_name,", Object: delete_btn_time, Location: Time Entry - Delete Button, Error Message: ",e$message))
      error_message <- paste("An error occurred while trying to delete the entry. Please copy the following error message and send it to the Digital Enablement team:\n\n", e$message)
      shinyalert::shinyalert(
        title = "Error",
        text = error_message,
        type = "error"
      )
    })

    

  })
  
  #####################################
  ##        Time Entry - Clear       ##
  #####################################
  
  observeEvent(input$clear_btn_time, {

    updatePickerInput(session, "projectparent", selected = "Choose")
    
    updateNumericInput(session, "allocation_pct", value = 0)
    
    updatePickerInput(session, "effective_date", selected = format(Sys.Date(), "%Y-%m-%d"))
  })
  
  
  ##########################################################
  ##                  Project Functions                   ##
  ##########################################################

  fetch_project_list <- function(user) {

    project_useradmin       <- executeQuery(con, get_projects_admin(user,con))
    
    if(project_useradmin == 0){
      project_list_query <- get_project_list(user, con)
      project_list       <- executeQuery(con, project_list_query)
    }else{
      project_list_query <- get_project_list_admin()
      project_list       <- executeQuery(con, project_list_query)
    }
    
    dataproject_list   <- setNames(as.list(project_list$project_id), truncate_text(project_list$project_name))
    dataproject_list   <- c("Choose" = 0, dataproject_list)

    return(dataproject_list)
  }
  
  approval_trigger <- reactiveVal(0)
  
  calculate_estimated_completion_date <- function(start_date, max_days) {
    
    start_date                <- as.Date(start_date)
    estimated_completion_date <- start_date + max_days
    
    return(estimated_completion_date)
  }
  log_error <- function(error_msg, extra_info = "") {

    timestamp <- Sys.time()
    date_str <- format(timestamp, "%Y-%m-%d_%H-%M-%S")
    log_file <- paste0(source_log,"error_log_", date_str, ".txt")
    log_line <- paste(timestamp, error_msg, extra_info, sep = ",")
    cat(log_line, file = log_file, sep = "\n", append = TRUE)
    
  }
  
  # Function to log notes with a timestamp temporal
  log_notes_debug <- function(error_msg, extra_info = "") {

    timestamp <- Sys.time()
    date_str <- format(timestamp, "%Y-%m-%d_%H-%M-%S")
    log_file <- paste0(source_log,"notes_log_", date_str, ".txt")
    log_line <- paste(timestamp, error_msg, extra_info, sep = ",")
    cat(log_line, file = log_file, sep = "\n", append = TRUE)
    
  }
  
  escape_single_quotes <- function(input) {
    return(gsub("'", "''", input))
  }
  
  datapj_implementer <- c("Choose" = 0)
  
  datapj_implementer <- reactive({
    if (is.null(ds_implementer) || nrow(ds_implementer) == 0) {
      c("Choose" = 0)
    } else {
      c("Choose" = 0, setNames(as.list(ds_implementer$human_id), ds_implementer$name))
    }
  })
  
  #project_sizes <- datapj_project_size
  
  show_alert <- function(message) {
    shinyalert::shinyalert(
      title = "Alert",
      text  = HTML(paste('<br> <ul>', message, '</ul> <br>')),
      type  = "error",
      html  = TRUE
    )
  }

  show_warning <- function(message) {
    shinyalert::shinyalert(
      title = "Warning",
      text  = HTML(paste('<br> <ul>', message, '</ul> <br>')),
      type  = "success",
      html  = TRUE
    )
  }
  
  var_role_implem     <<- paste0("implementer',")
  var_role_reques     <<- paste0("requestor',")
  var_role_submit     <<- paste0("submitter',")
  var_role_level      <<- paste0("1,")
  var_role_pct        <<- paste0("1,'")
  var_start_dt        <<- paste0("1900-01-01',")
  var_end_dt          <<- paste0("NULL,")
  Var_hu_map_notes    <<- paste0("NULL")

  ########################################################################################
  ##                               Project Entry Tab                                    ## 
  ########################################################################################  

  output$newproject <- renderUI({
    fluidPage(
      fluidRow(
        column(8,
               div(
                 id = "step1",
                 box(
                   solidHeader = TRUE,
                   width = 12,
                   class = "custom-box",
                   tags$div(
                     `data-toggle` = "tooltip",
                     `data-placement` = "top",
                     title = tooltip_map["project_name"],
                     textInput("project_name", "Project Name (*)", value = "")
                   ),
                   tags$div(
                     `data-toggle` = "tooltip",
                     `data-placement` = "top",
                     title = tooltip_map["description"],
                     textInput("description", "Description (*)", value = "")
                   ),
                   tags$div(
                     `data-toggle` = "tooltip",
                     `data-placement` = "bottom",
                     title = tooltip_map["start_date"],
                     dateInput("start_date", "Start Date", value = format(Sys.Date(), "%Y-%m-%d"))
                   ),
                   tags$div(
                     `data-toggle` = "tooltip",
                     `data-placement` = "bottom",
                     title = tooltip_map["idea_date"],
                     dateInput("idea_date", "Idea Date (*)", value = format(Sys.Date(), "%Y-%m-%d"))
                   ),
                   checkboxInput("suggestion_box_only", "Suggestion Box Only", value = FALSE),
                   div(
                     style = "text-align: center;",
                     actionButton("next_step1", "Next", class = "custom-button")
                   )
                 )
               ),
               tags$script(HTML("$(document).ready(function(){
                  $('[data-toggle=\"tooltip\"]').tooltip();
                });")),
               
               div(
                 id = "step2",
                 style = "display: none;",
                 box(
                   solidHeader = TRUE,
                   width = 12,
                   class = "custom-box",
                   radioButtons("project_for", "Is this project for you or someone else? (Who should be listed as the main implementer of the project)", choices = c("Me" = "me", "Someone Else" = "someone_else")),
                   conditionalPanel(
                     condition = "input.project_for == 'someone_else'",
                     tags$div(
                       `data-toggle` = "tooltip",
                       `data-placement` = "top",
                       title = "Choose an implementer for this project",
                       pickerInput(
                         inputId = "implementer", 
                         "Implementer (*)", 
                         choices = datapj_implementer(), 
                         options = list('actions-box' = TRUE, 'live-search' = TRUE),
                         multiple = FALSE, 
                         selected = "Choose"
                       )
                     )
                     ),
                   div(
                     style = "text-align: center;",
                     actionButton("prev_step2", "Back", class = "custom-button"),
                     actionButton("next_step2", "Next", class = "custom-button")
                   )
                 )
               ),
               tags$script(HTML("$(document).ready(function(){
                  $('[data-toggle=\"tooltip\"]').tooltip();
                });")),
               
               div(
                 id = "step3",
                 style = "display: none;",
                 box(
                   solidHeader = TRUE,
                   width = 12,
                   class = "custom-box",
                    tags$div(
                     `data-toggle` = "tooltip",
                     `data-placement` = "top",
                     title = "Choose a requestor for this project",
                     pickerInput(
                       inputId = "requestor_for", 
                       "Who is the requestor for this project?", 
                       choices = datapj_employee, 
                       options = list('actions-box' = TRUE, 'live-search' = TRUE),
                       multiple = FALSE, 
                       selected = "Choose"
                     )
                   ),
                   textInput("notes", "Notes (optional)", value = ""),
                   actionButton("addrequestor", "Add Requestor", icon = icon("plus")),
                   div(
                     style = "text-align: center;",
                     actionButton("prev_step3", "Back", class = "custom-button"),
                     actionButton("next_step3", "Next", class = "custom-button")
                   ),
                   fluidRow(
                     column(12,
                            div(
                              style = "margin-top: 20px; font-weight: bold; color: black;",
                              "The Add Requestor button is used to add a new requestor to the list. If the requestor already exists in the list, please select them from the dropdown menu."
                            )
                     )
                   )
                 )
               ),
               tags$script(HTML("$(document).ready(function(){
                  $('[data-toggle=\"tooltip\"]').tooltip();
                });")),               
               div(
                 id = "step4",
                 style = "display: none;",
                 box(
                   solidHeader = TRUE,
                   width = 12,
                   class = "custom-box",
                   tags$div(
                     `data-toggle` = "tooltip",
                     `data-placement` = "top",
                     title = tooltip_map["estimated_completion_date"],
                     dateInput("est_completion_date", "Estimated Completion Date (*)", value = format(Sys.Date(), "%Y-%m-%d"))
                   ),
                   tags$div(
                     `data-toggle` = "tooltip",
                     `data-placement` = "top",
                     title = tooltip_map["front_office_initiative"],
                     pickerInput(
                       inputId = "front_office_initiative", 
                       "Front Office Initiative (*)", 
                       choices = include, 
                       options = list('actions-box' = TRUE, 'live-search' = TRUE),
                       multiple = FALSE
                     )
                   ),
                   tags$div(
                     `data-toggle` = "tooltip",
                     `data-placement` = "top",
                     title = tooltip_map["digital_challenge"],
                     pickerInput(
                       inputId = "digital_challenge", 
                       "Digital Challenge", 
                       choices = include, 
                       options = list('actions-box' = TRUE, 'live-search' = TRUE),
                       multiple = FALSE
                     )
                   ),
                   tags$div(
                     `data-toggle` = "tooltip",
                     `data-placement` = "top",
                     title = tooltip_map["gen_ai_reporting"],
                     pickerInput(
                       inputId = "gen_ai_reporting", 
                       "Gen AI Reporting", 
                       choices = include, 
                       options = list('actions-box' = TRUE, 'live-search' = TRUE),
                       multiple = FALSE
                     )
                   ),
                   tags$div(
                     `data-toggle` = "tooltip",
                     `data-placement` = "top",
                     title = tooltip_map["gwam_priority_id"],
                     pickerInput(
                       inputId = "gwampriority", 
                       "Gwam Priority (*)", 
                       choices = datapj_gwampriority, 
                       selected = "Choose", 
                       options = list('actions-box' = TRUE, 'live-search' = TRUE),
                       multiple = FALSE
                     )
                   ),
                   tags$div(
                     `data-toggle` = "tooltip",
                     `data-html` = "true",
                     `data-placement` = "top",
                     title = tooltip_map["initiative_type"],
                     pickerInput(
                       inputId = "initiative_type", 
                       "Initiative Type (*)", 
                       choices = datapj_initiative_type, 
                       options = list('actions-box' = TRUE, 'live-search' = TRUE, multiple = FALSE),
                       selected = "Choose"
                     )
                   ),
                   tags$div(
                     `data-toggle` = "tooltip",
                     `data-placement` = "top",
                     title = tooltip_map["scope_complexity"],
                     pickerInput(
                       inputId = "scope_complexity", 
                       "Scope Complexity (*)", 
                       choices = datapj_priority, 
                       options = list('actions-box' = TRUE, 'live-search' = TRUE),
                       multiple = FALSE, 
                       selected = "Choose"
                     )
                   ),
                   tags$div(
                     `data-toggle` = "tooltip",
                     `data-placement` = "top",
                     title = tooltip_map["type"],
                     pickerInput(
                       inputId = "type", 
                       "Type (*)", 
                       choices = datapj_type, 
                       options = list('actions-box' = TRUE, 'live-search' = TRUE),
                       multiple = FALSE, 
                       selected = "Choose"
                     )
                   ),
                   div(
                     style = "text-align: center;",
                     actionButton("prev_step4", "Back", class = "custom-button"),
                     actionButton("next_step4", "Next", class = "custom-button")
                   )
                 ),
                 tags$script(HTML("$(document).ready(function(){
                    $('[data-toggle=\"tooltip\"]').tooltip();
                  });"))
               ),
               
               div(
                 id = "step5",
                 style = "display: none;",
                 box(
                   solidHeader = TRUE,
                   width = 12,
                   class = "custom-box",
                   pickerInput(inputId ="ultimate_output_system", "Ultimate Output System (optional)", choices = datapj_output_type, options = list('actions-box' = TRUE, 'live-search' = TRUE), multiple = FALSE, selected = "Choose"),
                   textInput("risk_review", "Risk Review (optional)", value = ""),
                   textInput("compliance_review", "Compliance Review (optional)", value = ""),
                   textInput("model_review", "Model Review (optional)", value = ""),
                   textInput("client_team", "Client Team (optional)", value = ""),
                   textInput("tech_review", "Tech Review (optional)", value = ""),
                   #textInput("est_person_days", "Estimate Person Days (optional)", value = ""),
                   selectInput(
                     inputId = "est_person_days",
                     label = "Estimated Person Days (optional)",
                     choices = 0:500,
                     selected = 0
                   ),
                   numericInput(
                     inputId  = "est_fte_alloc",
                     label    = "Estimate Fte. Alloc. (optional)",
                     value    = 0,
                     min      = 0,
                     max      = 1,
                     step     = 0.01
                   ),
                   textInput("confluence_link", "Confluence url (optional)", value = ""),

                   div(
                     style = "text-align: center;",
                     actionButton("prev_step5", "Back", class = "custom-button"),
                     actionButton("submit_project", "Submit", class = "custom-button")
                   )
                 )
               )
        ),
        column(4,
               box(
                 solidHeader = TRUE,
                 width = 12,
                 class = "custom-box",
                 h4(style = "text-align: center; font-weight: bold;", "Project Summary"),
                 uiOutput("project_summary")
               )
        )
      )
    )
  })
  
  output$project_summary <- renderUI({
    project_summary_content()
  })
  
  observeEvent(input$next_step1, {

    suggestion_box <<- input$suggestion_box_only

    is_empty <<- function(x) {
      if (is.null(x)) return(TRUE)
      if (length(x) == 0) return(TRUE)
      if (is.atomic(x) && is.character(x)) {
        return(all(trimws(x) == ""))
      }
      if (is.atomic(x) && any(is.na(x))) return(TRUE)
      return(FALSE)
    }
    
    validation_step1 <- list(
      list(value = is_empty(input$idea_date),  type = "Alert",
           message = "The Idea Date is not selected of the calendar. Please select a date"),
      list(value = is.null(input$project_name) || is.na(input$project_name) || input$project_name == "", type = "Alert",
           message = "The Project Name is required. Please fill it in."),
      list(value = is.null(input$description) || is.na(input$description) || input$description == "", type = "Alert",
           message = "The Description is required. Please fill it in.")
    )
    
    if ((is.null(input$project_name) || is.na(input$project_name) || input$project_name == "") && 
        (is.null(input$description) || is.na(input$description) || input$description == "")) {
      
      show_alert('Please ensure all mandatory fields are correctly filled')
      
      df <- data.frame("No data to insert")
      
    } else {
      
      messages <- ""
      
      for (validation in validation_step1) {
        if (is.na(validation$value)) {
          validation$value <- FALSE
        }
        if (validation$value && validation$type == "Alert") {
          messages <- paste(messages, '<li>', validation$message, "</li><br>")
        }
      }
      
      if (nchar(messages) > 0) {
        show_alert(messages)
      } else {
        messages <- "No Alerts"

        if (supervisor_flag > 0) {
          shinyjs::hide("step1")
          shinyjs::show("step2")
        } else {
          shinyjs::hide("step1")
          shinyjs::show("step3")
        }
        
        project_summary_content(
          tagList(
            p(tags$b("Project Name: "), input$project_name),
            p(tags$b("Description: "), input$description),
            p(tags$b("Start Date: "), input$start_date),
            p(tags$b("Idea Date: "), input$idea_date)
          )
        )
      }
      
      df <- data.frame(messages)
    }
    df1 <<- df
  })
  
  observeEvent(input$next_step2, {
    shinyjs::hide("step2")
    shinyjs::show("step3")
    
    project_summary_content(
      tagList(
        p(tags$b("Project Name: "), input$project_name),
        p(tags$b("Description: "), input$description),
        p(tags$b("Start Date: "), input$start_date),
        p(tags$b("Idea Date: "), input$idea_date),
        if (input$project_for == "someone_else") {
          user_implementer_query          <- get_full_name(input$implementer,con)
          user_implementer <- executeQuery(con,user_implementer_query)
          p(tags$b("Implementer: "), user_implementer)
        } else {
          p(tags$b("Implementer: "), full_name)
        }
      )
    )
  })
  
  observeEvent(input$next_step3, {
    
    if(is_empty(input$start_date)) {
      shinyjs::hide("est_completion_date")
    }else{
      shinyjs::show("est_completion_date")
    }

    if ((is.null(input$requestor_for) || input$requestor_for == "Choose" || input$requestor_for == 0)) {
      
      show_alert('The Requestor is required. Please choose one from the list.')
      
      df <- data.frame("No data to insert")
      
    } else {
      messages <- "No Alerts"
        
        shinyjs::hide("step3")
        shinyjs::show("step4")
        
        user_requestor_query   <- get_full_name(input$requestor_for,con)
        user_requestor         <<- executeQuery(con,user_requestor_query)
        
        project_summary_content(
          tagList(
            p(tags$b("Project Name: "), input$project_name),
            p(tags$b("Description: "), input$description),
            p(tags$b("Start Date: "), input$start_date),
            p(tags$b("Idea Date: "), input$idea_date),
            if (input$project_for == "someone_else") {
              user_implementer_query          <- get_full_name(input$implementer,con)
              user_implementer <- executeQuery(con,user_implementer_query)
              #userid_implementer <- input$implementer
              p(tags$b("Implementer: "), user_implementer)
            } else {
              #userid_implementer <- team_id
              p(tags$b("Implementer: "), full_name)
            },
            p(tags$b("Requestor: "), user_requestor),
            p(tags$b("Notes: "), input$notes),
          )
        )
      
      
      df <- data.frame(messages)
    }

    df3 <<- df
  })
  
  # Observe Add Portfolio Manager button click
  observeEvent(input$addrequestor, {
    
    output$message_save_requestor <- renderText({
      paste0(paste('')) 
      
    })
    
    
    showModal(modalDialog(
      title = "Add a new Requestor",
      htmlOutput("message_save_requestor"), # Display message above the form
      fluidRow(
        column(12,
               textInput("new_first_name", "First Name (*)"),
               textInput("new_last_name", "Last Name (*)"),
               pickerInput(inputId = "new_Geo", "Locale (*)",
                           choices = datapj_locale, selected = "Choose", options = list('actions-box' = TRUE, 'live-search' = TRUE), multiple = FALSE)
               
        )
      ),
      actionButton("save_new_requestor", "Save", class = "btn-primary")
    ))
  })
  
  # Handle Save button click in modal
  observeEvent(input$save_new_requestor, {
    
    req_id_module <<- executeQuery(con,"select max(human_id) + 1 as human_id from projects.human_basicinfo")  
    
    # Define a list of input validations
    validations_req <- list(
      list(value = input$new_last_name == "", type = "Alert", 
           message = "Please ensure all mandatory fields are correctly filled."),
      list(value = input$new_first_name == "", type = "Alert", 
           message = "Please ensure all mandatory fields are correctly filled."),
      list(value = input$new_Geo == 0,  type = "Alert",
           message = "Please ensure all mandatory fields are correctly filled.")
    )
    
    # Check for mandatory fields not filled
    if((is.null(input$new_last_name) || input$new_last_name == "")  &&
       (is.null(input$new_first_name) || input$new_first_name == "")  &&
       input$new_Geo == 0 ) {
      
      df_pm <- "" #data.frame("Please ensure all mandatory fields are correctly filled.")
      shinyalert::shinyalert(
        title = "Alert",
        text = "Please ensure all mandatory fields are correctly filled.",
        type = "error"
      )
      
    } else {
      
      messages_pm <- ""
      
      # Iterate through each validation in the list
      for(validation in validations_req){
        if(validation$value && validation$type == "Alert"){
          # Append the message to the messages string with a line break for formatting
          messages_pm <- "Please ensure all mandatory fields are correctly filled."
          
        }
      }
      
      # Check if there were any messages accumulated (i.e., if any condition was TRUE)
      if(nchar(messages_pm) > 0){
        # Show a single modal with all accumulated messages
        output$message_save_pm <- renderText({
          "Please ensure all mandatory fields are correctly filled." 
          
        })
        
        shinyalert::shinyalert(
          title = "Alert",
          text = messages_pm,
          type = "error"
        )
      } else {
        messages_pm <- "No Alerts"
      }
      
      df_pm <- data.frame(messages_pm)
      
    }
    
    
    # Check if "No Alerts" is present in the dataframe
    if("No Alerts" %in% df_pm){

      var_new_last_name  <- paste0(",'",input$new_last_name,"',")      
      var_new_first_name <- paste0("'",input$new_first_name,"',")
      var_new_locale     <- input$new_Geo 

      
      # # Construct the SQL query to insert data into the 'portfoliomanager_basicinfo' table
      # querynewPM <- paste0("INSERT INTO projects.human_basicinfo(human_id, last_name, first_name, locale_id) 
      #                 VALUES (", req_id_module, var_new_last_name, var_new_first_name,  var_new_locale, ")")
      # 
      # removeModal() # Close the modal dialog
      # 
      # Sys.sleep(1) # Simulate processing time
      # 
      # # Execute the query against the database
      # dbExecute(con, querynewPM)
      # Check if the person already exists
      existing_query <- paste0("SELECT count(*) AS cnt FROM projects.human_basicinfo WHERE last_name = '", 
                               escape_single_quotes(input$new_last_name), 
                               "' AND first_name = '", 
                               escape_single_quotes(input$new_first_name), 
                               "'")
      existing_count <- dbGetQuery(con, existing_query)$cnt[1]
      
      if(existing_count > 0) {
        shinyalert::shinyalert(
          title = "Notice",
          text = "This person already exists.",
          type = "info"
        )
      } else {
        # Proceed with the INSERT query if not found
        querynewPM <- paste0("INSERT INTO projects.human_basicinfo(human_id, last_name, first_name, locale_id) 
                        VALUES (", req_id_module, var_new_last_name, var_new_first_name,  var_new_locale, ")")
        dbExecute(con, querynewPM)
        
        # Display any messages if present
        shinyalert::shinyalert(
          title = "Success!",
          text = "The user was added",
          type = "success"
        )
      }
      

      
      req_id_module <<- dbGetQuery(con,"select max(human_id) + 1 as human_id from projects.human_basicinfo")  
      
    }
    
    new_ds_employee <- executeQuery(con, get_employees())
    new_choices <- c("Choose" = 0, setNames(as.list(new_ds_employee$id), new_ds_employee$full_name))
    updatePickerInput(session, "requestor_for", choices = new_choices)
    
  })
  
  observeEvent(input$next_step4, { 
    
    validations_step4 <- list(
      list(value   = is_empty(input$est_completion_date),  
           type    = "Alert",
           message = "The Estimated Completion Date is not selected of the calendar. Please select a date")
    )

    if (!is_empty(input$start_date)) {
      validations_step4 <- c(
        validations_step4,
        list(
          list(
            value   = input$est_completion_date == input$start_date ||
                      input$est_completion_date == input$idea_date ||
                      input$est_completion_date < input$start_date ||
                      input$est_completion_date < input$idea_date,
            type    = "Alert",
            message = "The Estimated Completion Date cannot be the same as or before the Start/Idea Date. Please select a valid date."
          )
        )
      )
    }
    
    validations_step4 <- c(
      validations_step4,
      list(
        list(
          value = input$gwampriority == "Choose" || input$gwampriority == 0,
          type = "Alert",
          message = "A Gwam Priority has not been selected. Please choose one from the list."
        ),
        list(
          value = input$initiative_type == "Choose",
          type = "Alert",
          message = "An Initiative Type has not been selected. Please choose one from the list."
        ),
        list(
          value = input$scope_complexity == "Choose",
          type = "Alert",
          message = "A Scope Complexity has not been selected. Please choose one from the list."
        ),
        list(
          value = input$type == "Choose",
          type = "Alert",
          message = "A Type has not been selected. Please choose one from the list."
        )
      )
    )
    
      if((is.null(input$gwampriority) || input$gwampriority == "Choose" || input$gwampriority == 0) &&
         (is.null(input$initiative_type) || input$initiative_type == "Choose") &&
         (is.null(input$scope_complexity) || input$scope_complexity == "Choose") &&
         (is.null(input$type) || input$type == "Choose")) {
      
      show_alert('Please ensure all mandatory fields are correctly filled')
      
      df <- data.frame("No data to insert")
      
    } else {
      
      messages <- ""
      
      for (validation in validations_step4) {
        if (is.na(validation$value)) {
          validation$value <- FALSE
        }
        if (validation$value && validation$type == "Alert") {
          messages <- paste(messages, '<li>', validation$message, "</li><br>")
        }
      }
      
      if (nchar(messages) > 0) {
        show_alert(messages)
      } else {
        messages <- "No Alerts"
        
        shinyjs::hide("step4")
        shinyjs::show("step5")
        
        

        # Calculate the number of days between start_date and est_completion_date
        diff_days <- as.numeric(as.Date(input$est_completion_date) - as.Date(input$start_date))
        
        #Exclude the default "Choose" row and find the matching project_size
        valid_proj <- datapj_project_size_val[datapj_project_size_val$project_size != "Choose", ]
        index <- which(valid_proj$min_days <= diff_days & valid_proj$max_days >= diff_days)
        if (length(index) > 0) {
          selected_p_size <- valid_proj$project_size[index]
        } else {
          selected_p_size <- NA
        }
        
        selected_project_size <<- selected_p_size

        project_summary_content(
          tagList(
            p(tags$b("Project Name: "), input$project_name),
            p(tags$b("Description: "), input$description),
            p(tags$b("Start Date: "), input$start_date),
            p(tags$b("Idea Date: "), input$idea_date),
            if (input$project_for == "someone_else") {
              user_implementer_query  <- get_full_name(input$implementer,con)
              user_implementer        <- executeQuery(con,user_implementer_query)
              p(tags$b("Implementer: "), user_implementer)
            } else {
              p(tags$b("Implementer: "), full_name)
            },
            p(tags$b("Requestor: "), user_requestor),
            p(tags$b("Notes: "), input$notes),
            if(is_empty(input$start_date)){
              p(tags$b("Estimated Completion Date: "), " ")
            }else{
            p(tags$b("Estimated Completion Date: "), input$est_completion_date)
            },
            p(tags$b("Project Size Estimate: "), selected_project_size),
            p(tags$b("Front Office Initiative: "), input$front_office_initiative),
            p(tags$b("GWAM Priority: "), executeQuery(con,get_gwam_priority(input$gwampriority, con))),
            p(tags$b("Initiative Type: "), input$initiative_type),
            p(tags$b("Scope Complexity: "), input$scope_complexity),
            p(tags$b("Type: "), input$type)
          )
        )
      }
      
      df <- data.frame(messages)
    }
      df4 <<- df
      
      if (supervisor_flag > 0) {
        if (input$project_for == "someone_else") {
          id_implementer <<- input$implementer
        }else {
          id_implementer <<- team_id}
      } else {
        id_implementer <<- team_id
      }
  })
  
  # Observe the back button clicks to show/hide steps
  observeEvent(input$prev_step2, {
    shinyjs::hide("step2")
    shinyjs::show("step1")
  })
  
  observeEvent(input$prev_step3, {
    if (supervisor_flag > 0) {
      shinyjs::hide("step3")
      shinyjs::show("step2")
    } else {
      shinyjs::hide("step3")
      shinyjs::show("step1")
    }
    
  })
  
  observeEvent(input$prev_step4, {
    shinyjs::hide("step4")
    shinyjs::show("step3")
  })
  
  observeEvent(input$prev_step5, {
    shinyjs::hide("step5")
    shinyjs::show("step4")
  })
  
  # Fetch the next available project ID
  projectid_ <<- dbGetQuery(con, "SELECT max(project_id) + 1 as project_id FROM projects.project_basicinfo pb WHERE project_id != 9999")
  
  #####################################
  ##      Project Entry - Insert     ##
  #####################################
  
  
  Outputinsertproject <- observeEvent(input$submit_project,{
    
    is_empty <- function(x) {
      if (is.null(x)) return(TRUE)
      if (length(x) == 0) return(TRUE)
      if (is.atomic(x) && is.character(x)) {
        return(all(trimws(x) == ""))
      }
      if (is.atomic(x) && any(is.na(x))) return(TRUE)
      return(FALSE)
    }
    
    projectid_query               <-  get_new_projectid()
    projectid_                    <<- dbGetQuery(con, projectid_query)
    projectid_query_temp          <-  get_new_projectid_temp()
    projectid_temp                <<- dbGetQuery(con, projectid_query_temp)
    owner_name_query              <-  get_owner_name(user,con)
    owner_name                    <-  executeQuery(con, owner_name_query)
    owner_team_query              <-  get_team_by_user(team_id,con)
    owner_team                    <-  executeQuery(con, owner_team_query)
    owner_email_query             <-  get_email_by_user(user,con)
    owner_email                   <-  executeQuery(con, owner_email_query)
    owner_supervisor_id_query     <-  get_immediate_supervisor_id(user,con)
    owner_supervisor_id           <-  executeQuery(con, owner_supervisor_id_query)
    owner_supervisor_email_query  <-  get_supervisor_email(owner_supervisor_id,con)
    owner_supervisor_email        <-  executeQuery(con, owner_supervisor_email_query)
    user_email                    <<- as.character(owner_email)
    approv_impl_query             <-  get_full_name(id_implementer,con)
    approv_impl                   <<- dbGetQuery(con, approv_impl_query )
    msg_warning_shinyalert        <-  ""    

    ## 11 = Jonathan M.
    if (owner_supervisor_id %in% c(11)) {
      supervisor_email <- "digital_enablement@manulife.com"
    } else {
      supervisor_email <- as.character(owner_supervisor_email)
    }
    
    validations_warning <- list(
      list(value = input$ultimate_output_system == "Choose" ,  type = "Warning",
            message = "If you don't choose an Ultimate Output System now, you must choose one later.")
    )

    for(validation in validations_warning){
      if(validation$value && validation$type == "Warning"){
        msg_warning_shinyalert <- paste(msg_warning_shinyalert,"\n",validation$message)
      }
    }
      
    if(suggestion_box == TRUE){
      status_value <- "Suggestion Box"
    }else{
      status_value <- "Ideation"
    } 

    df_val_proj_id   <- if (supervisor_flag > 0){
                              projectid_
                            } else {
                              projectid_temp
                            }
    df_val_proj_name <- escape_single_quotes(input$project_name)
    df_val_proj_desc <- escape_single_quotes(input$description)
    df_val_proj_stat <- if(suggestion_box == TRUE){
                          "Suggestion Box"
                        }else{
                          "Ideation"
                          } 
    df_val_proj_stdt <- if(is_empty(input$start_date)){
                          "NULL"
                        }else{
                          input$start_date
                          }
    df_val_proj_etdt <- if(is_empty(input$start_date)){
                          "NULL"
                        }else{
                          input$est_completion_date
                          }
    df_val_proj_acdt <- "NULL"
    df_val_proj_size <- if(is_empty(input$start_date)){
                          "12+ Months"
                        }else{
                            selected_project_size
                        }
    df_val_proj_foin <- input$front_office_initiative
    df_val_proj_opsy <- if (input$ultimate_output_system == "Choose") {
                          "NULL"
                        } else {
                          input$ultimate_output_system
                        }
    df_val_proj_gwid <- input$gwampriority
    df_val_proj_gwnm <- executeQuery(con, get_gwam_priority(df_val_proj_gwid, con))
    df_val_proj_inty <- input$initiative_type
    df_val_proj_dich <- input$digital_challenge
    df_val_proj_scom <- input$scope_complexity
    df_val_proj_type <- input$type
    df_val_proj_note <- if (input$notes == "" || is.na(input$notes) || is.null(input$notes) || trimws(input$notes) == "") {
                          "NULL"
                        } else {
                          escape_single_quotes(toJSON(list(notes = input$notes), auto_unbox = TRUE))
                        }  
    df_val_proj_rkre <- if (input$risk_review == "" || is.na(input$risk_review) || is.null(input$risk_review) || trimws(input$risk_review) == "") {
                          "NULL"
                        } else {
                          escape_single_quotes(input$risk_review)
                        }    
    df_val_proj_clre <- if (input$compliance_review == "" || is.na(input$compliance_review) || is.null(input$compliance_review) || trimws(input$compliance_review) == "") {
                          "NULL"
                        } else {
                          escape_single_quotes(input$compliance_review)
                        }
    df_val_proj_mdre <- if (input$model_review == "" || is.na(input$model_review) || is.null(input$model_review) || trimws(input$model_review) == "") {
                          "NULL"
                        } else {
                          escape_single_quotes(input$model_review)
                        }        
    df_val_proj_clte <- if (input$client_team == "" || is.na(input$client_team) || is.null(input$client_team) || trimws(input$client_team) == "") {
                          "NULL"
                        } else {
                          escape_single_quotes(input$client_team)
                        }
    df_val_proj_tcre <- if (input$tech_review == "" || is.na(input$tech_review) || is.null(input$tech_review) || trimws(input$tech_review) == "") {
                          "NULL"
                        } else {
                          escape_single_quotes(input$tech_review)
                        }
    df_val_proj_idea <- input$idea_date
    df_val_proj_espe <- if (input$est_person_days == "" || is.na(input$est_person_days) || is.null(input$est_person_days) || trimws(input$est_person_days) == "") {
                           "NULL"
                        } else {
                           input$est_person_days
                        }
    df_val_proj_ftal <- if (input$est_fte_alloc == "" || is.na(input$est_fte_alloc) || is.null(input$est_fte_alloc) || trimws(input$est_fte_alloc) == "") {
                           "NULL"
                        } else {
                           input$est_fte_alloc
                        }
    df_val_proj_gai  <- input$gen_ai_reporting
    df_val_proj_prbu <- "NULL"
    df_val_proj_efbu <- "NULL"
    df_val_proj_cofl <- if (input$confluence_link == "" || is.na(input$confluence_link) || is.null(input$confluence_link) || trimws(input$confluence_link) == "") {
                           "NULL"
                        } else {
                           escape_single_quotes(input$confluence_link)
                        }
    df_val_proj_dext <- "NULL"
    df_val_proj_requ <- executeQuery(con, get_full_name(input$requestor_for,con))
    df_val_proj_impl <- executeQuery(con, get_full_name(id_implementer,con))


    var_project_id      <- paste0(df_val_proj_id, ",")
    var_project_name    <- paste0("'",df_val_proj_name, "','")
    var_description     <- paste0(df_val_proj_desc, "','")
    var_status          <- paste0(df_val_proj_stat,"',")
    var_start_date      <- if(is_empty(input$start_date)){
                              "NULL,"
                            }else{
                              paste0("'",input$start_date, "',")
                            }  
    var_estimated_comp  <- if(is_empty(input$start_date)){
                              "NULL,"
                            }else{
                              paste0("'",input$est_completion_date, "',")
                            } 
    var_act_comp_date   <- paste0(df_val_proj_acdt,",")
    var_compl_pct       <- paste0(0, ",'")
    var_proj_size_est   <- paste0(df_val_proj_size, "',")
    var_front_office    <- paste0(df_val_proj_foin, ",")
    var_ult_output_sys  <- if (df_val_proj_opsy == "NULL") {
                              "NULL,"
                            } else {
                              paste0("'", df_val_proj_opsy, "',")
                            }
    var_gwam_priority   <- paste0(input$gwampriority, ",'")
    #var_program_id      <- "NULL,'"
    var_init_type       <- paste0(df_val_proj_inty, "',")
    var_dig_challenge   <- paste0(df_val_proj_dich, ",'")
    var_scope_complex   <- paste0(df_val_proj_scom, "','")
    var_type            <- paste0(df_val_proj_type, "',")
    var_notes           <- if (df_val_proj_note == "NULL") {
                              paste0(df_val_proj_note, ",")
                            } else {
                              paste0("'", df_val_proj_note, "',")
                           }
    var_risk_review     <- if (df_val_proj_rkre == "NULL") {
                              paste0(df_val_proj_rkre, ",")
                           } else {
                              paste0("'", df_val_proj_rkre, "',")
                           }
    var_compl_review    <- if (df_val_proj_clre == "NULL") {
                              paste0(df_val_proj_clre, ",")
                           } else {
                              paste0("'", df_val_proj_clre, "',")
                           }
    var_model_review    <- if (df_val_proj_mdre == "NULL" ) {
                              paste0(df_val_proj_mdre,",")
                           } else {
                              paste0("'", df_val_proj_mdre, "',")
                           }        
    var_client_team     <- if (df_val_proj_clte == "NULL" ) {
                              paste0(df_val_proj_clte,",")
                           } else {
                              paste0("'", df_val_proj_clte, "',")
                           }
    var_tech_review     <- if (df_val_proj_tcre == "NULL") {
                              paste0(df_val_proj_tcre,",")
                           } else {
                              paste0("'", df_val_proj_tcre, "',")
                           }
    var_idea_date       <- paste0("'",df_val_proj_idea, "',")   
    var_person_days     <- paste0("", df_val_proj_espe, ",")
    var_fte_alloc       <- paste0(df_val_proj_ftal,",")
    var_gen_ai          <- paste0(df_val_proj_gai, ",")        
    var_prior_bucket    <- if (df_val_proj_prbu == "NULL") {
                              paste0(df_val_proj_prbu,",")
                           } else {
                              paste0("'", df_val_proj_prbu, "',")
                           }  
    var_effort_bucket   <- if (df_val_proj_efbu == "NULL") {
                              paste0(df_val_proj_efbu,",")
                           } else {
                              paste0("'", df_val_proj_efbu, "',")
                           }
    var_confluence      <- if (df_val_proj_cofl == "NULL" ) {
                              paste0(df_val_proj_cofl,",")
                           } else {
                              paste0("'", df_val_proj_cofl, "',")
                           }
    var_desc_extended   <- if (df_val_proj_dext == "NULL" ) {
                              paste0(df_val_proj_dext)
                           } else {
                              paste0("'", df_val_proj_dext, "'")
                           }
        
    var_human_id        <- paste0(id_implementer, ",'")
    var_requestor_id    <- paste0(input$requestor_for, ",'")
    var_approv_user     <- paste0(",'",full_name,"',")
    var_approv_imple    <- paste0("'",approv_impl,"',")
    var_approv_req      <- paste0("'",user_requestor,"'")
    var_submitter_id    <- paste0(team_id, ",'")  
        
        if(supervisor_flag  > 0){
          create_new_project_query <- create_new_project(
            var_project_id,
            var_project_name,
            var_description,
            var_status,
            var_start_date,
            var_estimated_comp,
            var_act_comp_date,
            var_compl_pct,
            var_proj_size_est,
            var_front_office,
            var_ult_output_sys,
            var_gwam_priority,
            #var_program_id,
            var_init_type,
            var_dig_challenge,
            var_scope_complex,
            var_type,
            var_notes,
            var_risk_review,
            var_compl_review,
            var_model_review,
            var_client_team,
            var_tech_review,
            var_idea_date,
            var_person_days,
            var_fte_alloc,
            var_gen_ai,
            var_prior_bucket,
            var_effort_bucket,
            var_confluence,
            var_desc_extended
          )
          
          create_new_human_map_imp_query <- create_new_human_map(
            var_project_id,
            var_human_id,
            var_role_implem,
            var_role_level,
            var_role_pct,
            var_start_dt,
            var_end_dt,
            Var_hu_map_notes
          )
          
          create_new_human_map_req_query <- create_new_human_map(
            var_project_id,
            var_requestor_id,
            var_role_reques,
            var_role_level,
            var_role_pct,
            var_start_dt,
            var_end_dt,
            Var_hu_map_notes
          )
          
          create_new_human_map_sub_query <- create_new_human_map(
            var_project_id,
            var_submitter_id,
            var_role_submit,
            var_role_level,
            var_role_pct,
            var_start_dt,
            var_end_dt,
            Var_hu_map_notes
          )
          
        } else {
          create_new_project_query <- create_new_project_approval(
            var_project_id,
            var_project_name,
            var_description,
            var_status,
            var_start_date,
            var_estimated_comp,
            var_act_comp_date,
            var_compl_pct,
            var_proj_size_est,
            var_front_office,
            var_ult_output_sys,
            var_gwam_priority,
            #var_program_id,
            var_init_type,
            var_dig_challenge,
            var_scope_complex,
            var_type,
            var_notes,
            var_risk_review,
            var_compl_review,
            var_model_review,
            var_client_team,
            var_tech_review,
            var_idea_date,
            var_person_days,
            var_fte_alloc,
            var_gen_ai,
            var_prior_bucket,
            var_effort_bucket,
            var_confluence,
            var_desc_extended,
            var_approv_user,
            var_approv_imple,
            var_approv_req
          )
        }
        
        
        np_query <- gsub("\\\\", "", create_new_project_query)
        
        tryCatch({
          if(supervisor_flag > 0){
            dbExecute(con, np_query)
            dbExecute(con, create_new_human_map_imp_query)
            dbExecute(con, create_new_human_map_req_query)
            dbExecute(con, create_new_human_map_sub_query)
          } else {
            dbExecute(con, np_query)
            output$submittedproject <- DT::renderDataTable({
              rendersubmittedprojectDT()
            }, options = list(
              scrollX = TRUE,
              autoWidth = TRUE,
              editable = TRUE,
              columnDefs = list(
                list(width = '150px', targets = 2),
                list(width = '80px', targets = 3),
                list(width = '300px', targets = 4),
                list(width = '600px', targets = 5),
                list(width = '150px', targets = 10),
                list(width = '150px', targets = 12),
                list(width = '250px', targets = 17),
                list(width = '250px', targets = 18)
              )
            ), rownames = FALSE)
          }
          
          tags$head(
            tags$style(HTML("
            .swal-modal {
              text-align: left !important;
            }
          "))
          )

          # shinyalert(
          #   title = "New Project Created",
          #   text = paste(
          #     "Project Name: "             , input$project_name, "\n",
          #     "Description: "              , input$description, "\n",
          #     "Status: "                   , status_value, "\n",
          #     "Idea Date: "                , input$idea_date, "\n",
          #     "Start Date: "               , input$start_date, "\n",
          #     "Estimated Completion Date: ", input$est_completion_date, "\n",
          #     "Requestor: "                , user_requestor, "\n",
          #     "Project Size Estimate: "    , selected_project_size, "\n",
          #     "Front Office Iniatitve: "   , input$front_office_initiative, "\n",
          #     "Ultimate Output System: "   , input$ultimate_output_system, "\n",
          #     "GWAM Priority: "            , input$gwampriority, "\n",
          #     "Project Parent: "           , "NA \n",
          #     "Initiative Type: "          , input$initiative_type, "\n",
          #     "Digital Challenge: "        , input$digital_challenge, "\n",
          #     "Scope Complexity: "         , input$scope_complexity, "\n",
          #     "Type: "                     , input$type, "\n",
          #     "Notes: "                    , input$notes, "\n",
          #     "Risk Review: "              , input$risk_review, "\n",
          #     "Compliance Review: "        , input$compliance_review, "\n",
          #     "Model Review: "             , input$model_review, "\n",
          #     "Client Team: "              , input$client_team, "\n",
          #     "Tech Review: "              , input$tech_review, "\n",
          #     "Estimate Person Days: "     , input$est_person_days, "\n",
          #     "Estimate FTE Allocation: "  , input$est_fte_alloc, "\n",
          #     "Gen AI Reporting: "         , input$gen_ai_reporting, "\n",
          #     "Confluence Link: "          , input$confluence_link, "\n\n\n\n",
          #     "See the following Warnings: ","\n", msg_warning_shinyalert
          #   ),
          #   type = "success"
          # )
          
          shinyalert(
            title = "New Project Submitted",
            text = HTML(
              paste0(
                "<div style='font-family: Arial, sans-serif; font-size: 14px;'>",
                "<table style='width:100%; border-collapse: collapse;'>",
                "  <tr>",
                "    <td style='vertical-align: top; width:50%; padding: 5px;'>",
                "      <p><strong>Project Name:</strong> ", df_val_proj_name, "</p>",
                "      <p><strong>Description:</strong> ", df_val_proj_desc, "</p>",
                "      <p><strong>Status:</strong> ",df_val_proj_stat,"</p>",
                "      <p><strong>Idea Date:</strong> ", df_val_proj_idea, "</p>",
                "      <p><strong>Start Date:</strong> ", df_val_proj_stdt, "</p>",
                "      <p><strong>Estimated Completion Date:</strong> ", df_val_proj_etdt, "</p>",
                "      <p><strong>Requestor:</strong> ", df_val_proj_requ, "</p>",
                "      <p><strong>Implementer:</strong> ", df_val_proj_impl, "</p>",
                "      <p><strong>Project Size Estimate:</strong> ", df_val_proj_size, "</p>",
                "      <p><strong>Front Office Initiative:</strong> ", df_val_proj_foin, "</p>",
                "      <p><strong>Ultimate Output System:</strong> ", df_val_proj_opsy, "</p>",
                "      <p><strong>GWAM Priority:</strong> ", df_val_proj_gwnm, "</p>",
                "      <p><strong>Digital Challenge:</strong> ", df_val_proj_dich, "</p>",
                "    </td>",
                "    <td style='vertical-align: top; width:50%; padding: 5px;'>",
                "      <p><strong>Initiative Type:</strong> ", df_val_proj_inty, "</p>",
                "      <p><strong>Scope Complexity:</strong> ", df_val_proj_scom, "</p>",
                "      <p><strong>Type:</strong> ", df_val_proj_type, "</p>",
                "      <p><strong>Notes:</strong> ", df_val_proj_note, "</p>",
                "      <p><strong>Risk Review:</strong> ", df_val_proj_rkre, "</p>",
                "      <p><strong>Compliance Review:</strong> ", df_val_proj_clre, "</p>",
                "      <p><strong>Model Review:</strong> ", df_val_proj_mdre, "</p>",
                "      <p><strong>Client Team:</strong> ", df_val_proj_clte, "</p>",
                "      <p><strong>Tech Review:</strong> ", df_val_proj_tcre, "</p>",
                "      <p><strong>Estimate Person Days:</strong> ", df_val_proj_espe, "</p>",
                "      <p><strong>Estimate FTE Allocation:</strong> ", df_val_proj_ftal, "</p>",
                "      <p><strong>Gen AI Reporting:</strong> ", df_val_proj_gai, "</p>",
                "      <p><strong>Confluence Link:</strong> ", df_val_proj_cofl, "</p>",
                "    </td>",
                "  </tr>",
                "</table>",
                "<div style='margin-top: 10px;'><strong>WARNINGS:</strong><br>", msg_warning_shinyalert, "</div>",
                "</div>"
              )
            ),
            type = "success",
            html = TRUE
          )
          
          if (supervisor_flag > 0) {
            title_body <<- paste0("<p>A new project has been created by ", owner_name, " with the ID ", projectid_,
                                  " in the IA&D Project Tracker</p>")
            to_email <- user_email
            cc_email <- supervisor_email
          } else {
            title_body <<- paste0("<p>A new project has been submitted for your review by ", owner_name, " in the IA&D Project Tracker</p>")
            to_email <- supervisor_email
            cc_email <- user_email
          }
          
          subject <- "New Project Created in IA&D Project Tracker"
          # body <- paste(
          #   "<p>Hi,</p>",
          #   title_body,
          #   "<ul>",
          #   "<li><strong>Project Name:</strong> ", input$project_name, "</li>",
          #   "<li><strong>Description:</strong> ", input$description, "</li>",
          #   "<li><strong>Status:</strong> ", "Ideation", "</li>",
          #   "<li><strong>Start Date:</strong> ", input$start_date, "</li>",
          #   "<li><strong>Estimated Completion Date:</strong> ", input$est_completion_date, "</li>",
          #   "<li><strong>Requestor:</strong> ", user_requestor, "</li>",
          #   "<li><strong>Project Size Estimate:</strong> ", selected_project_size, "</li>",
          #   "<li><strong>Front Office Initiative:</strong> ",input$front_office_initiative, "</li>",
          #   "<li><strong>Ultimate Output System:</strong> ", input$ultimate_output_system, "</li>",
          #   "<li><strong>GWAM Priority:</strong> ", input$gwampriority, "</li>",
          #   "<li><strong>Digital Challenge:</strong> ", input$digital_challenge, "</li>",
          #   "<li><strong>Initiative Type:</strong> ", input$initiative_type, "</li>",
          #   "<li><strong>Scope Complexity:</strong> ", input$scope_complexity, "</li>",
          #   "<li><strong>Type:</strong> ", input$type, "</li>",
          #   "<li><strong>Notes:</strong> ", input$notes, "</li>",
          #   "<li><strong>Risk Review:</strong> ", input$risk_review, "</li>",
          #   "<li><strong>Compliance Review:</strong> ", input$compliance_review, "</li>",
          #   "<li><strong>Model Review:</strong> ", input$model_review, "</li>",
          #   "<li><strong>Client Team:</strong> ", input$client_team, "</li>",
          #   "<li><strong>Tech Review:</strong> ", input$tech_review, "</li>",
          #   "<li><strong>Estimate Person Days:</strong> ", input$est_person_days, "</li>",
          #   "<li><strong>Estimate Fte Allocation:</strong> ", input$est_fte_alloc, "</li>",
          #   "<li><strong>Gen AI Reporting:</strong> ", input$gen_ai_reporting, "</li>",
          #   "<li><strong>Confluence Link:</strong> ", input$confluence_link, "</li>",
          #   "</ul>",
          #   "<p>Thank you,<br>Digital Enablement Team</p>",
          #   "<p><em>This is an automated message, If you have any questions/comments please reply to digital_enablement@manulife.com</em></p>"
          # )
          
          body <- paste0(
            "<html>",
            "<head>",
            "  <style>",
            "    body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin:0; padding:0; color: #333; }",
            "    .container { max-width: 600px; margin: 20px auto; border: 1px solid #e0e0e0; }",
            "    .header { background-color: #4CAF50; color: #fff; padding: 15px 20px; text-align: center; }",
            "    .content { padding: 20px; }",
            "    .content p { line-height: 1.6; }",
            "    ul { list-style-type: none; padding: 0; }",
            "    li { padding: 5px 0; }",
            "    .label { font-weight: bold; color: #282B3E; }",
            "    .footer { background-color: #f8f8f8; font-size: 0.9em; color: #777; text-align: center; padding: 15px 20px; }",
            "  </style>",
            "</head>",
            "<body>",
            "  <div class='container'>",
            "    <div class='header'>",
            "      <h2>New Project Notification</h2>",
            "    </div>",
            "    <div class='content'>",
            "      <p>Dear Recipient,</p>",
            title_body,
            "      <p>Please find below the details for the new project:</p>",
            "      <ul>",
            "        <li><span class='label'>Project Name:</span> ", df_val_proj_name, "</li>",
            "        <li><span class='label'>Description:</span> ", df_val_proj_desc, "</li>",
            "        <li><span class='label'>Status:</span> ",df_val_proj_stat,"</li>",
            "        <li><span class='label'>Start Date:</span> ", df_val_proj_stdt, "</li>",
            "        <li><span class='label'>Idea Date:</span> ", df_val_proj_idea, "</li>",
            "        <li><span class='label'>Estimated Completion Date:</span> ", df_val_proj_etdt, "</li>",
            "        <li><span class='label'>Requestor:</span> ", df_val_proj_requ, "</li>",
            "        <li><span class='label'>Project Size Estimate:</span> ", df_val_proj_size, "</li>",
            "        <li><span class='label'>Front Office Initiative:</span> ", df_val_proj_foin, "</li>",
            "        <li><span class='label'>Ultimate Output System:</span> ", df_val_proj_opsy, "</li>",
            "        <li><span class='label'>GWAM Priority:</span> ", df_val_proj_gwnm, "</li>",
            "        <li><span class='label'>Digital Challenge:</span> ", df_val_proj_dich, "</li>",
            "        <li><span class='label'>Initiative Type:</span> ", df_val_proj_inty, "</li>",
            "        <li><span class='label'>Scope Complexity:</span> ", df_val_proj_scom, "</li>",
            "        <li><span class='label'>Type:</span> ", df_val_proj_type, "</li>",
            "        <li><span class='label'>Notes:</span> ", df_val_proj_note, "</li>",
            "        <li><span class='label'>Risk Review:</span> ", df_val_proj_rkre, "</li>",
            "        <li><span class='label'>Compliance Review:</span> ", df_val_proj_clre, "</li>",
            "        <li><span class='label'>Model Review:</span> ", df_val_proj_mdre, "</li>",
            "        <li><span class='label'>Client Team:</span> ", df_val_proj_clte, "</li>",
            "        <li><span class='label'>Tech Review:</span> ", df_val_proj_tcre, "</li>",
            "        <li><span class='label'>Estimate Person Days:</span> ", df_val_proj_espe, "</li>",
            "        <li><span class='label'>Estimate Fte Allocation:</span> ", df_val_proj_ftal, "</li>",
            "        <li><span class='label'>Gen AI Reporting:</span> ", df_val_proj_gai, "</li>",
            "        <li><span class='label'>Confluence Link:</span> ", df_val_proj_cofl, "</li>",
            "      </ul>",
            "      <p>If you have any questions, please feel free to reach out to our team.</p>",
            "      <p>Best regards,<br><strong>Digital Enablement Team</strong></p>",
            "    </div>",
            "    <div class='footer'>",
            "      <p>This is an automated message. For inquiries, please contact digital_enablement@manulife.com.</p>",
            "    </div>",
            "  </div>",
            "</body>",
            "</html>"
          )
          tryCatch({
            mailR::send.mail(
              from = "Digital_Enablement@manulife.com",
              to = to_email,
              cc = cc_email,
              subject = subject,
              body = body,
              smtp = list(host.name = "mail.manulife.com", port = 25),
              html = TRUE
            )
          }, error = function(e) {
            log_error(paste0("Username: ",full_name,", Object: submit_project, Location: Project Entry - Submitt Button - send Email, Error Message: ",e$message))
            error_message <- paste("An error occurred while trying to send an email with the information loaded. Please copy the following error message and send it to the Digital Enablement team:\n\n", e$message)
            shinyalert::shinyalert(
              title = "Error",
              text = error_message,
              type = "error"
            )
          })

          shinyjs::show("step1")
          shinyjs::hide("step2")
          shinyjs::hide("step3")
          shinyjs::hide("step4")
          shinyjs::hide("step5")

            updateTextInput(session, "project_name", value = "")
            updateTextInput(session, "description", value = "")
            updateDateInput(session, "start_date", value = format(Sys.Date(), "%Y-%m-%d"))
            updateDateInput(session, "est_completion_date", value = format(Sys.Date(), "%Y-%m-%d"))
            updatePickerInput(session, "requestor_for", selected = 0)
            updatePickerInput(session, "front_office_initiative", selected = "FALSE")
            updatePickerInput(session, "ultimate_output_system", selected = "Choose")
            updatePickerInput(session, "gwampriority", selected = 0)
            updatePickerInput(session, "initiative_type", selected = "Choose")
            updatePickerInput(session, "digital_challenge", selected = "FALSE")
            updatePickerInput(session, "scope_complexity", selected = "Choose")
            updatePickerInput(session, "type", selected = "Choose")
            updateTextInput(session, "notes", value = "")
            updateTextInput(session, "risk_review", value = "")
            updateTextInput(session, "compliance_review", value = "")
            updateTextInput(session, "model_review", value = "")
            updateTextInput(session, "client_team", value = "")
            updateTextInput(session, "tech_review", value = "")
            #updateTextInput(session, "est_person_days", value = "")
            updateSelectInput(session, "est_person_days", selected = 1)
            updateNumericInput(session, "est_fte_alloc", value = 0)
            updatePickerInput(session, "gen_ai_reporting", selected = "FALSE")
            updateTextInput(session, "confluence_link", value = "")
            updateCheckboxInput(session, "suggestion_box_only", value = FALSE)
            
          updatePickerInput(session, "select_project", selected = 0)
          project_summary_content(NULL)
          new_ts <- Sys.time()

          tryCatch({
            if(supervisor_flag > 0){
              dbExecute(con, save_log("Created Project","'New Project'",new_ts, user, "Project",projectid_ ))
            } else {
              dbExecute(con, save_log("Submitted Project","'New Project'",new_ts, user, "Project",projectid_temp ))
            }
            
          }, error = function(e) {
            log_error(paste0("Username: ",full_name,", Object: submit_project, Location: Project Entry - Submitt Button - save_log function, Error Message: ",e$message))
            error_message <- paste("The project was saved successfully, but an error occurred when saving the log. Please copy the error message below and send it to the Digital Enablement team:\n\n", e$message)
            shinyalert::shinyalert(
              title = "Error",
              text = error_message,
              type = "error"
            )
          })
          
        updatePickerInput(session, "projectparent", selected = "Choose")


        }, error = function(e) {
          log_error(paste0("Username: ",full_name,", Object: submit_project, Location: Project Entry - Submitt Button - Project + Human Map Table, Error Message: ",e$message))
          error_message <- paste("An error occurred while trying to insert a new project. Please copy the following error message and send it to the Digital Enablement team:\n\n", e$message)
          shinyalert::shinyalert(
            title = "Error",
            text = error_message,
            type = "error"
          )
        })
        
        
        
      

    
    dataproject_list <<- fetch_project_list(user)
    
    output$updateproject <- renderUI({
      render_update_project_ui()
    })
    
    renderProjectTable()
  })
  

  ########################################################################################
  ##                               Project Update Tab                                   ## 
  ########################################################################################  
  
  old_data <- reactiveVal(NULL)

  observeEvent(input$select_project, {
    
    project_id         <-  as.numeric(input$select_project)
    project_data       <<- dbGetQuery(con, get_project_data(project_id,con))
    current_project_id <-  project_data$project_id
    
    updateTextInput(session, "update_project_id", value = project_data$project_id)
    updateTextInput(session, "update_project_name", value = project_data$project_name)
    updateTextInput(session, "update_description", value = project_data$description)
    updatePickerInput(session, "update_status", selected = project_data$status)
    updateDateInput(session, "update_start_date", value = project_data$start_date)
    updateDateInput(session, "update_idea_date", value = project_data$idea_date)
    updateDateInput(session, "update_estimated_completion_date", value = project_data$estimated_completion_date)
    updateDateInput(session, "update_actual_completion_date", value = project_data$actual_completion_date)
    updatePickerInput(session, "update_requestor", selected = project_data$req_human_id)
    updatePickerInput(session, "update_implementer", selected = project_data$impl_human_id)
    updateTextInput(session, "completion_pct", value = project_data$completion_pct)
    updatePickerInput(session, "update_front_office_initiative", selected = ifelse(project_data$front_office_initiative, "TRUE", "FALSE"))
    updatePickerInput(session, "update_ultimate_output_system", selected = project_data$ultimate_output_system)
    updatePickerInput(session, "update_gwampriority", selected = project_data$gwam_priority_id)
    updatePickerInput(session, "update_initiative_type", selected = project_data$initiative_type)
    updatePickerInput(session, "update_digital_challenge", selected = ifelse(project_data$digital_challenge, "TRUE", "FALSE"))
    updatePickerInput(session, "update_scope_complexity", selected = project_data$scope_complexity)
    updatePickerInput(session, "update_type", selected = project_data$type)
    updateTextInput(session, "update_notes", value = project_data$notes)
    updateTextInput(session, "update_risk_review", value = project_data$risk_review)
    updateTextInput(session, "update_compliance_review", value = project_data$compliance_review)
    updateTextInput(session, "update_model_review", value = project_data$model_review)
    updateTextInput(session, "update_client_team", value = project_data$client_team)
    updateTextInput(session, "update_tech_review", value = project_data$tech_review)
    
    old_data(project_data[1, ])  # store the first row as a list
    shinyjs::hide("update_pj")
    shinyjs::hide("up_prevsummary")

  })

  get_previous_value <- function(field) {
    req(old_data())
    old_data()[[field]]
  }
  
  render_update_project_ui <- function() {
    
    tooltipInput <- function(inputFunc, inputId, label, tooltip, ...) {
      tags$div(
        `data-toggle`    = "tooltip",
        `data-placement` = "top",
        title            = tooltip,
        inputFunc(inputId, label, ...)
      )
    }
    
    fluidPage(
      fluidRow(
      
        pickerInput(
          inputId = "select_project",
          label   = "Select Project to Update",
          choices = dataproject_list,
          selected = "Choose",
          options = list('actions-box' = TRUE, 'live-search' = TRUE),
          multiple = FALSE
        ),
            tags$div(style = "display:none;",
                     textInput("update_project_id", "Project ID (*)", value = "")
            ),
        column(6,
        div(
          id = "up_step1",
          box(
            solidHeader = TRUE,
            class = "custom-box",
            width = 12,
            tooltipInput(textInput, "update_project_name", "Project Name (*)", 
                         "Enter the new project name", value = ""),
            tooltipInput(textInput, "update_description", "Description (*)", 
                         "Enter the project description", value = ""),
            pickerInput(
              inputId ="update_status",
              "Status (*)",
              choices = datapj_status,
              options = list('actions-box' = TRUE, 'live-search' = TRUE),
              multiple = FALSE,
              selected = "Choose"
            ),
            dateInput("update_start_date", "Start Date", value = Sys.Date()),
            dateInput("update_idea_date", "Idea Date", value = Sys.Date()),
            dateInput("update_estimated_completion_date", "Estimated Completion Date", value = Sys.Date()),
            dateInput("update_actual_completion_date", "Actual Completion Date", value = Sys.Date()),
            div(
              style = "text-align: center;",
              actionButton("up_next1", "Next", class = "custom-button")
            )
          )
        ),
      
        div(
          id = "up_step2",
          style = "display:none;",
          box(
            solidHeader = TRUE,
            class = "custom-box",
            width = 12,
            tooltipInput(
              pickerInput, "update_requestor", "Requestor (*)",
              "Select the requestor", 
              choices = datapj_employee, options = list('actions-box' = TRUE, 'live-search' = TRUE),
              multiple = FALSE, selected = "Choose"
            ),
            tooltipInput(
              pickerInput, "update_implementer", "Implementer (*)",
              "Select the implementer", 
              choices = datapj_employee, options = list('actions-box' = TRUE, 'live-search' = TRUE),
              multiple = FALSE, selected = "Choose"
            ),
            tooltipInput(
              numericInput, "completion_pct", "Completion % (*)",
              "Enter completion percentage as a decimal (e.g., 0.45)", 
              value = 0, min = 0, max = 1, step = 0.01
            ),
            tooltipInput(
              pickerInput, "update_front_office_initiative", "Front Office Initiative (*)",
              "Select if this is a front office initiative", 
              choices = include, options = list('actions-box' = TRUE, 'live-search' = TRUE),
              multiple = FALSE
            ),
            tooltipInput(
              pickerInput, "update_initiative_type", "Initiative Type (*)",
              "Select a new initiative type", 
              choices = datapj_initiative_type, options = list('actions-box' = TRUE, 'live-search' = TRUE),
              multiple = FALSE, selected = "Choose"
            ),
            tooltipInput(
              pickerInput, "update_gwampriority", "GWAM Priority (*)",
              "Select a new GWAM Priority", 
              choices = datapj_gwampriority, selected = "Choose",
              options = list('actions-box' = TRUE, 'live-search' = TRUE), multiple = FALSE
            ),
            tooltipInput(
              pickerInput, "updated_gen_ai_reporting", "Gen AI Reporting (*)",
              "Select an option for Gen AI Reporting", 
              choices = include, options = list('actions-box' = TRUE, 'live-search' = TRUE),
              multiple = FALSE
            ),
            div(
              style = "text-align: center;",
              actionButton("up_prev2", "Back", class = "custom-button"),
              actionButton("up_next2", "Next", class = "custom-button")
            )
          )
        ),
      
        # Step 3: Initiative & Details – project status, completion %, and front office flag
        div(
          id = "up_step3",
          style = "display:none;",
          box(
            solidHeader = TRUE,
            class = "custom-box",
            width = 12,
            tooltipInput(
              pickerInput, "update_scope_complexity", "Scope Complexity (*)",
              "Select a new scope complexity", 
              choices = datapj_priority, options = list('actions-box' = TRUE, 'live-search' = TRUE),
              multiple = FALSE, selected = "Choose"
            ),
            tooltipInput(
              pickerInput, "update_type", "Type (*)",
              "Select a new project type", 
              choices = datapj_type, options = list('actions-box' = TRUE, 'live-search' = TRUE),
              multiple = FALSE, selected = "Choose"
            ),            
            tooltipInput(
              pickerInput, "update_ultimate_output_system", "Ultimate Output System (optional)",
              "Select an output system if applicable", 
              choices = datapj_output_type, options = list('actions-box' = TRUE, 'live-search' = TRUE),
              multiple = FALSE, selected = "Choose"
            ),
            tooltipInput(
              pickerInput, "update_digital_challenge", "Digital Challenge (optional)",
              "Select an option for digital challenge", 
              choices = include, options = list('actions-box' = TRUE, 'live-search' = TRUE),
              multiple = FALSE
            ),

            textInput("update_risk_review", "Risk Review (optional)", value = ""),
            textInput("update_compliance_review", "Compliance Review (optional)", value = ""),
            textInput("update_model_review", "Model Review (optional)", value = ""),
            div(
              style = "text-align: center;",
              actionButton("up_prev3", "Back", class = "custom-button"),
              actionButton("up_next3", "Next", class = "custom-button")
            )
          )
        ),
      
        # Step 4: Optional Details – additional optional fields (risk review, compliance, etc.)
        div(
          id = "up_step4",
          style = "display:none;",
          box(
            solidHeader = TRUE,
            class = "custom-box",
            width = 12,
            textInput("update_client_team", "Client Team (optional)", value = ""),
            textInput("update_tech_review", "Tech Review (optional)", value = ""),
            selectInput(
              inputId = "update_est_person_days",
              label = "Estimated Person Days (optional)",
              choices = 0:500,
              selected = 0
            ),
            tooltipInput(
              numericInput, "update_est_fte_alloc", "Est. Fte. Allocation % (optional)",
              "Enter the allocation percentage as a decimal (e.g. 0.25)", 
              value = 0, min = 0, max = 1, step = 0.01
            ),
            textInput("update_generic_priority_bucket", "Generic Priority Bucket (optional)", value = ""),
            textInput("update_effort_bucket", "Effort Bucket (optional)", value = ""),
            textInput("update_confluence_link", "Confluence Link (optional)", value = ""),
            textInput("update_description_extended", "Extended Description (optional)", value = ""),

            div(
              style = "text-align: center;",
              actionButton("up_prev4", "Back", class = "custom-button"),
              actionButton("summary", "Review Data", icon = icon("edit"), class = "custom-button")
            )
          )
        ),
        div(
          id = "up_summary1",
          style = "display:none;",
          box(
            solidHeader = TRUE,
            class = "custom-box",
            width = 12,
            #htmlOutput("update_project_summary")
            h4(style = "text-align: center; font-weight: bold;", "Review & Update Summary"),
            uiOutput("upd_project_summary1")
          )
        )
        ),

        column(6,
               div(
                 id = "up_preview",
                 box(
                   #title = "Review & Update",
                   solidHeader = TRUE,
                   class = "custom-box",
                   width = 12,
                   #htmlOutput("update_project_summary")
                   h4(style = "text-align: center; font-weight: bold;", "Review & Update Summary"),
                   uiOutput("update_project_summary")
                 )
               ),
               div(
                 id = "up_summary2",
                 style = "display:none;",
                 box(
                   #title = "Review & Update",
                   solidHeader = TRUE,
                   class = "custom-box",
                   width = 12,
                   #htmlOutput("update_project_summary")
                   h4(style = "text-align: center; font-weight: bold;", "Review & Update Summary"),
                   uiOutput("upd_project_summary2")
                 )
               )

        ),
        div(
          style = "text-align: center;",
          actionButton("up_prevsummary", "Back", class = "custom-button"),
          actionButton("update_pj", "Update Data", icon = icon("edit"), class = "custom-button")
        ),

        # Ensure tooltips are initialized
        tags$script(HTML("$(document).ready(function(){
                          $('[data-toggle=\"tooltip\"]').tooltip();
                        });"))
      
        
    ))
  }
  
  is_empty <<- function(x) {
    if (is.null(x)) return(TRUE)
    if (length(x) == 0) return(TRUE)
    if (is.atomic(x) && is.character(x)) {
      return(all(trimws(x) == ""))
    }
    if (is.atomic(x) && any(is.na(x))) return(TRUE)
    return(FALSE)
  }
  
  observeEvent(input$up_next1, {
    
    if (is.null(input$select_project) || input$select_project == "Choose" || input$select_project == 0) {
      shinyalert::shinyalert(
        title = "Alert",
        text  = "Please select a project to update before proceeding.",
        type  = "error"
      )
      return()
    }
    
    if(is_empty(input$update_project_name) || is_empty(input$update_description) || input$update_status == "Choose") {
      shinyalert::shinyalert(
        title = "Alert",
        text  = "Please fill in all required fields before proceeding.",
        type  = "error"
      )
      return()
    }
    
    if (input$update_status == "Completed" && is_empty(input$update_actual_completion_date)) {
      shinyalert::shinyalert(
        title = "Alert",
        text  = "Please set the actual completion date before proceeding.",
        type  = "error"
      )
      return()
    }

    shinyjs::hide("up_step1")
    shinyjs::show("up_step2")
    shinyjs::hide("up_summary1")
    shinyjs::hide("up_summary2")    
    shinyjs::hide("update_pj")
    shinyjs::hide("up_prevsummary")
    shinyjs::hide("select_project")


    output$update_project_summary <- renderUI({
      new_values <- list(
        "Project Id"                = get_previous_value("project_id"),
        "Project Name"              = input$update_project_name,
        "Description"               = input$update_description,
        "Status"                    = input$update_status,
        "Start Date"                = format(as.Date(input$update_start_date), "%Y-%m-%d"),
        "Idea Date"                 = format(as.Date(input$update_idea_date), "%Y-%m-%d"),
        "Estimated Completion Date" = format(as.Date(input$update_estimated_completion_date), "%Y-%m-%d"),
        "Actual Completion Date"    = format(as.Date(input$update_actual_completion_date), "%Y-%m-%d")
      )
      
      old_values <- list(
        project_id                = get_previous_value("project_id"),
        project_name              = get_previous_value("project_name"),
        description               = get_previous_value("description"),
        status                    = get_previous_value("status"),
        start_date                = get_previous_value("start_date"),
        idea_date                 = get_previous_value("idea_date"),
        estimated_completion_date = get_previous_value("estimated_completion_date"),
        actual_completion_date    = get_previous_value("actual_completion_date")
      )
      
      table_rows <- lapply(names(new_values), function(field) {
        key <- tolower(gsub(" ", "_", field))
        old_val <- old_values[[key]]
        if(key %in% c("start_date", "idea_date", "estimated_completion_date", "actual_completion_date")){
          old_val <- if(!is_empty(old_val)) as.character(as.Date(old_val, origin = "1970-01-01")) else ""
        } else {
          old_val <- ifelse(is_empty(old_val), "", old_val)
        }
        
        tags$tr(
          tags$td(tags$b(field)),
          tags$td(old_val),
          tags$td(new_values[[field]])
        )
      })
      
      tags$table(
        class = "table table-striped",
        tags$thead(
          tags$tr(
            tags$th("Field"),
            tags$th("Old Value"),
            tags$th("New Value")
          )
        ),
        tags$tbody(
          table_rows
        )
      )
    })
  })
  
  observeEvent(input$up_prev2, {
    shinyjs::hide("up_step2")
    shinyjs::show("up_step1")
    shinyjs::hide("update_pj")
    shinyjs::hide("up_prevsummary")
    shinyjs::hide("up_summary2")
    shinyjs::show("select_project")
  })
  
  observeEvent(input$up_next2, {
    
    
    if(input$completion_pct == 1 && !input$update_status %in% c("Completed", "BAU", "Production")) {
      shinyalert::shinyalert(
        title = "Alert",
        text  = "The completion percentage cannot be 100% if the project status is not 'Completed', 'BAU', or 'Production'. Please adjust the completion percentage or status.",
        type  = "error"
      )
      return()
    }
    
    if(input$update_status %in% c("Completed", "BAU", "Production") && input$completion_pct != 1) {
      shinyalert::shinyalert(
        title = "Alert",
        text  = "The project status is 'Completed', 'BAU', or 'Production', but the completion percentage is not 100%. Please adjust the completion percentage or status.",
        type  = "error"
      )
      return()
    }
    
    if(input$completion_pct == 1 && is_empty(input$update_actual_completion_date)) {
      shinyalert::shinyalert(
        title = "Alert",
        text  = "The completion percentage is 100%, but the actual completion date is not set. Please adjust the completion percentage or actual completion date.",
        type  = "error"
      )
      return()
    }
    
    if( !is_empty(input$update_actual_completion_date) && input$completion_pct != 1 ) {
      shinyalert::shinyalert(
        title = "Alert",
        text  = "The completion percentage is not 100%, but the actual completion date is set. Please adjust the completion percentage or actual completion date.",
        type  = "error"
      )
      return()
    }
    
    shinyjs::hide("up_step2")
    shinyjs::show("up_step3")
    shinyjs::hide("update_pj")
    shinyjs::hide("up_prevsummary")
    shinyjs::hide("up_summary2")
    output$update_project_summary <- renderUI({
      
      new_gwam_prior_id <- executeQuery(con, get_gwam_priority(input$update_gwampriority, con))
      old_gwam_prior_id <- executeQuery(con, get_gwam_priority(get_previous_value("gwam_priority_id"),con))
      
      new_values <- list(
        "Project_id"                = get_previous_value("project_id"),
        "Project Name"              = input$update_project_name,
        "Description"               = input$update_description,
        "Status"                    = input$update_status,
        "Start Date"                = input$update_start_date,
        "Idea Date"                 = input$update_idea_date,
        "Estimated Completion Date" = input$update_estimated_completion_date,
        "Actual Completion Date"    = input$update_actual_completion_date,
        "Requestor"                 = dbGetQuery(con, get_full_name(input$update_requestor,con)),
        "Implementer"               = dbGetQuery(con, get_full_name(input$update_implementer,con)),
        "Completion Pct"            = input$completion_pct,
        "Front Office Initiative"   = input$update_front_office_initiative,
        "Initiative Type"           = input$update_initiative_type,
        "GWAM Priority Id"          = new_gwam_prior_id,
        "Gen AI Reporting"          = input$updated_gen_ai_reporting
      )
      

      old_values <- list(
        project_id                = get_previous_value("project_id"),
        project_name              = get_previous_value("project_name"),
        description               = get_previous_value("description"),
        status                    = get_previous_value("status"),
        start_date                = get_previous_value("start_date"),
        idea_date                 = get_previous_value("idea_date"),
        estimated_completion_date = get_previous_value("estimated_completion_date"),
        actual_completion_date    = get_previous_value("actual_completion_date"),
        requestor                 = dbGetQuery(con, get_full_name(get_previous_value("req_human_id"),con)),
        implementer               = dbGetQuery(con, get_full_name(get_previous_value("impl_human_id"),con)),
        completion_pct            = get_previous_value("completion_pct"),
        front_office_initiative   = get_previous_value("front_office_initiative"),
        initiative_type           = get_previous_value("initiative_type"),
        gwam_priority_id          = old_gwam_prior_id,
        gen_ai_reporting          = get_previous_value("gen_ai_reporting")
      )
      
      table_rows <- lapply(names(new_values), function(field) {

        key     <- tolower(gsub(" ", "_", field))
        old_val <- old_values[[key]]
        
        if(key %in% c("start_date", "idea_date", "estimated_completion_date", "actual_completion_date")){
          old_val <- if(!is_empty(old_val)) as.character(as.Date(old_val, origin = "1970-01-01")) else ""
        } else {
          old_val <- ifelse(is_empty(old_val), "", old_val)
        }
        
        tags$tr(
          tags$td(tags$b(field)),
          tags$td(old_val),
          tags$td(new_values[[field]])
        )
      })
      
      tags$table(
        class = "table table-striped",
        tags$thead(
          tags$tr(
            tags$th("Field"),
            tags$th("Old Value"),
            tags$th("New Value")
          )
        ),
        tags$tbody(
          table_rows
        )
      )
    })
  })
  
  observeEvent(input$up_prev3, {
    shinyjs::hide("up_step3")
    shinyjs::show("up_step2")
    shinyjs::hide("update_pj")
    shinyjs::hide("up_prevsummary")
    shinyjs::hide("up_summary2")
  })
  
  observeEvent(input$up_next3, {
    shinyjs::hide("up_step3")
    shinyjs::show("up_step4")
    shinyjs::hide("update_pj")
    shinyjs::show("summary")
    shinyjs::hide("up_prevsummary")
    shinyjs::hide("up_summary2")
    
    output$update_project_summary <- renderUI({
      
      new_gwam_prior_id <- executeQuery(con, get_gwam_priority(input$update_gwampriority,con))
      old_gwam_prior_id <- executeQuery(con, get_gwam_priority(get_previous_value("gwam_priority_id"),con))
      
      new_values <- list(
        "Project Id"                = get_previous_value("project_id"),
        "Project Name"              = input$update_project_name,
        "Description"               = input$update_description,
        "Status"                    = input$update_status,
        "Start Date"                = input$update_start_date,
        "Idea Date"                 = input$update_idea_date,
        "Estimated Completion Date" = input$update_estimated_completion_date,
        "Actual Completion Date"    = input$update_actual_completion_date,
        "Requestor"                 = dbGetQuery(con, get_full_name(input$update_requestor,con)),
        "Implementer"               = dbGetQuery(con, get_full_name(input$update_implementer,con)),
        "Completion Pct"            = input$completion_pct,
        "Front Office Initiative"   = input$update_front_office_initiative,
        "Initiative Type"           = input$update_initiative_type,
        "GWAM Priority Id"          = new_gwam_prior_id,
        "Gen AI Reporting"          = input$updated_gen_ai_reporting,
        "Scope Complexity"          = input$update_scope_complexity,
        "Type"                      = input$update_type,
        "Ultimate Output System"    = input$update_ultimate_output_system,
        "Digital Challenge"         = input$update_digital_challenge,
        "Risk Review"               = input$update_risk_review,
        "Compliance Review"         = input$update_compliance_review,
        "Model Review"              = input$update_model_review
      )
      

      old_values <- list(
        project_id                = get_previous_value("project_id"),
        project_name              = get_previous_value("project_name"),
        description               = get_previous_value("description"),
        status                    = get_previous_value("status"),
        start_date                = get_previous_value("start_date"),
        idea_date                 = get_previous_value("idea_date"),
        estimated_completion_date = get_previous_value("estimated_completion_date"),
        actual_completion_date    = get_previous_value("actual_completion_date"),
        requestor                 = dbGetQuery(con, get_full_name(get_previous_value("req_human_id"),con)),
        implementer               = dbGetQuery(con, get_full_name(get_previous_value("impl_human_id"),con)),
        completion_pct            = get_previous_value("completion_pct"),
        front_office_initiative   = get_previous_value("front_office_initiative"),
        initiative_type           = get_previous_value("initiative_type"),
        gwam_priority_id          = old_gwam_prior_id,
        gen_ai_reporting          = get_previous_value("gen_ai_reporting"),
        scope_complexity          = get_previous_value("scope_complexity"),
        type                      = get_previous_value("type"),
        ultimate_output_system    = get_previous_value("ultimate_output_system"),
        digital_challenge         = get_previous_value("digital_challenge"),
        risk_review               = get_previous_value("risk_review"),
        compliance_review         = get_previous_value("compliance_review"),
        model_review              = get_previous_value("model_review")
      )
      
      table_rows <- lapply(names(new_values), function(field) {
        key <- tolower(gsub(" ", "_", field))
        # If the field is start_date (or any other date field), convert it.
        old_val <- old_values[[key]]
        if(key %in% c("start_date", "idea_date", "estimated_completion_date", "actual_completion_date")){
          old_val <- if(!is_empty(old_val)) as.character(as.Date(old_val, origin = "1970-01-01")) else ""
        } else {
          old_val <- ifelse(is_empty(old_val), "", old_val)
        }
        
        tags$tr(
          tags$td(tags$b(field)),
          tags$td(old_val),
          tags$td(new_values[[field]])
        )
      })
      
      tags$table(
        class = "table table-striped",
        tags$thead(
          tags$tr(
            tags$th("Field"),
            tags$th("Old Value"),
            tags$th("New Value")
          )
        ),
        tags$tbody(
          table_rows
        )
      )
    })
  })
  
  observeEvent(input$up_prev4, {
    shinyjs::hide("up_step4")
    shinyjs::show("up_step3")
    shinyjs::hide("update_pj")
    shinyjs::hide("up_prevsummary")
    shinyjs::hide("up_summary2")
  })
  
  observeEvent(input$up_next4, {
    shinyjs::hide("up_step4")
    shinyjs::show("summary")
    shinyjs::hide("update_pj")
    shinyjs::hide("up_prevsummary")
    shinyjs::hide("up_summary2")
    
    output$update_project_summary <- renderUI({
      
      new_gwam_prior_id <- executeQuery(con, get_gwam_priority(input$update_gwampriority,con))
      old_gwam_prior_id <- executeQuery(con, get_gwam_priority(get_previous_value("gwam_priority_id"),con))
      
      new_values <- list(
        "Project Id"                = get_previous_value("project_id"),
        "Project Name"              = input$update_project_name,
        "Description"               = input$update_description,
        "Status"                    = input$update_status,
        "Start Date"                = input$update_start_date,
        "Idea Date"                 = input$update_idea_date,
        "Estimated Completion Date" = input$update_estimated_completion_date,
        "Actual Completion Date"    = input$update_actual_completion_date,
        "Requestor"                 = dbGetQuery(con, get_full_name(input$update_requestor,con)),
        "Implementer"               = dbGetQuery(con, get_full_name(input$update_implementer,con)),
        "Completion Pct"            = input$completion_pct,
        "Front Office Initiative"   = input$update_front_office_initiative,
        "Initiative Type"           = input$update_initiative_type,
        "GWAM Priority Id"          = new_gwam_prior_id,
        "Gen AI Reporting"          = input$updated_gen_ai_reporting,
        "Scope Complexity"          = input$update_scope_complexity,
        "Type"                      = input$update_type,
        "Ultimate Output System"    = input$update_ultimate_output_system,
        "Digital Challenge"         = input$update_digital_challenge,
        "Risk Review"               = input$update_risk_review,
        "Compliance Review"         = input$update_compliance_review,
        "Model Review"              = input$update_model_review,
        "Client Team"               = input$update_client_team,
        "Tech Review"               = input$update_tech_review,
        "Estimated Person Days"     = input$update_est_person_days,
        "Est. Fte. Allocation %"    = input$update_est_fte_alloc,
        "Gen AI Reporting"          = input$updated_gen_ai_reporting,
        "Generic Priority Bucket"   = input$update_generic_priority_bucket,
        "Effort Bucket"             = input$update_effort_bucket,
        "Confluence Link"           = input$update_confluence_link,
        "Extended Description"      = input$update_description_extended
      )
      
      old_values <- list(
        project_id                = get_previous_value("project_id"),
        project_name              = get_previous_value("project_name"),
        description               = get_previous_value("description"),
        status                    = get_previous_value("status"),
        start_date                = get_previous_value("start_date"),
        idea_date                 = get_previous_value("idea_date"),
        estimated_completion_date = get_previous_value("estimated_completion_date"),
        actual_completion_date    = get_previous_value("actual_completion_date"),
        requestor                 = dbGetQuery(con, get_full_name(get_previous_value("req_human_id"),con)),
        implementer               = dbGetQuery(con, get_full_name(get_previous_value("impl_human_id"),con)),
        completion_pct            = get_previous_value("completion_pct"),
        front_office_initiative   = get_previous_value("front_office_initiative"),
        initiative_type           = get_previous_value("initiative_type"),
        ultimate_output_system    = get_previous_value("ultimate_output_system"),
        gwam_priority_id          = old_gwam_prior_id,
        digital_challenge         = get_previous_value("digital_challenge"),
        scope_complexity          = get_previous_value("scope_complexity"),
        type                      = get_previous_value("type"),
        risk_review               = get_previous_value("risk_review"),
        compliance_review         = get_previous_value("compliance_review"),
        model_review              = get_previous_value("model_review"),
        client_team               = get_previous_value("client_team"),
        tech_review               = get_previous_value("tech_review"),
        est_person_days           = get_previous_value("est_person_days"),
        est_fte_alloc             = get_previous_value("est_fte_alloc"),
        gen_ai_reporting          = get_previous_value("gen_ai_reporting"),
        generic_priority_bucket   = get_previous_value("generic_priority_bucket"),
        effort_bucket             = get_previous_value("effort_bucket"),
        confluence_link           = get_previous_value("confluence_link"),
        description_extended      = get_previous_value("description_extended")
      )
      
      table_rows <- lapply(names(new_values), function(field) {
        key <- tolower(gsub(" ", "_", field))
        # If the field is start_date (or any other date field), convert it.
        old_val <- old_values[[key]]
        if(key %in% c("start_date", "idea_date", "estimated_completion_date", "actual_completion_date")){
          old_val <- if(!is_empty(old_val)) as.character(as.Date(old_val, origin = "1970-01-01")) else ""
        } else {
          old_val <- ifelse(is_empty(old_val), "", old_val)
        }
        
        tags$tr(
          tags$td(tags$b(field)),
          tags$td(old_val),
          tags$td(new_values[[field]])
        )
      })
      
      tags$table(
        class = "table table-striped",
        tags$thead(
          tags$tr(
            tags$th("Field"),
            tags$th("Old Value"),
            tags$th("New Value")
          )
        ),
        tags$tbody(
          table_rows
        )
      )
    })
  })
  
  observeEvent(input$up_prevsummary, {
    shinyjs::show("up_step4")
    shinyjs::show("summary")
    shinyjs::hide("update_pj")
    shinyjs::hide("up_prevsummary")
    shinyjs::hide("up_summary1")
    shinyjs::hide("up_summary2")
    shinyjs::show("up_preview")
  })  
  
  
  observeEvent(input$summary, {
    shinyjs::hide("up_step4")
    shinyjs::hide("summary")
    shinyjs::show("update_pj")
    shinyjs::show("up_prevsummary")
    shinyjs::show("up_summary1")
    shinyjs::show("up_summary2")
    shinyjs::hide("up_preview")
    
    output$upd_project_summary1 <- renderUI({
      
      new_gwam_prior_id <- executeQuery(con, get_gwam_priority(input$update_gwampriority,con))
      old_gwam_prior_id <- executeQuery(con, get_gwam_priority(get_previous_value("gwam_priority_id"),con))
      
      new_values <- list(
        "Project Id"                = get_previous_value("project_id"),
        "Project Name"              = input$update_project_name,
        "Description"               = input$update_description,
        "Status"                    = input$update_status,
        "Start Date"                = input$update_start_date,
        "Idea Date"                 = input$update_idea_date,
        "Estimated Completion Date" = input$update_estimated_completion_date,
        "Actual Completion Date"    = input$update_actual_completion_date,
        "Requestor"                 = dbGetQuery(con, get_full_name(input$update_requestor,con)),
        "Implementer"               = dbGetQuery(con, get_full_name(input$update_implementer,con)),
        "Completion Pct"            = input$completion_pct,
        "Front Office Initiative"   = input$update_front_office_initiative,
        "Initiative Type"           = input$update_initiative_type,
        "GWAM Priority Id"          = new_gwam_prior_id,
        "Gen AI Reporting"          = input$updated_gen_ai_reporting,
        "Scope Complexity"          = input$update_scope_complexity
      )
      
      old_values <- list(
        project_id                = get_previous_value("project_id"),
        project_name              = get_previous_value("project_name"),
        description               = get_previous_value("description"),
        status                    = get_previous_value("status"),
        start_date                = get_previous_value("start_date"),
        idea_date                 = get_previous_value("idea_date"),
        estimated_completion_date = get_previous_value("estimated_completion_date"),
        actual_completion_date    = get_previous_value("actual_completion_date"),
        requestor                 = dbGetQuery(con, get_full_name(get_previous_value("req_human_id"),con)),
        implementer               = dbGetQuery(con, get_full_name(get_previous_value("impl_human_id"),con)),
        completion_pct            = get_previous_value("completion_pct"),
        front_office_initiative   = get_previous_value("front_office_initiative"),
        initiative_type           = get_previous_value("initiative_type"),
        ultimate_output_system    = get_previous_value("ultimate_output_system"),
        gwam_priority_id          = old_gwam_prior_id,
        digital_challenge         = get_previous_value("digital_challenge"),
        scope_complexity          = get_previous_value("scope_complexity")
      )
      

      table_rows <- lapply(names(new_values), function(field) {
        key <- tolower(gsub(" ", "_", field))
        # If the field is start_date (or any other date field), convert it.
        old_val <- old_values[[key]]
        if(key %in% c("start_date", "idea_date", "estimated_completion_date", "actual_completion_date")){
          old_val <- if(!is_empty(old_val)) as.character(as.Date(old_val, origin = "1970-01-01")) else ""
        } else {
          old_val <- ifelse(is_empty(old_val), "", old_val)
        }
        
        tags$tr(
          tags$td(tags$b(field)),
          tags$td(old_val),
          tags$td(new_values[[field]])
        )
      })
      
      tags$table(
        class = "table table-striped",
        tags$thead(
          tags$tr(
            tags$th("Field"),
            tags$th("Old Value"),
            tags$th("New Value")
          )
        ),
        tags$tbody(
          table_rows
        )
      )
    })
    
    output$upd_project_summary2 <- renderUI({
      
      new_gwam_prior_id <- executeQuery(con, get_gwam_priority(input$update_gwampriority,con))
      old_gwam_prior_id <- executeQuery(con, get_gwam_priority(get_previous_value("gwam_priority_id"),con))
      
      new_values <- list(
        "Type"                      = input$update_type,
        "Ultimate Output System"    = input$update_ultimate_output_system,
        "Digital Challenge"         = input$update_digital_challenge,
        "Risk Review"               = input$update_risk_review,
        "Compliance Review"         = input$update_compliance_review,
        "Model Review"              = input$update_model_review,
        "Client Team"               = input$update_client_team,
        "Tech Review"               = input$update_tech_review,
        "Estimated Person Days"     = input$update_est_person_days,
        "Est. Fte. Allocation %"    = input$update_est_fte_alloc,
        "Gen AI Reporting"          = input$updated_gen_ai_reporting,
        "Generic Priority Bucket"   = input$update_generic_priority_bucket,
        "Effort Bucket"             = input$update_effort_bucket,
        "Confluence Link"           = input$update_confluence_link,
        "Extended Description"      = input$update_description_extended
      )
      
      old_values <- list(
        type                      = get_previous_value("type"),
        risk_review               = get_previous_value("risk_review"),
        compliance_review         = get_previous_value("compliance_review"),
        model_review              = get_previous_value("model_review"),
        client_team               = get_previous_value("client_team"),
        tech_review               = get_previous_value("tech_review"),
        est_person_days           = get_previous_value("est_person_days"),
        est_fte_alloc             = get_previous_value("est_fte_alloc"),
        gen_ai_reporting          = get_previous_value("gen_ai_reporting"),
        generic_priority_bucket   = get_previous_value("generic_priority_bucket"),
        effort_bucket             = get_previous_value("effort_bucket"),
        confluence_link           = get_previous_value("confluence_link"),
        description_extended      = get_previous_value("description_extended")
      )
      
      table_rows <- lapply(names(new_values), function(field) {
        key <- tolower(gsub(" ", "_", field))
        # If the field is start_date (or any other date field), convert it.
        old_val <- old_values[[key]]
        if(key %in% c("start_date", "idea_date", "estimated_completion_date", "actual_completion_date")){
          old_val <- if(!is_empty(old_val)) as.character(as.Date(old_val, origin = "1970-01-01")) else ""
        } else {
          old_val <- ifelse(is_empty(old_val), "", old_val)
        }
        
        tags$tr(
          tags$td(tags$b(field)),
          tags$td(old_val),
          tags$td(new_values[[field]])
        )
      })
      
      tags$table(
        class = "table table-striped",
        tags$thead(
          tags$tr(
            tags$th("Field"),
            tags$th("Old Value"),
            tags$th("New Value")
          )
        ),
        tags$tbody(
          table_rows
        )
      )
    })
  })
  
  # Render the UI for project management update
  output$updateproject <- renderUI({
    dataproject_list <<- fetch_project_list(user)
    render_update_project_ui()
  })
  
  #####################################
  ##   Project Update - Functions    ##
  #####################################
  
  # Function to log project changes
  log_project_changes <- function(project_id, user, field, old_value, new_value, notes) {
    
    if (identical(old_value, new_value)) {
      return()
    }

    # to_db_value <- function(val) {
    #   if (is.null(val) || is.na(val) || val == "") {
    #     print("log_project_changes step 2")
    #     return(NA)
    #   }
    #   val
    # }
    # print("log_project_changes step 3")
    # params <- list(
    #   as.integer(project_id),
    #   user,
    #   field,
    #   to_db_value(old_value),
    #   to_db_value(new_value),
    #   to_db_value(notes),
    #   as.character(Sys.time())
    # )



    log_query <- paste0("INSERT INTO projects.project_log (project_id,username,field,old_value,new_value,timestamp,notes) values (",project_id,",'", user,"','", field,"','", old_value,"','", new_value,"','", as.character(Sys.time()),"',", notes,")") 

    tryCatch({
      log_notes_debug(paste0("Username: ",full_name,", Query: ",log_query))
      dbExecute(con, log_query)
    }, error = function(e) {
      log_error(paste0("Username: ",full_name,", Object: log_project_changes, Location: Log Project Changes Function, Error Message: ",e$message))
      error_message <- paste("An error occurred while trying to log the project changes. Please copy the following error message and send it to the Digital Enablement team:\n\n", e$message)
       shinyalert::shinyalert(
         title = "Error",
         text = error_message,
         type = "error"
       )
    })
  }
  
  log_project_notes <- function(project_id, user, notes) {
    timestamp <- Sys.time()
    
    notes <- DBI::dbQuoteString(con, notes)  # Properly escape the notes text
    
    log_query <- paste0("INSERT INTO projects.project_log (project_id, username, field, notes, timestamp) VALUES (",
                        project_id, ", '", user, "', 'Notes_only', ", notes, ", '", timestamp, "')")
    
    tryCatch({
      dbExecute(con, log_query)
      shinyalert::shinyalert(
        title = "Success!",
        text = "You have added a note for this project",
        type = "success"
      )
    }, error = function(e) {
      log_error(paste0("Username: ",full_name,", Object: log_project_notes, Location: Log Project Notes Function, Error Message: ",e$message))
      error_message <- paste("An error occurred while trying to log the project changes. Please copy the following error message and send it to the Digital Enablement team:\n\n", e$message)
      # shinyalert::shinyalert(
      #   title = "Error",
      #   text = error_message,
      #   type = "error"
      # )
    })
  }
  
  # Function to compare old and new values and generate a log message
  generate_and_log_changes <- function(old_data, new_data, project_id, user, notes) {
    
    is_empty <<- function(x) {
      if (is.null(x)) return(TRUE)
      if (length(x) == 0) return(TRUE)
      if (is.atomic(x) && is.character(x)) {
        return(all(trimws(x) == ""))
      }
      if (is.atomic(x) && any(is.na(x))) return(TRUE)
      return(FALSE)
    }
    

    if(is.na(notes) || is.null(notes)|| is_empty(notes)||  notes == ""){
      notes <- "NULL"
    }else{
      notes <- paste0("'",escape_single_quotes(notes),"'")
    }
    
   
    old_data_list <- as.list(old_data[1, ])
    
    for (field in names(new_data)) {
      old_value <- old_data_list[[field]]
      new_value <- new_data[[field]]

      # If the value is missing (length zero) assign NA
      if (length(is_empty(old_value)) == 0) { old_value <- NA }
      if (length(is_empty(new_value)) == 0) { new_value <- NA }
      
      if (inherits(old_value, "Date") ||inherits(new_value, "Date")) { 
        old_value <- as.character(old_value) 
        new_value <- as.character(new_value) 
      }
      
      cmp <- old_value == new_value

      if (!isTRUE(cmp)) {
        if(is.na(old_value) || is.null(old_value) || is_empty(old_value)){
          old_value <- "NULL"
        }
        
        if(is.na(new_value) || is.null(new_value) || is_empty(new_value)){
          new_value <- "NULL"
        }
        log_project_changes(project_id, user, field, old_value, new_value, notes)
      }
    }
  }
  
  observeEvent(input$show_alert, {
    shinyalert(
      "Add Note to Change", type = "input",
      callbackR = function(x) {
        if (x != FALSE) {
          shinyalert(paste("Your note has been added:", x), type = "success")
          new_notes <<- list(note = x)
        }else {
          new_notes <<- NA
        }
      }
    )
  })
  
  #####################################
  ##     Project Update - Update     ##
  ##################################### 

  Outputupdateproject <- observeEvent(input$update_pj, {
    
    log_message <- ""
    
    project_id <<- input$update_project_id
    if (is.null(project_id) || project_id == "") {
      show_alert("Project ID is required for updating.")
      return()
    }
    
    is_empty <<- function(x) {
      if (is.null(x)) return(TRUE)
      if (length(x) == 0) return(TRUE)
      if (is.atomic(x) && is.character(x)) {
        return(all(trimws(x) == ""))
      }
      if (is.atomic(x) && any(is.na(x))) return(TRUE)
      return(FALSE)
    }
    
    # Calculate the number of days between start_date and est_completion_date
    diff_days <- as.numeric(as.Date(input$update_estimated_completion_date) - as.Date(input$update_start_date))

    #Exclude the default "Choose" row and find the matching project_size
    valid_proj <- datapj_project_size_val[datapj_project_size_val$project_size != "Choose", ]
    index <- which(valid_proj$min_days <= diff_days & valid_proj$max_days >= diff_days)
    if (length(index) > 0) {
      selected_p_size <- valid_proj$project_size[index]
    } else {
      selected_p_size <- NA
    }
    
    selected_project_size <- selected_p_size
    
    upd_project_id   <- input$update_project_id
    upd_project_name <- if(is_empty(input$update_project_name) == TRUE) {
                          shinyalert::shinyalert(
                            title = "Error!",
                            text = "Project Name is required.",
                            type = "error"
                          )
                          return()
                        }else {
                            paste0("'",escape_single_quotes(input$update_project_name),"',")
                        }
    upd_project_desc <- if(is_empty(input$update_description) == TRUE) {"NULL,"}else {paste0("'",escape_single_quotes(input$update_description),"',")}
    upd_status       <- if(is_empty(input$update_status) == TRUE) {"NULL,"}else {paste0("'",input$update_status,"',")}
    upd_start_date   <- if(is_empty(input$update_start_date) == TRUE) {"NULL,"}else {paste0("'",input$update_start_date,"',")}
    upd_est_comp_dte <- if(is_empty(input$update_estimated_completion_date) == TRUE) {"NULL,"}else {paste0("'",input$update_estimated_completion_date,"',")}
    upd_act_comp_dte <- if(is_empty(input$update_actual_completion_date) == TRUE) {"NULL,"}else {paste0("'",input$update_actual_completion_date,"',")}
    upd_compl_pct    <- paste0(input$completion_pct,",")
    upd_project_size <- paste0("'",selected_project_size,"',")
    upd_f_off_init   <- paste0(input$update_front_office_initiative,",")
    upd_ul_out_sys   <- paste0("'",input$update_ultimate_output_system,"',")
    upd_gwampriority <- paste0(input$update_gwampriority,",")
    upd_prog_id      <- paste0("NULL,")
    upd_init_type    <- paste0("'",input$update_initiative_type,"',")
    upd_dig_chall    <- paste0(input$update_digital_challenge,",")
    upd_scope_comp   <- paste0("'",input$update_scope_complexity,"',")
    upd_type         <- paste0("'",input$update_type,"',")
    upd_risk_review  <- if(is_empty(input$update_risk_review) == TRUE) {"NULL,"}else {paste0("'",escape_single_quotes(input$update_risk_review),"',")}
    upd_compl_review <- if(is_empty(input$update_compliance_review) == TRUE) {"NULL,"}else {paste0("'",escape_single_quotes(input$update_compliance_review),"',")}
    upd_model_review <- if(is_empty(input$update_model_review) == TRUE) {"NULL,"}else {paste0("'",escape_single_quotes(input$update_model_review),"',")}
    upd_client_team  <- if(is_empty(input$update_client_team) == TRUE) {"NULL,"}else {paste0("'",escape_single_quotes(input$update_client_team),"',")}
    upd_tech_review  <- if(is_empty(input$update_tech_review) == TRUE) {"NULL,"}else {paste0("'",escape_single_quotes(input$update_tech_review),"',")}
    upd_idea_date    <- if(is_empty(input$update_idea_date) == TRUE) {"NULL,"}else {paste0("'",input$update_idea_date,"',")}
    upd_est_per_days <- paste0(input$update_est_person_days,",")
    upd_est_fte_alloc<- paste0(input$update_est_fte_alloc,",")
    upd_gen_ai_repo  <- paste0(input$updated_gen_ai_reporting,",")
    upd_gen_prio_bkt <- if(is_empty(input$update_generic_priority_bucket) == TRUE) {"NULL,"}else {paste0("'",escape_single_quotes(input$update_generic_priority_bucket),"',")}
    upd_effort_bkt   <- if(is_empty(input$update_effort_bucket) == TRUE) {"NULL,"}else {paste0("'",escape_single_quotes(input$update_effort_bucket),"',")}
    upd_confluence   <- if(is_empty(input$update_confluence_link) == TRUE) {"NULL,"}else {paste0("'",escape_single_quotes(input$update_confluence_link),"',")}
    upd_desc_ext     <- if(is_empty(input$update_description_extended) == TRUE) {"NULL "}else {paste0("'",escape_single_quotes(input$update_description_extended),"' ")}
    upd_requestor    <- paste0(input$update_requestor,",")
    upd_implementer  <- paste0(input$update_implementer,",")
    
    if (input$completion_pct < 0 || input$completion_pct > 1) {
      shinyalert::shinyalert(
        title = "Error!",
        text = "Completion % (decimal) must be more than 0 and less than 1.",
        type = "error"
      )
      return()
    }
    
    if (input$completion_pct == 1 && (is.null(input$update_actual_completion_date) || is.na(input$update_actual_completion_date))) {

      shinyalert::shinyalert(
        title = "Error!",
        text = "If Completion % is 100%, the Actual Completion Date must be provided.",
        type = "error"
      )
      return()
    }

    if (!is.null(input$update_actual_completion_date) && input$update_actual_completion_date != "" && (is.null(input$completion_pct) || input$completion_pct == "")) {
      shinyalert::shinyalert(
        title = "Error!",
        text = "If Actual Completion Date is provided, the Completion % must also be provided.",
        type = "error"
      )
      return()
    }
    
    if (input$update_est_fte_alloc < 0 || input$update_est_fte_alloc > 1) {
      shinyalert::shinyalert(
        title = "Error!",
        text = "Est. Fte. Allocation (decimal) must be more than 0 and less than 1.",
        type = "error"
      )
      return()
    }
    
    
    # Fetch the old project data
    old_data <- dbGetQuery(con, get_project_dt(project_id,con))
    
    to_na_if_empty <- function(value) {
      if (is_empty(value)) {
        return(NA)
      }
      if (is.character(value) && value == "Choose") {
        return(NA)
      }
      return(value)
    }
    
    format_date_for_input <- function(date_val) {
      if (is.null(date_val) || is.na(date_val)) {
        return(character(0)) # Use character(0) to clear dateInput
      }
      return(as.Date(date_val))
    }
    
    # Construct the new project data
    new_data <- list(
      project_id = project_id,
      project_name = input$update_project_name,
      description = input$update_description,
      status = input$update_status,
      start_date = input$update_start_date,
      estimated_completion_date = input$update_estimated_completion_date,
      actual_completion_date = input$update_actual_completion_date,
      completion_pct = input$completion_pct,
      project_size_estimate = selected_project_size,
      front_office_initiative = input$update_front_office_initiative,
      ultimate_output_system = input$update_ultimate_output_system,
      gwam_priority_id = input$update_gwampriority,
      #program_id = NA,
      initiative_type = input$update_initiative_type,
      digital_challenge = input$update_digital_challenge,
      scope_complexity = input$update_scope_complexity,
      type = input$update_type,
      notes = old_data$notes,
      risk_review = if (is_empty(input$update_risk_review)){NA}else {input$update_risk_review},
      compliance_review = if (is_empty(input$update_compliance_review)){NA}else {input$update_compliance_review},
      model_review = if (is_empty(input$update_model_review)){NA}else {input$update_model_review},
      client_team = if (is_empty(input$update_client_team)){NA}else {input$update_client_team},
      tech_review = if (is_empty(input$update_tech_review)){NA}else {input$update_tech_review},
      idea_date =input$update_idea_date,
      est_person_days = input$update_est_person_days,
      est_fte_alloc = input$update_est_fte_alloc,
      gen_ai_reporting = input$updated_gen_ai_reporting,
      generic_priority_bucket = input$update_generic_priority_bucket,
      effort_bucket = input$update_effort_bucket,
      #program_id_matt = NA,
      confluence_link = input$update_confluence_link,
      description_extended = input$update_description_extended,
      implementer = input$update_implementer,
      requestor = input$update_requestor
    )
    
    upd_proj <- upd_project(upd_project_name, upd_project_desc, upd_status, upd_start_date, upd_est_comp_dte, upd_act_comp_dte, upd_compl_pct,upd_project_size, upd_f_off_init, upd_ul_out_sys, upd_gwampriority, upd_init_type, upd_dig_chall, upd_scope_comp, upd_type, upd_risk_review, upd_compl_review, upd_model_review, upd_client_team, upd_tech_review, upd_est_per_days, upd_est_fte_alloc, upd_gen_ai_repo, upd_gen_prio_bkt, upd_effort_bkt, upd_confluence, upd_desc_ext, upd_project_id)

    # Prepare role update queries ahead of time
    upd_req_proj_query <- NULL
    if(get_previous_value("req_human_id") != input$update_requestor){
      upd_req_proj_query <- upd_req_imp_proj(input$update_requestor, upd_project_id,"requestor",con)
    }
    
    upd_impl_proj_query <- NULL
    if(get_previous_value("impl_human_id") != input$update_implementer){
      upd_impl_proj_query <- upd_req_imp_proj(input$update_implementer, upd_project_id,"implementer",con)
    }

    log_message <- paste(
      paste0("ProjectID: '", upd_project_id, "'"),
      paste0("MainUpdateQuery: '", upd_proj, "'"),
      if (!is.null(upd_req_proj_query)) paste0("RequestorUpdateQuery: '", upd_req_proj_query, "'") else "RequestorUpdateQuery: 'NULL'",
      if (!is.null(upd_impl_proj_query)) paste0("ImplementerUpdateQuery: '", upd_impl_proj_query, "'") else "ImplementerUpdateQuery: 'NULL'",
      sep = " | "
    )
    
    tryCatch({
      
      dbExecute(con, upd_proj)
      
      if(!is.null(upd_req_proj_query)){
        dbExecute(con,upd_req_proj_query )
      }
      
      if(!is.null(upd_impl_proj_query)){
        dbExecute(con, upd_impl_proj_query )
      }
      
      shinyalert(
        "Add Note to Change", type = "input",
        callbackR = function(x) {
          if (x != FALSE) {
            new_notes <- x
          } else {
            new_notes <- NA
          }
          
          # This function logs the specific field changes, which is separate from logging the query itself.
          generate_and_log_changes(old_data, new_data, upd_project_id, user, new_notes)
        }
      )
      
      
      shinyjs::show("up_step1")
      shinyjs::hide("up_step3")
      shinyjs::hide("up_step2")
      shinyjs::hide("up_prevsummary")
      shinyjs::hide("up_summary1")
      shinyjs::hide("up_summary2")
      shinyjs::hide("up_step4")
      shinyjs::hide("summary")
      shinyjs::hide("update_pj")
      shinyjs::hide("up_preview")
      
      
      updatePickerInput(session, "select_project", selected = "Choose")
      # Clear all the other inputs
      updateTextInput(session, "update_project_id", value = "")
      updateTextInput(session, "update_project_name", value = "")
      updateTextInput(session, "update_description", value = "")
      updatePickerInput(session, "update_status", selected = "Choose")
      updateDateInput(session, "update_start_date", value = "")
      updateDateInput(session, "update_idea_date", value = "")
      updateDateInput(session, "update_estimated_completion_date", value = "")
      updateDateInput(session, "update_actual_completion_date", value = "")
      #updatePickerInput(session, "update_requestor", selected = "Choose")
      #updatePickerInput(session, "update_implementer", selected = "Choose")
      updateTextInput(session, "completion_pct", value = 0)
      updatePickerInput(session, "update_front_office_initiative", selected = "Choose")
      updatePickerInput(session, "update_ultimate_output_system", selected = "Choose")
      updatePickerInput(session, "update_gwampriority", selected = "Choose")
      updatePickerInput(session, "update_initiative_type", selected = "Choose")
      updatePickerInput(session, "update_digital_challenge", selected = "Choose")
      updatePickerInput(session, "update_scope_complexity", selected = "Choose")
      updatePickerInput(session, "update_type", selected = "Choose")
      #updateTextInput(session, "update_risk_review", value = "")
      #updateTextInput(session, "update_compliance_review", value = "")
      #updateTextInput(session, "update_model_review", value = "")
      #updateTextInput(session, "update_client_team", value = "")
      #updateTextInput(session, "update_tech_review", value = "")

      renderProjectTable()
      shinyjs::show("select_project")

      
    }, error = function(e) {
      log_error(paste0("Username: ",full_name,", Object: update_project_id, Location: Update Project button - Project + Human Map Table, Input: ",log_message,", Error Message: ",e$message))
      error_message <- paste("An error occurred while trying to update the project. Please copy the following error message and send it to the Digital Enablement team:\n\n", e$message)
      shinyalert::shinyalert(
       title = "Error",
       text = error_message,
       type = "error"
      )
    })
    

  })
  
  ########################################################################################
  ##                               Project Metric Tab                                   ## 
  ########################################################################################  
  
  
  projectmetric_list <- function(user) {
    pj_metric_query <- get_projects_metrics_user(user,con)
    pj_metric_list  <- dbGetQuery(con, pj_metric_query)
    dp_metric_list  <- setNames(as.list(pj_metric_list$project_id), pj_metric_list$project_name)
    dp_metric_list  <- c("Choose" = 0, dp_metric_list)
    return(dp_metric_list)
  }
  
  selected_metric_pks <- reactiveVal(NULL)
  refresh_metrics_table <- reactiveVal(0)
  is_updating_metric <- reactiveVal(FALSE) # Add this reactive value
  
  reset_metric_form <- function() {
    updatePickerInput(session, "metric_val", selected = "0") 
    updatePickerInput(session, "select_scaling_metric", selected = "Choose")
    updateDateInput(session, "mt_start_date", value = Sys.Date())
    updatePickerInput(session, "attestor", selected = "0")
    updatePickerInput(session, "beneficiary", selected = "0")
    updateTextInput(session, "mt_notes", value = "")
    shinyjs::hide("currency_metric_div")
    updatePickerInput(session, "currency_metric", selected = "Choose")
    shinyjs::hide("metric_value")
    #updateNumericInput(session, "metric_value", label = "Value", value = 0, min = NA, max = NA, step = "any")
    
    selected_metric_pks(NULL)
    DT::selectRows(DT::dataTableProxy("metrics_info"), NULL) 
  }
  
  # Add this near your other reactiveVals
  attestor_manually_changed <- reactiveVal(FALSE)
  
  # Observe beneficiary changes and update attestor if not manually changed
  observeEvent(input$beneficiary, {
    if (!attestor_manually_changed() && input$beneficiary != "Choose" && input$beneficiary != "0") {
      updatePickerInput(session, "attestor", selected = input$beneficiary)
    }
  }, ignoreInit = TRUE)
  
  # Observe attestor changes to detect manual override
  observeEvent(input$attestor, {
    # Only set to TRUE if attestor is different from beneficiary and not "Choose"
    if (!is.null(input$attestor) && input$attestor != input$beneficiary && input$attestor != "Choose" && input$attestor != "0") {
      attestor_manually_changed(TRUE)
    } else if (input$attestor == input$beneficiary) {
      attestor_manually_changed(FALSE)
    }
  }, ignoreInit = TRUE)
  
  # Reset the manual change flag when form is cleared
  observeEvent(input$clear_form_btn_metric, {
    attestor_manually_changed(FALSE)
  })
  
  observeEvent(input$select_project_metric, {
    project_id_selected <- input$select_project_metric
    
    if (!is.null(project_id_selected) && project_id_selected != "0") {
      updateTextInput(session, "update_project_id_metric", value = project_id_selected)
      refresh_metrics_table(refresh_metrics_table() + 1)
      reset_metric_form() 
    } else {
      updateTextInput(session, "update_project_id_metric", value = "")
      refresh_metrics_table(refresh_metrics_table() + 1) 
      reset_metric_form()
    }
  }, ignoreNULL = FALSE)
  
  
  observeEvent(input$metric_val, {
    if (is_updating_metric()) {
      return()
    }
    
    selected_metric_id <- input$metric_val
    
    if (is.null(selected_metric_id) || selected_metric_id == "" || selected_metric_id == "0") {
      shinyjs::hide("currency_metric_div")
      updatePickerInput(session, "currency_metric", selected = "Choose")
      shinyjs::hide("metric_value")
      return()
    }
    
    mt_type_df <- dbGetQuery(con, get_metrics_type(selected_metric_id,con))
    
    if (nrow(mt_type_df) > 0 && "data_type" %in% colnames(mt_type_df) && !is.na(mt_type_df$data_type[1])) {
      data_type <- mt_type_df$data_type[1]
      
      ############################### dollars ###############################
      if (data_type == "dollars") {
        shinyjs::show("currency_metric_div")
        shinyjs::show("metric_value")
        # Only set value=1 if metric_value is NULL or 0 (i.e., new insert)
        if (is.null(input$metric_value) || input$metric_value == 0) {
          updateNumericInput(session, "metric_value", 
                             label = "Amount", 
                             value = 1, 
                             min = 0, 
                             max = NA, 
                             step = "any")
        } else {
          updateNumericInput(session, "metric_value", 
                             label = "Amount", 
                             value = input$metric_value, 
                             min = 0, 
                             max = NA, 
                             step = "any")
        }
        ############################### boolean ###############################
      } else if (data_type == "bool") {
        shinyjs::hide("currency_metric_div")
        shinyjs::hide("metric_value")
        updateNumericInput(session, "metric_value", 
                           label = "True or False", 
                           value = ifelse(is.null(input$metric_value), 1, input$metric_value))
        ############################### Decimal ###############################
      } else if (data_type == "numeric") {
        shinyjs::hide("currency_metric_div")
        updatePickerInput(session, "currency_metric", selected = "Choose")
        shinyjs::show("metric_value")
        updateNumericInput(session, "metric_value", 
                           label = "Value (Decimal, i.e. 1.5)", 
                           value = ifelse(is.null(input$metric_value) || input$metric_value == 0, 1, input$metric_value), 
                           min = NA, 
                           max = NA, 
                           step = "any")
        ############################### Integer ###############################
      } else if (data_type == "int4") {
        shinyjs::hide("currency_metric_div")
        updatePickerInput(session, "currency_metric", selected = "Choose")
        shinyjs::show("metric_value")
        updateNumericInput(session, "metric_value", 
                           label = "Value (Integer, i.e. 1, 2, 3)", 
                           value = ifelse(is.null(input$metric_value) || input$metric_value == 0, 1, input$metric_value), 
                           min = 1, 
                           max = NA, 
                           step = 1)
        observeEvent(input$metric_value, {
          if (!is.null(input$metric_value) && (input$metric_value %% 1 != 0)) {
            shinyalert::shinyalert(
              title = "Whole Number Required",
              text = "You can only add whole numbers for this metric.",
              type = "warning"
            )
            updateNumericInput(session, "metric_value", value = round(input$metric_value))
          }
        }, ignoreInit = TRUE)
      }
    } 
  }, ignoreNULL = FALSE, ignoreInit = TRUE)
  
  metrics_table_data <- reactive({
    refresh_metrics_table() 
    project_id <- input$select_project_metric
    
    if (!is.null(project_id) && project_id != "0") {
      query <- get_project_metrics_by_project_id(project_id, con)

      dbGetQuery(con, query)
    } else {
      data.frame() 
    }
  })
  
  rendermetricTable <- function() {
    output$metrics_info <- DT::renderDataTable({
      df <- metrics_table_data()
      if (nrow(df) > 0) {
        DT::datatable(df,
                      selection = 'single',
                      options = list(scrollX = TRUE, autoWidth = TRUE),
                      rownames = FALSE)
      } else {
        DT::datatable(data.frame(Message = "No metrics for selected project, or no project selected."),
                      options = list(dom = 't'), rownames = FALSE)
      }
    })
  }
  
  rendermetricTable()
  
  observeEvent(input$metrics_info_rows_selected, {
    req(length(input$metrics_info_rows_selected) > 0) 
    selected_row_index <- input$metrics_info_rows_selected
    
    all_data <- metrics_table_data()
    req(nrow(all_data) >= selected_row_index)
    
    selected_data <- all_data[selected_row_index, ]
    
    selected_metric_pks(list(
      project_id = selected_data$project_id,
      metric_id = selected_data$metric_id,
      attestor_id = selected_data$attestor_id
    ))
    

      is_updating_metric(TRUE)
    
    # Update all inputs, including metric_val
    updatePickerInput(session, "metric_val", selected = selected_data$metric_id)
    updatePickerInput(session, "select_scaling_metric", selected = ifelse(is.na(selected_data$frequency) || selected_data$frequency == "", "Choose", selected_data$frequency))
    updateDateInput(session, "mt_start_date", value = selected_data$metric_start_date)
    updatePickerInput(session, "attestor", selected = selected_data$attestor_id)
    updatePickerInput(session, "beneficiary", selected = ifelse(is.na(selected_data$beneficiary_id), "Choose", selected_data$beneficiary_id))
    updateTextInput(session, "mt_notes", value = selected_data$notes)
    
    metric_id_for_type_check <- selected_data$metric_id
    mt_type_df_edit <- dbGetQuery(con, get_metrics_type(metric_id_for_type_check,con))
    
    if (nrow(mt_type_df_edit) > 0 && "data_type" %in% colnames(mt_type_df_edit) && !is.na(mt_type_df_edit$data_type[1])) {
      data_type <- mt_type_df_edit$data_type[1]
      if (data_type == "dollars") {
        shinyjs::show("currency_metric_div")
        shinyjs::show("metric_value")
        updatePickerInput(session, "currency_metric", selected = ifelse(is.na(selected_data$currency) || selected_data$currency == "", "Choose", selected_data$currency))
        updateNumericInput(session, "metric_value", label = "Amount", value = selected_data$metric_value, min = 0, step = "any")
      } else {
        shinyjs::hide("currency_metric_div")
        shinyjs::show("metric_value")
        updatePickerInput(session, "currency_metric", selected = "Choose")
        if (data_type == "numeric") {
          updateNumericInput(session, "metric_value", label = "Value (Decimal, i.e. 1.5)", value = selected_data$metric_value, min = NA, max = NA, step = "any")
        } else if (data_type == "bool") {
          updateNumericInput(session, "metric_value", label = "True or False", value = selected_data$metric_value, min = 0, max = 1, step = 1)
        } else if (data_type == "int4") {
          updateNumericInput(session, "metric_value", label = "Value (Integer, i.e. 1, 2, 3)", value = selected_data$metric_value, min = 1, max = NA, step = 1)
        } else {
          updateNumericInput(session, "metric_value", label = "Value", value = selected_data$metric_value, step = "any")
        }
      }
    } else {
      shinyjs::hide("currency_metric_div")
      shinyjs::show("metric_value")
      updatePickerInput(session, "currency_metric", selected = "Choose")
      updateNumericInput(session, "metric_value", label = "Value", value = selected_data$metric_value, step = "any")
    }
    

      is_updating_metric(FALSE)
  })
  
  observe({
    project_selected <- !is.null(input$select_project_metric) && input$select_project_metric != "0"
    metric_selected_for_edit <- !is.null(selected_metric_pks())
    
    if (project_selected) {
      shinyjs::enable("insert_btn_metric")
      if (metric_selected_for_edit) {
        shinyjs::enable("update_btn_metric")
        shinyjs::enable("delete_btn_metric")
        shinyjs::disable("insert_btn_metric") 
      } else {
        shinyjs::disable("update_btn_metric")
        shinyjs::disable("delete_btn_metric")
        shinyjs::enable("insert_btn_metric")
      }
    } else { # No project selected
      shinyjs::disable("insert_btn_metric")
      shinyjs::disable("update_btn_metric")
      shinyjs::disable("delete_btn_metric")
    }
  })
  

  observeEvent(input$insert_btn_metric, {
    
    req(input$select_project_metric != "0", input$metric_val != "0", !is.na(input$metric_value))#, input$attestor != "Choose")
    
    current_project_id <- input$update_project_id_metric
    

    
    
    db_frequency <- if (input$select_scaling_metric == "Choose") NA_character_ else input$select_scaling_metric
    db_notes <- if (input$mt_notes == "") NA_character_ else input$mt_notes
    db_currency <- if (input$currency_metric == "Choose" ) NA_character_ else input$currency_metric
    db_beneficiary_id <- if (input$beneficiary == "Choose") NA_integer_ else as.integer(input$beneficiary)
    # db_metric_end_date <- if (is.na(input$mt_end_date)) NA_character_ else as.character(input$mt_end_date)
    
    query <- sqlInterpolate(con, 
                            "INSERT INTO projects.project_metrics (project_id, metric_id, attestor_id, metric_value, frequency, notes, currency, metric_start_date, beneficiary_id, status) VALUES (?project_id, ?metric_id, ?attestor_id, ?metric_value, ?frequency, ?notes, ?currency, ?metric_start_date, ?beneficiary_id, NULL)",
                            project_id = as.integer(current_project_id),
                            metric_id = as.integer(input$metric_val),
                            attestor_id = db_beneficiary_id,#as.integer(input$attestor),
                            metric_value = input$metric_value,
                            frequency = db_frequency,
                            notes = db_notes,
                            currency = db_currency,
                            metric_start_date = as.character(input$mt_start_date),
                            # metric_end_date = db_metric_end_date, 
                            beneficiary_id = db_beneficiary_id
    )
    
 
    tryCatch({
      dbExecute(con, query)
      shinyalert::shinyalert("Success", "Metric added successfully!", type = "success")
      refresh_metrics_table(refresh_metrics_table() + 1)
      reset_metric_form()
    }, error = function(e) {
      shinyalert::shinyalert("Database Error", paste("Failed to add metric:", e$message), type = "error")
    })
  })
  
  observeEvent(input$update_btn_metric, {
    pks <- selected_metric_pks()
    req(!is.null(pks)) 
    req(input$metric_val != "0",  !is.na(input$metric_value))#,input$attestor != "Choose") 
    
    db_frequency <- if (input$select_scaling_metric == "Choose") NA_character_ else input$select_scaling_metric
    db_notes <- if (input$mt_notes == "") NA_character_ else input$mt_notes
    db_currency <- if (input$currency_metric == "Choose" || shinyjs::isOutputHidden("currency_metric_div")) NA_character_ else input$currency_metric
    db_beneficiary_id <- if (input$beneficiary == "Choose") NA_integer_ else as.integer(input$beneficiary)
    
    query <- sqlInterpolate(con,
                            "UPDATE projects.project_metrics SET metric_id = ?new_metric_id, attestor_id = ?new_attestor_id, metric_value = ?metric_value, frequency = ?frequency, notes = ?notes, currency = ?currency, metric_start_date = ?metric_start_date, beneficiary_id = ?beneficiary_id, status = 'Updated' WHERE project_id = ?orig_project_id AND metric_id = ?orig_metric_id AND attestor_id = ?orig_attestor_id",
                            new_metric_id = as.integer(input$metric_val),
                            new_attestor_id = as.integer(input$attestor),
                            metric_value = input$metric_value,
                            frequency = db_frequency,
                            notes = db_notes,
                            currency = db_currency,
                            metric_start_date = as.character(input$mt_start_date),
                            beneficiary_id = db_beneficiary_id,
                            orig_project_id = as.integer(pks$project_id),
                            orig_metric_id = as.integer(pks$metric_id),
                            orig_attestor_id = as.integer(pks$attestor_id)
    )
    
    tryCatch({
      dbExecute(con, query)
      shinyalert::shinyalert("Success", "Metric updated successfully!", type = "success")
      refresh_metrics_table(refresh_metrics_table() + 1)
      reset_metric_form()
    }, error = function(e) {
      shinyalert::shinyalert("Database Error", paste("Failed to update metric:", e$message), type = "error")
    })
  })
  
  observeEvent(input$delete_btn_metric, {
    pks <- selected_metric_pks()
    req(!is.null(pks))
    

    
    shinyalert::shinyalert(
      title = "Confirm Delete",
      text = sprintf("Are you sure you want to delete the metric for this Project?"), #Project ID %d, Metric ID %d, Attestor ID %d?", 
                     #pks$project_id, pks$metric_id, pks$attestor_id),
      type = "warning",
      showCancelButton = TRUE,
      confirmButtonText = "Yes, delete it!",
      cancelButtonText = "Cancel",
      callbackR = function(value) {
        if (value) {
          query <- sqlInterpolate(con,
                                  "DELETE FROM projects.project_metrics WHERE project_id = ?project_id AND metric_id = ?metric_id AND attestor_id = ?attestor_id",
                                  project_id = as.integer(pks$project_id),
                                  metric_id = as.integer(pks$metric_id),
                                  attestor_id = as.integer(pks$attestor_id)
          )
          tryCatch({
            dbExecute(con, query)
            shinyalert::shinyalert("Deleted!", "The metric has been deleted.", type = "success")
            refresh_metrics_table(refresh_metrics_table() + 1)
            reset_metric_form()
          }, error = function(e) {
            shinyalert::shinyalert("Database Error", paste("Failed to delete metric:", e$message), type = "error")
          })
        }
      }
    )
  })
  
   render_metric_project_ui <- function() {
     
    
    
    tooltipInput <- function(inputFunc, inputId, label, tooltip, ...) {
      tags$div(
        `data-toggle`    = "tooltip",
        `data-placement` = "top",
        title            = tooltip,
        inputFunc(inputId, label, ...)
      )
    }
    
    fluidPage(
      fluidRow(

        column(5,
               div(
                 id = "metric_step1",
                 box(
                   solidHeader = TRUE,
                   width = 12,
                   class = "custom-box",
                   column(12,
                          pickerInput(
                            inputId  = "select_project_metric",
                            label    = "Project (*)",
                            choices  = datametricpj_list, 
                            selected = "Choose",
                            options  = list('actions-box' = TRUE, 'live-search' = TRUE),
                            multiple = FALSE
                          ),
                          tags$div(style = "display:none;", textInput("update_project_id_metric", "Project ID (*)", value = "")),
                          pickerInput(
                            inputId  = "metric_val",
                            label    = "Metric (*)",
                            choices  = datapj_metric,#Get the metric_id - mandatory field
                            selected = "Choose",
                            options  = list('actions-box' = TRUE, 'live-search' = TRUE),
                            multiple = FALSE,
                          ),
                          pickerInput(
                            inputId  = "select_scaling_metric",
                            label    = "Frequency",
                            choices  = ds_scaling,#Get the frequency, it could be NULL - non mandatory field
                            selected = "Choose",
                            options  = list('actions-box' = TRUE, 'live-search' = TRUE),
                            multiple = FALSE
                          ),
                          
                          tags$div(style = "display:none;", dateInput("mt_start_date", "Start Date", value = Sys.Date())),
                          # tags$div(style = "display:none;",pickerInput(
                          #   inputId = "attestor", 
                          #   "Attestor (*)", 
                          #   choices = datapj_employee, 
                          #   selected = "Choose",
                          #   options = list('actions-box' = TRUE, 'live-search' = TRUE),
                          #   multiple = FALSE
                          # )),
                          pickerInput(
                            inputId = "beneficiary", 
                            "Beneficiary (*)", 
                            choices = datapj_employee, #Get the beneficiary_id - mandatory field
                            selected = "Choose",
                            options = list('actions-box' = TRUE, 'live-search' = TRUE),
                            multiple = FALSE
                          ),
                          pickerInput(
                            inputId = "attestor", 
                            "Attestor (*)", 
                            choices = datapj_employee, #Get the beneficiary_id - mandatory field
                            selected = "Choose",
                            options = list('actions-box' = TRUE, 'live-search' = TRUE),
                            multiple = FALSE
                          ),
                          
                          textInput("mt_notes", "Notes", value = ""), #Get the notes, it could be NULL - non mandatory field
                          tags$div(id = "currency_metric_div", style = "display:none;",
                                   pickerInput(
                                     inputId  = "currency_metric",
                                     label    = "Currency (*)",
                                     choices  = c("Choose", "USD", "CAD"), #Get the currency, it could be NULL - non mandatory field
                                     selected = "Choose", # Default selection
                                     options  = list('actions-box' = TRUE),
                                     multiple = FALSE
                                   )
                          ),
                          numericInput(
                            inputId  = "metric_value", #Get the metric_value - mandatory field
                            label    = "Value",
                            value    = 0, 
                            min      = NA, 
                            max      = NA, 
                            step     = "any"
                          )
                   ),
                   div(
                     style = "text-align: center;",
                     actionButton("insert_btn_metric", "Add", icon = icon("plus"), class = "custom-button"),
                     actionButton("update_btn_metric", "Update", icon = icon("edit"), class = "custom-button"),
                     actionButton("delete_btn_metric", "Delete", icon = icon("trash"), class = "custom-button"),
                     actionButton("clear_form_btn_metric", "Clear / New", icon = icon("eraser"), class = "custom-button")
                   )
                 )
               )
        ),
        
        column(7,
               div(
                 id = "metrics_preview",
                 #style = "display:none;",
                 box(
                   class = "custom-box",
                   solidHeader = TRUE,
                   width = 12,
                   h4(style = "text-align: center; font-weight: bold;", "Metrics by Project"),
                   DT::dataTableOutput("metrics_info")
                 )
               )
               
        ),

        # Ensure tooltips are initialized
        tags$script(HTML("$(document).ready(function(){
                          $('[data-toggle=\"tooltip\"]').tooltip();
                        });"))
        
        
      ))
   }
  
   observeEvent(input$clear_form_btn_metric, {
     reset_metric_form()
   })
   
  output$metrics <- renderUI({
    datametricpj_list <<- projectmetric_list(user)
    render_metric_project_ui()
  })
  

  
  ########################################################################################
  ##                                Project Notes Tab                                   ## 
  ########################################################################################  
  
  observeEvent(input$select_project_note, {
    
    project_id_note <- input$select_project_note
    project_data_note <<- dbGetQuery(con, get_project_data(project_id_note,con))
    current_project_id <- project_data_note$project_id
    
    updateTextInput(session, "update_project_id_note", value = project_data_note$project_id)
    
  })

  output$projectnotes <- renderUI({

    box(
      #status = "success", 
      solidHeader = TRUE,  
      width = 12,  
      class = "custom-box",  
      column(12,
             pickerInput(inputId = "select_project_note", "Select Project to Add notes", choices = dataproject_list, selected = "Choose", options = list('actions-box' = TRUE, 'live-search' = TRUE), multiple = FALSE)
             ,textInput("project_notes", "Notes", value = "")
      ),
      tags$div(style = "display:none;", textInput("update_project_id_note", "Project ID (*)", value = ""),textInput("update_notes", "Notes", value = "")),
      div(
        style = "text-align: center;",  # Center the buttons
        actionButton("addnote", "Submit", class = "custom-button", icon = icon("plus"), class = "custom-button")
      ),
      fluidRow(
        column(12,
               div(
                 style = "margin-top: 20px; font-weight: bold; color: black;",
                 "This tab is to add notes for the project. Please write your notes about the project in the field above"
               )
        )
      )
    )
    
  })
  
  observeEvent(input$addnote, {
    
    project_id_note <<- input$update_project_id_note
    if (is.null(project_id_note) || project_id_note == "") {
      show_alert("Project ID is required for updating.")
      return()
    }
    
    new_notes <- input$project_notes
    if (is.null(new_notes) || new_notes == "") {
      shinyalert::shinyalert(
        title = "Error!",
        text = "Please enter a note to add to the project.",
        type = "error"
      )
      return()
    }
    
    log_project_notes(project_id_note, user, new_notes)
    
    updatePickerInput(session, "select_project_note",selected = 0)
    updateTextInput(session, "update_project_id_note", value = "")
    updateTextInput(session, "project_notes", value = "")
    
    renderProjectTable()
    
  })
  
  ########################################################################################
  ##                             Project Approval Tab                                   ## 
  ########################################################################################  
  
  rendersubmittedprojectDT <- function() {
    
    list_name <<- paste0("'", full_name, "'")
    dbGetQuery(con, get_project_temp_data(list_name, 0))

  }
  
  output$submittedproject <- DT::renderDataTable({
    
    rendersubmittedprojectDT()
    
  }, options = list(
    scrollX = TRUE,
    autoWidth = TRUE,
    editable = TRUE,
    columnDefs = list(
      list(width = '150px', targets = 2),
      list(width = '80px', targets = 3),
      list(width = '300px', targets = 4),
      list(width = '600px', targets = 5),
      list(width = '150px', targets = 10),
      list(width = '150px', targets = 12),
      list(width = '250px', targets = 17),
      list(width = '250px', targets = 18)
    )
  ), rownames = FALSE)
  
  
  observeEvent(input$deletesubmission , {
    
    tryCatch({
    submitted_proj  <- executeQuery(con, get_project_temp_data(list_name,0))
    
    if(nrow(submitted_proj) == 0) {
      showModal(modalDialog(
        title = "No Projects",
        "There are no projects.",
        easyClose = TRUE
      ))
      return()
    }
    
    choices        <-  setNames(submitted_proj$project_temp_id, submitted_proj$project_name)
    choices        <-  c("Choose" = 0, choices)
    
    showModal(modalDialog(
      title = "List of Projects",
      selectInput("selected_delete_project", "Select Project", choices = choices),
      br(),
      footer = tagList(
        tags$button("Close", type = "button", class = "custom-button", `data-dismiss` = "modal"),
        actionButton("removeproject", "Remove", class = "custom-button")
      ),
      easyClose = TRUE,
      size = "m",
      class = "custom-modal"
    ))
    }, error = function(e) {
      log_error(paste0("Username: ",full_name,", Location: Delete submitted project - getting a project list, Error Message: ",e$message))
      error_message <- paste("An error occurred while trying to get a project. Please copy the following error message and send it to the Digital Enablement team:\n\n", e$message)
      shinyalert::shinyalert(
        title = "Error",
        text = error_message,
        type = "error"
      )
    })
  })
  
  observeEvent(input$removeproject, {
    
    tryCatch({
      
      remove_project_query <- delete_project_temp(input$selected_delete_project,con)
      dbExecute(con, remove_project_query)
      shinyalert::shinyalert(title = "Removed", text = "The Project has been removed.", type = "success")
      approval_trigger(approval_trigger() + 1)
      
      output$submittedproject <- DT::renderDataTable({
        
        rendersubmittedprojectDT()
        
      }, options = list(
        scrollX = TRUE,
        autoWidth = TRUE,
        editable = TRUE,
        columnDefs = list(
          list(width = '150px', targets = 2),
          list(width = '80px', targets = 3),
          list(width = '300px', targets = 4),
          list(width = '600px', targets = 5),
          list(width = '150px', targets = 10),
          list(width = '150px', targets = 12),
          list(width = '250px', targets = 17),
          list(width = '250px', targets = 18)
        )
      ), rownames = FALSE)
      
      updated_projects <- executeQuery(con, get_project_temp_data(list_name, 0))
      
      
      if(nrow(updated_projects) == 0) {
        showModal(modalDialog(
          title = "No Projects",
          "There are no projects.",
          easyClose = TRUE
        ))
        return()
      }
      
      updated_choices <- setNames(updated_projects$project_temp_id, updated_projects$project_name)
      updated_choices <- c("Choose" = 0, updated_choices)
      
      updateSelectInput(session, "selected_delete_project", choices = updated_choices, selected = 0)
      
    }, error = function(e) {
      
      log_error(paste0("Username: ",full_name,", Location: Remove Project Button - Submission Project List, Error Message: ",e$message))
      shinyalert::shinyalert(title = "Error", text = paste("Insertion failed:", e$message), type = "error")
      return()
      
    })
    
  })
  
  
  renderApprovalProjectDT <- function() {
    
    if (is.null(ds_implementer) || nrow(ds_implementer) == 0) {
      return(NULL)
    }
    
    implementer_names <- ds_implementer$name
    list_of_names <<- paste0("'", implementer_names, "'", collapse = ",")
    
    dbGetQuery(con, get_project_temp_data(list_of_names))

  }


  
  output$approvalproject <- DT::renderDataTable({
    
    renderApprovalProjectDT()

  }, options = list(
    scrollX = TRUE,
    autoWidth = TRUE,
    editable = TRUE,
    columnDefs = list(
      list(width = '150px', targets = 2),
      list(width = '80px', targets = 3),
      list(width = '300px', targets = 4),
      list(width = '600px', targets = 5),
      list(width = '150px', targets = 10),
      list(width = '150px', targets = 12),
      list(width = '250px', targets = 17),
      list(width = '250px', targets = 18)
    )
  ), rownames = FALSE)
  
  observeEvent(input$approval, {
    
    pending_proj_query  <- get_project_temp_data(list_of_names)
    pending_proj        <- executeQuery(con, pending_proj_query)
    
    if(nrow(pending_proj) == 0) {
      showModal(modalDialog(
        title = "No Pending Projects",
        "There are no projects pending approval.",
        easyClose = TRUE
      ))
      return()
    }
    
    new_project_id <<- executeQuery(con,get_new_projectid())
    choices        <-  setNames(pending_proj$project_temp_id, pending_proj$project_name)
    choices        <-  c("Choose" = 0, choices)
    
    showModal(modalDialog(
      title = "Approve Project",
      selectInput("selected_pending_project", "Select Project", choices = choices),
      br(),
      uiOutput("implementer_info"),
      br(),
      tags$div(tags$b("New Project ID assigned:"), " ", new_project_id),
      br(),
      footer = tagList(
        tags$button("Close", type = "button", class = "custom-button", `data-dismiss` = "modal"),
        actionButton("rejectproject", "Reject", class = "custom-button"),
        actionButton("approveproject", "Approve", class = "custom-button")
      ),
      easyClose = TRUE,
      size = "m",
      class = "custom-modal"
    ))
    
  })
  
  output$implementer_info <- renderUI({
    
    req(input$selected_pending_project)
    
    pending_proj_query <- get_project_approval_data(.con = con)
    pending_proj <- executeQuery(con, pending_proj_query)

    if (nrow(pending_proj) > 0 && input$selected_pending_project > 0 ) {
      sel <<- pending_proj[pending_proj$project_id == input$selected_pending_project, ]
      tags$div(tags$b("Implementer:"), " ", sel$implementer_project_user)
    } else {
      tags$div(tags$b("Implementer:"), "Select a project to see the implementer.")
    }
    
  })
  
  observeEvent(input$approveproject, {
    
    tryCatch({
      
      sel_query        <- get_project_approval_data(input$selected_pending_project,new_project_id,con)
      human_query      <- get_project_approval_data(con)
      human_record     <- executeQuery(con, human_query)
      human_data       <- human_record[human_record$project_id == input$selected_pending_project,]
      selected_record  <- executeQuery(con, sel_query)
      
      if(nrow(selected_record) == 0){
        shinyalert::shinyalert(title = "Error", text = "Selected project not found.", type = "error")
        return()
      }
      
      selected_record  <- selected_record[1, ]  
      insert_query     <- create_approved_project(sel_query)
      human_imp_id     <- executeQuery(con, get_human_id_by_name(human_data$implementer_project_user,con))
      human_req_id     <- executeQuery(con, get_human_id_by_name(human_data$requestor_user,con))
      var_human_imp_id <- paste0(",",human_imp_id,",'")
      var_human_req_id <- paste0(",",human_req_id,",'")
      ins_new_appr_imp <-  create_new_human_map(new_project_id,var_human_imp_id,var_role_implem,var_role_level,var_role_pct,var_start_dt,var_end_dt,Var_hu_map_notes)
      ins_new_appr_req <-  create_new_human_map(new_project_id,var_human_req_id,var_role_reques,var_role_level,var_role_pct,var_start_dt,var_end_dt,Var_hu_map_notes)
      ins_new_appr_sub <- create_new_human_map(new_project_id,var_human_imp_id,var_role_submit,var_role_level,var_role_pct,var_start_dt,var_end_dt,Var_hu_map_notes)
      
      dbExecute(con, insert_query)
      dbExecute(con, ins_new_appr_imp)
      dbExecute(con, ins_new_appr_req)
      dbExecute(con, ins_new_appr_sub)
      
      shinyalert::shinyalert(title = "Success", text = "Project approved successfully!, If you need to update any field, remember do it by The Update tab", type = "success")
      
      approval_trigger(approval_trigger() + 1)
      
      output$approvalproject <- DT::renderDataTable({
        renderApprovalProjectDT()
      }, options = list(
        scrollX = TRUE,
        autoWidth = TRUE,
        editable = TRUE,
        columnDefs = list(
          list(width = '150px', targets = 2),
          list(width = '80px', targets = 3),
          list(width = '300px', targets = 4),
          list(width = '600px', targets = 5),
          list(width = '150px', targets = 10),
          list(width = '150px', targets = 12),
          list(width = '250px', targets = 17),
          list(width = '250px', targets = 18)
        )
      ), rownames = FALSE)
      
      tryCatch({    
        
        dlt_project_temp <- delete_project_temp(input$selected_pending_project,con)
        dbExecute(con, dlt_project_temp)
        shinyalert::shinyalert(title = "Success", text = "The Project has been removed successfully from the submission stage", type = "success")
        
        pending_proj_query  <- get_project_temp_data(list_of_names)
        pending_proj        <- executeQuery(con, pending_proj_query)
        
        if(nrow(pending_proj) == 0) {
          showModal(modalDialog(
            title = "No Pending Projects",
            "There are no projects pending approval.",
            easyClose = TRUE
          ))
          return()
        }
        
        new_project_id <<- executeQuery(con,get_new_projectid())
        choices        <-  setNames(pending_proj$project_temp_id, pending_proj$project_name)
        choices        <-  c("Choose" = 0, choices)
        
      }, error = function(e) {
        log_error(paste0("Username: ",full_name,", Object: approveproject, Location: Approve Project Button - remove temp record, Error Message: ",e$message))
        shinyalert::shinyalert(title = "Error", text = paste("Failed to remove temp record:", e$message), type = "error")
        return()
        
      })
      
    }, error = function(e) {
      log_error(paste0("Username: ",full_name,", Object: approveproject, Location: Approve Project Button - Insert, Error Message: ",e$message))
      shinyalert::shinyalert(title = "Error", text = paste("Insertion failed:", e$message), type = "error")
      return()
      
    })
    
  })
  
  observeEvent(input$rejectproject, {
    
    tryCatch({
      
      update_status_query <- update_project_temp("Rejected", input$selected_pending_project, con)
      dbExecute(con, update_status_query)
      shinyalert::shinyalert(title = "Rejected", text = "The Project status has changed to rejected.", type = "success")
      approval_trigger(approval_trigger() + 1)
      
    }, error = function(e) {
      log_error(paste0("Username: ",full_name,", Object: rejectproject, Location: Reject Project Button, Error Message: ",e$message))
      shinyalert::shinyalert(title = "Error", text = paste("Insertion failed:", e$message), type = "error")
      return()
      
    })
    
    # #adding email notification (uncomment the following lines if you want to get an email for the rejection)
    # subject     <- paste0("Update about your project submission - ", sel$project_name)
    # user_email  <- executeQuery(con, get_email_by_id(team_id))
    # id_to_email <- executeQuery(con, get_human_id_by_name(sel$implementer_project_user))
    # to_email    <- executeQuery(con,get_email_by_id(id_to_email))
    # body        <- paste(
    #                 "<p>Hi,</p>",
    #                 "<p>Thank you for submitting your project ",sel$project_name,". Your team believes it would be great to have a quick chat to discuss it further and explore some details.</p>",
    #                 "<p>Please book a call with them at your convenience so you can review it together.</p>",
    #                 "<br>",
    #                 "<p> You can see the new status at the IAD Project Tracker App </p>",
    #                 "<br>",
    #                 "<p>Best regards,<br>Digital Enablement Team</p>"
    #               )
    # 
    # tryCatch({
    #   mailR::send.mail(
    #     from    = "Digital_Enablement@manulife.com",
    #     to      = as.character(to_email),
    #     cc      = as.character(user_email),
    #     replyTo = as.character(user_email),
    #     subject = subject,
    #     body    = body,
    #     smtp    = list(host.name = "mail.manulife.com", port = 25),
    #     html    = TRUE
    #   )
    # }, error = function(e) {
    #   log_error(e$message)
    #   error_message <- paste("An error occurred while trying to send an email with the information loaded. Please copy the following error message and send it to the Digital Enablement team:\n\n", e$message)
    #   shinyalert::shinyalert(
    #     title = "Error",
    #     text = error_message,
    #     type = "error"
    #   )
    # })
    
  })
  
  ########################################################################################
  ##                                My TimeSheet Panel                                 ## 
  ######################################################################################## 
  
  output$time_saved_details <- DT::renderDataTable({

    time_saved_data()
    
  }, options = list(
    scrollX    = TRUE,  
    autoWidth  = FALSE, 
    editable   = FALSE, 
    columnDefs = list(
      list(width = '80px', targets = 0),
      list(width = '250px', targets = 1),
      list(width = '80px', targets = 2),
      list(width = '80px', targets = 3),
      list(width = '80px', targets = 4)
    )
  ), rownames = FALSE)  
  
  # output$allocationPlot <- renderPlot({
  #   req(time_saved_data())
  #   
  #   # Prepare the data and convert effective_date to month_year
  #   df <- time_saved_data() %>%
  #     mutate(effective_date = as.Date(effective_date),
  #            month_year   = lubridate::floor_date(effective_date, "month"))
  #   
  #   # Define the end of the period as the month before the current month
  #   final_last <- lubridate::floor_date(Sys.Date() - months(1), "month")
  #   
  #   # Keep only records that fall into the latest 12 months ending with final_last
  #   df <- df %>%
  #     filter(month_year >= (final_last %m-% months(11)) & month_year <= final_last) %>%
  #     filter(!is.na(project_name))
  #   
  #   # Filter by project if a specific one is selected from the dropdown
  #   if (!is.null(input$project_filter) && input$project_filter != "All") {
  #     df <- df %>% filter(project_name == input$project_filter)
  #   }
  #   
  #   # Create a full sequence of months for the latest 12 months ending with final_last
  #   all_months <- seq.Date(from = final_last %m-% months(11), to = final_last, by = "month")
  #   
  #   # Group by month and project, then complete missing months with 0 allocation
  #   df_summary <- df %>%
  #     group_by(month_year, project_name) %>%
  #     summarize(total_alloc = sum(allocation_pct), .groups = "drop") %>%
  #     tidyr::complete(project_name, month_year = all_months, fill = list(total_alloc = 0)) %>%
  #     mutate(perc_alloc = total_alloc * 100)
  #   
  #   ggplot(df_summary, aes(x = month_year, y = perc_alloc, fill = project_name)) +
  #     geom_col(width = 10.0, show.legend = FALSE) +
  #     geom_text(aes(label = paste0(round(perc_alloc, 1), "%")),
  #               vjust = -0.5, size = 5) +
  #     labs(x = "Effective Date", y = "Allocation (%)") +
  #     scale_x_date(date_labels = "%b %Y", date_breaks = "1 month",
  #                  expand = expansion(mult = c(0.01, 0.05))) +
  #     theme_minimal() +
  #     theme(axis.text.x = element_text(angle = 45, hjust = 1))
  # })
  
  ########################################################################################
  ##                                   Feedback                                         ## 
  ######################################################################################## 

  observeEvent(input$open_feedback, {
    runjs("$('#feedback-panel').addClass('show')")
  })

  feedback <- reactiveValues(
    data = data.frame(
      rating = numeric(0),
      comment = character(0),
      timestamp = as.POSIXct(character(0)),
      stringsAsFactors = FALSE
    )
  )
  
  observeEvent(input$submit_feedback, {

    # Create a new row with the submitted information.
    newFeedback <- data.frame(
      rating = as.numeric(input$star),
      comment = input$feedback_comment,
      stringsAsFactors = FALSE
    )
    
    new_ts <- Sys.time()
    if(nrow(feedback$data) > 0) {
      last_ts <- max(feedback$data$timestamp)
      if(new_ts <= last_ts) {
        new_ts <- last_ts + 1
      }
    }
    
    # Append to the reactive data frame.
    feedback$data <- rbind(feedback$data, newFeedback)
    
    showNotification("Feedback submitted!", type = "message")
    
    if(is.null(feedback$data$comment) || is.na(feedback$data$comment) || feedback$data$comment == "") {
      feedback$data$comment <- "No comment"
    }
    
    # Save the feedback with the unique timestamp.

    dbExecute(con, save_log(feedback$data$rating, paste0("'", escape_single_quotes(feedback$data$comment), "'"),new_ts))
    
    runjs("$('#feedback-panel').removeClass('show');")
    updateTextAreaInput(session, "feedback_comment", value = "")
    runjs("$('#star input:radio[value=\"5\"]').prop('checked', true).trigger('change');")
    
    feedback$data <- data.frame(
      rating = numeric(0),
      comment = character(0),
      timestamp = as.POSIXct(character(0)),
      stringsAsFactors = FALSE
    )
    
  })
  observeEvent(input$close_feedback, {

    
    runjs("$('#feedback-panel').removeClass('show');")
    # Clear the comment input
    updateTextAreaInput(session, "feedback_comment", value = "")
    

    updateRadioButtons(session, "star", selected = 5)
    runjs("$('#star input:radio[value=\"5\"]').prop('checked', true).trigger('change');")
    feedback$data <- data.frame(
      rating = numeric(0),
      comment = character(0),
      timestamp = as.POSIXct(character(0)),
      stringsAsFactors = FALSE
    )
  })
  
  
  ########################################################################################
  ##                        AI / Quant Refinement Form Tab                              ## 
  ########################################################################################  
  # 
  # output$intakeform <- renderUI({
  #   fluidPage(
  #     fluidRow(
  #       column(8,
  #              div(
  #                id = "step1",
  #                box(
  #                  solidHeader = TRUE,
  #                  width = 12,
  #                  class = "custom-box",
  #                  tags$div(
  #                    `data-toggle` = "tooltip",
  #                    `data-placement` = "top",
  #                    title = "Project ",
  #                    textInput("project_name", "Project Name (*)", value = "")
  #                  ),
  #                  tags$div(
  #                    `data-toggle` = "tooltip",
  #                    `data-placement` = "top",
  #                    title = tooltip_map["description"],
  #                    textInput("description", "Description (*)", value = "")
  #                  ),
  #                  tags$div(
  #                    `data-toggle` = "tooltip",
  #                    `data-placement` = "bottom",
  #                    title = tooltip_map["start_date"],
  #                    dateInput("start_date", "Start Date", value = format(Sys.Date(), "%Y-%m-%d"))
  #                  ),
  #                  tags$div(
  #                    `data-toggle` = "tooltip",
  #                    `data-placement` = "bottom",
  #                    title = tooltip_map["idea_date"],
  #                    dateInput("idea_date", "Idea Date (*)", value = format(Sys.Date(), "%Y-%m-%d"))
  #                  ),
  #                  checkboxInput("suggestion_box_only", "Suggestion Box Only", value = FALSE),
  #                  div(
  #                    style = "text-align: center;",
  #                    actionButton("next_step1", "Next", class = "custom-button")
  #                  )
  #                )
  #              ),
  #              tags$script(HTML("$(document).ready(function(){
  #                 $('[data-toggle=\"tooltip\"]').tooltip();
  #               });")),
  #              
  #              div(
  #                id = "step2",
  #                style = "display: none;",
  #                box(
  #                  solidHeader = TRUE,
  #                  width = 12,
  #                  class = "custom-box",
  #                  radioButtons("project_for", "Is this project for you or someone else? (Who should be listed as the main implementer of the project)", choices = c("Me" = "me", "Someone Else" = "someone_else")),
  #                  conditionalPanel(
  #                    condition = "input.project_for == 'someone_else'",
  #                    tags$div(
  #                      `data-toggle` = "tooltip",
  #                      `data-placement` = "top",
  #                      title = "Choose an implementer for this project",
  #                      pickerInput(
  #                        inputId = "implementer", 
  #                        "Implementer (*)", 
  #                        choices = datapj_implementer(), 
  #                        options = list('actions-box' = TRUE, 'live-search' = TRUE),
  #                        multiple = FALSE, 
  #                        selected = "Choose"
  #                      )
  #                    )
  #                  ),
  #                  div(
  #                    style = "text-align: center;",
  #                    actionButton("prev_step2", "Back", class = "custom-button"),
  #                    actionButton("next_step2", "Next", class = "custom-button")
  #                  )
  #                )
  #              ),
  #              tags$script(HTML("$(document).ready(function(){
  #                 $('[data-toggle=\"tooltip\"]').tooltip();
  #               });")),
  #              
  #              div(
  #                id = "step3",
  #                style = "display: none;",
  #                box(
  #                  solidHeader = TRUE,
  #                  width = 12,
  #                  class = "custom-box",
  #                  tags$div(
  #                    `data-toggle` = "tooltip",
  #                    `data-placement` = "top",
  #                    title = "Choose a requestor for this project",
  #                    pickerInput(
  #                      inputId = "requestor_for", 
  #                      "Who is the requestor for this project?", 
  #                      choices = datapj_employee, 
  #                      options = list('actions-box' = TRUE, 'live-search' = TRUE),
  #                      multiple = FALSE, 
  #                      selected = "Choose"
  #                    )
  #                  ),
  #                  textInput("notes", "Notes (optional)", value = ""),
  #                  actionButton("addrequestor", "Add Requestor", icon = icon("plus")),
  #                  div(
  #                    style = "text-align: center;",
  #                    actionButton("prev_step3", "Back", class = "custom-button"),
  #                    actionButton("next_step3", "Next", class = "custom-button")
  #                  ),
  #                  fluidRow(
  #                    column(12,
  #                           div(
  #                             style = "margin-top: 20px; font-weight: bold; color: black;",
  #                             "The Add Requestor button is used to add a new requestor to the list. If the requestor already exists in the list, please select them from the dropdown menu."
  #                           )
  #                    )
  #                  )
  #                )
  #              ),
  #              tags$script(HTML("$(document).ready(function(){
  #                 $('[data-toggle=\"tooltip\"]').tooltip();
  #               });")),               
  #              div(
  #                id = "step4",
  #                style = "display: none;",
  #                box(
  #                  solidHeader = TRUE,
  #                  width = 12,
  #                  class = "custom-box",
  #                  tags$div(
  #                    `data-toggle` = "tooltip",
  #                    `data-placement` = "top",
  #                    title = tooltip_map["estimated_completion_date"],
  #                    dateInput("est_completion_date", "Estimated Completion Date (*)", value = format(Sys.Date(), "%Y-%m-%d"))
  #                  ),
  #                  tags$div(
  #                    `data-toggle` = "tooltip",
  #                    `data-placement` = "top",
  #                    title = tooltip_map["front_office_initiative"],
  #                    pickerInput(
  #                      inputId = "front_office_initiative", 
  #                      "Front Office Initiative (*)", 
  #                      choices = include, 
  #                      options = list('actions-box' = TRUE, 'live-search' = TRUE),
  #                      multiple = FALSE
  #                    )
  #                  ),
  #                  tags$div(
  #                    `data-toggle` = "tooltip",
  #                    `data-placement` = "top",
  #                    title = tooltip_map["digital_challenge"],
  #                    pickerInput(
  #                      inputId = "digital_challenge", 
  #                      "Digital Challenge", 
  #                      choices = include, 
  #                      options = list('actions-box' = TRUE, 'live-search' = TRUE),
  #                      multiple = FALSE
  #                    )
  #                  ),
  #                  tags$div(
  #                    `data-toggle` = "tooltip",
  #                    `data-placement` = "top",
  #                    title = tooltip_map["gen_ai_reporting"],
  #                    pickerInput(
  #                      inputId = "gen_ai_reporting", 
  #                      "Gen AI Reporting", 
  #                      choices = include, 
  #                      options = list('actions-box' = TRUE, 'live-search' = TRUE),
  #                      multiple = FALSE
  #                    )
  #                  ),
  #                  tags$div(
  #                    `data-toggle` = "tooltip",
  #                    `data-placement` = "top",
  #                    title = tooltip_map["gwam_priority_id"],
  #                    pickerInput(
  #                      inputId = "gwampriority", 
  #                      "Gwam Priority (*)", 
  #                      choices = datapj_gwampriority, 
  #                      selected = "Choose", 
  #                      options = list('actions-box' = TRUE, 'live-search' = TRUE),
  #                      multiple = FALSE
  #                    )
  #                  ),
  #                  tags$div(
  #                    `data-toggle` = "tooltip",
  #                    `data-html` = "true",
  #                    `data-placement` = "top",
  #                    title = tooltip_map["initiative_type"],
  #                    pickerInput(
  #                      inputId = "initiative_type", 
  #                      "Initiative Type (*)", 
  #                      choices = datapj_initiative_type, 
  #                      options = list('actions-box' = TRUE, 'live-search' = TRUE, multiple = FALSE),
  #                      selected = "Choose"
  #                    )
  #                  ),
  #                  tags$div(
  #                    `data-toggle` = "tooltip",
  #                    `data-placement` = "top",
  #                    title = tooltip_map["scope_complexity"],
  #                    pickerInput(
  #                      inputId = "scope_complexity", 
  #                      "Scope Complexity (*)", 
  #                      choices = datapj_priority, 
  #                      options = list('actions-box' = TRUE, 'live-search' = TRUE),
  #                      multiple = FALSE, 
  #                      selected = "Choose"
  #                    )
  #                  ),
  #                  tags$div(
  #                    `data-toggle` = "tooltip",
  #                    `data-placement` = "top",
  #                    title = tooltip_map["type"],
  #                    pickerInput(
  #                      inputId = "type", 
  #                      "Type (*)", 
  #                      choices = datapj_type, 
  #                      options = list('actions-box' = TRUE, 'live-search' = TRUE),
  #                      multiple = FALSE, 
  #                      selected = "Choose"
  #                    )
  #                  ),
  #                  div(
  #                    style = "text-align: center;",
  #                    actionButton("prev_step4", "Back", class = "custom-button"),
  #                    actionButton("next_step4", "Next", class = "custom-button")
  #                  )
  #                ),
  #                tags$script(HTML("$(document).ready(function(){
  #                   $('[data-toggle=\"tooltip\"]').tooltip();
  #                 });"))
  #              ),
  #              
  #              div(
  #                id = "step5",
  #                style = "display: none;",
  #                box(
  #                  solidHeader = TRUE,
  #                  width = 12,
  #                  class = "custom-box",
  #                  pickerInput(inputId ="ultimate_output_system", "Ultimate Output System (optional)", choices = datapj_output_type, options = list('actions-box' = TRUE, 'live-search' = TRUE), multiple = FALSE, selected = "Choose"),
  #                  textInput("risk_review", "Risk Review (optional)", value = ""),
  #                  textInput("compliance_review", "Compliance Review (optional)", value = ""),
  #                  textInput("model_review", "Model Review (optional)", value = ""),
  #                  textInput("client_team", "Client Team (optional)", value = ""),
  #                  textInput("tech_review", "Tech Review (optional)", value = ""),
  #                  #textInput("est_person_days", "Estimate Person Days (optional)", value = ""),
  #                  selectInput(
  #                    inputId = "est_person_days",
  #                    label = "Estimated Person Days (optional)",
  #                    choices = 0:500,
  #                    selected = 0
  #                  ),
  #                  numericInput(
  #                    inputId  = "est_fte_alloc",
  #                    label    = "Estimate Fte. Alloc. (optional)",
  #                    value    = 0,
  #                    min      = 0,
  #                    max      = 1,
  #                    step     = 0.01
  #                  ),
  #                  textInput("confluence_link", "Confluence url (optional)", value = ""),
  #                  
  #                  div(
  #                    style = "text-align: center;",
  #                    actionButton("prev_step5", "Back", class = "custom-button"),
  #                    actionButton("submit_project", "Submit", class = "custom-button")
  #                  )
  #                )
  #              )
  #       ),
  #       column(4,
  #              box(
  #                solidHeader = TRUE,
  #                width = 12,
  #                class = "custom-box",
  #                h4(style = "text-align: center; font-weight: bold;", "Project Summary"),
  #                uiOutput("project_summary")
  #              )
  #       )
  #     )
  #   )
  # })
  
  
}



########################################################################################
##                                    DB Queries                                      ## 
########################################################################################

library(glue)

#####################################
##        Time Entry Queries       ##
#####################################

get_count_timesheet <- function(project_id, effective_date, team_id, DEFAULT_WORK_TYPE, .con) {
  query <- glue::glue_sql(
    "SELECT count(1) as count
       FROM projects.time_sheet WHERE project_id = {project_id}
    AND effective_date = {effective_date}
    AND team_member = {team_id}
    AND work_type = {DEFAULT_WORK_TYPE}",
    .con = .con)
  return(query)
}

get_allocation_timesheet <- function(effective_date, team_id, .con){
  query <- glue::glue_sql(
    "SELECT
        SUM(allocation_pct) as total_allocation
      FROM
        projects.time_sheet
      WHERE
        effective_date  = {effective_date}
        AND team_member = {team_id}",
    .con = .con)
  return(query)
}

get_allocation_project <- function(project_id, effective_date, team_id, .con){
  query <- glue::glue_sql(
    "SELECT
        SUM(allocation_pct) as total_allocation
      FROM
        projects.time_sheet
      WHERE
        project_id = {project_id} and 
        effective_date  = {effective_date}
        AND team_member = {team_id}",
    .con = .con)
  return(query)
}

insert_timesheet <- function(projectparent, effective_date, team_id, type, allocation_pct, .con) {
  query <- glue::glue_sql(
    "INSERT INTO projects.time_sheet (
              project_id, 
              effective_date, 
              team_member, 
              work_type, 
              allocation_pct)
              VALUES ({projectparent}, {effective_date}, {team_id}, {type}, {allocation_pct})",
    .con = .con)
  return(query)
}

update_timeentry <- function(project_id, effective_date, team_id, type, allocation_pct, .con){
  query <- glue::glue_sql(
    "UPDATE projects.time_sheet SET allocation_pct = {allocation_pct} WHERE project_id = {project_id} AND effective_date = {effective_date} AND team_member = {team_id} AND work_type = {type}",
    .con = .con)
  return(query)
}

delete_timeentry <- function(project_id, effective_date, team_id, type, .con){
  query <- glue::glue_sql(
    "DELETE from projects.time_sheet WHERE project_id = {project_id} AND effective_date = {effective_date} AND team_member = {team_id} AND work_type = {type}",
    .con = .con)
  return(query)
}

get_status <- function() {
  query <- "SELECT
              quant_dev_status as status 
            FROM 
              projects.status_basicinfo 
            ORDER BY 
              status ASC"
  return(query) 
}

get_team_lead <- function() {
  query <- "SELECT 
              team_name team_lead 
            FROM
              projects.team_basicinfo 
            ORDER BY
              team_name ASC"
  return(query) 
}

get_gwam_priority <- function(id = 0, .con) {
  if(id == 0){
    query <- "SELECT 
                goal_set_num AS gwam_priority_id, 
                goal_name AS gwam_priority 
              FROM
                projects.goal_basicinfo 
              WHERE
                goal_set = 'gwam_okr' 
              ORDER BY 
                goal_set_num ASC"
  } else {
    query <- glue::glue_sql(
      "SELECT 
        goal_name AS gwam_priority 
      FROM
        projects.goal_basicinfo 
      WHERE
        goal_set = 'gwam_okr' 
      AND goal_set_num = {id} 
      ORDER BY 
        goal_set_num ASC",
      .con = .con)
  }
  return(query) 
}

get_projects <- function(condition = 0) {
  if(condition == 0){
    query <- "SELECT
              project_id, 
              project_name 
            FROM 
              projects.project_basicinfo 
            order by 
              project_name asc"
  }else{
    query <- "SELECT
              project_id, 
              project_name 
            FROM 
              projects.project_basicinfo
            Where 
              actual_completion_date IS NULL 
            order by project_name asc"
  }
  return(query) 
}

get_sort_projects <- function() {
  query <- "SELECT
              project_id, 
              project_name 
            FROM 
              projects.project_basicinfo 
            ORDER 
              BY project_name ASC"
  return(query) 
}

get_employees <- function() {
  query <- "SELECT
              human_id as id, 
              concat(first_name, ' ', last_name) as full_name 
            FROM 
              projects.human_basicinfo hb
            WHERE
              first_name is not null
            ORDER BY 
              full_name ASC"
  return(query) 
}

get_initiative_type <- function() {
  query <- "SELECT 
              initiative_type 
            FROM  
              projects.initiative_type_basicinfo 
            ORDER BY 
              initiative_type ASC"
  return(query) 
}

get_priority <- function() {
  query <- "SELECT 
              priority 
            FROM 
              projects.priority_basicinfo 
            ORDER BY 
              CASE priority
                WHEN 'Low' THEN 1
                WHEN 'Medium' THEN 2
                WHEN 'High' THEN 3
                ELSE 4
              END"
  return(query) 
}

get_project_broad_domain <- function() {
  query <- "SELECT 
              project_broad_domain AS type 
            FROM 
              projects.project_type_basicinfo 
            ORDER BY 
              1 ASC"
  return(query) 
}

get_output_type <- function() {
  query <- "SELECT
              output_type
            From
              projects.output_type_basicinfo
            WHERE
              output_taxonomy = 'standard'
            order by
              output_type ASC"
  return(query) 
}

get_team_id <- function(user, .con) {
  query <- glue::glue_sql(
    "select
      id 
    from
      projects.implementer_basicinfo ib 
    where
      lan_id = {user}",
    .con = .con
  )
  return(query) 
}

get_full_name <- function(team_id, .con) {
  query <- glue::glue_sql(
    "SELECT
      CONCAT(first_name, ' ', last_name) AS full_name 
    FROM
      PROJECTS.human_basicinfo ib 
    WHERE
      human_id = {team_id}",
    .con = .con
  )
  return(query) 
}

get_timeentry_12_months <- function(team_id, .con) {
  twelve_months_ago <- format(Sys.Date() %m-% months(12), "%Y-%m-%d")
  query <- glue::glue_sql(
    "SELECT
      ts.effective_date, 
      pb.project_name, 
      ts.allocation_pct 
     FROM 
      projects.time_sheet ts
      INNER JOIN projects.project_basicinfo pb ON ts.project_id = pb.project_id
     WHERE 
      team_member = {team_id} 
      AND ts.effective_date >= {twelve_months_ago}",
    .con = .con
  )
  return(query) 
}

get_timesheet_data <- function(team_id, .con) {
  query <- glue::glue_sql(
    "SELECT
      ts.effective_date, 
      pb.project_name, 
      ts.allocation_pct 
     FROM 
      projects.time_sheet ts
      INNER JOIN projects.project_basicinfo pb ON ts.project_id = pb.project_id
     WHERE 
      team_member = {team_id}",
    .con = .con
  )
  return(query) 
}

get_time_entry_details <- function(team_id, .con) {
  query <- glue::glue_sql(
    "select vmpp.project_id, pb.project_name, ts.effective_date,  ts.allocation_pct,vmpp.implementer as project_owner 
    from projects.time_sheet ts 
    inner join projects.vw_main_project_people vmpp on ts.project_id = vmpp.project_id 
    inner join projects.project_basicinfo pb on vmpp.project_id = pb.project_id  
    where ts.team_member = {team_id} order by ts.effective_date desc;",
    .con = .con
  )
  return(query) 
}

# get_time_entry_one <- function(team_id) {
#   query <- paste0(
#     "select pb.project_name ",
#     "from projects.time_sheet ts ",
#     "inner join projects.vw_main_project_people vmpp on ts.project_id = vmpp.project_id ",
#     "inner join projects.project_basicinfo pb on vmpp.project_id = pb.project_id  ",
#     "where ts.team_member = ", team_id, " order by pb.project_name asc;"
#   )
#   return(query) 
# }

get_projects_details <- function(user, .con) {
  query <- glue::glue_sql(
    "WITH RECURSIVE EmployeeCTE AS (
      -- Base case: Select the supervisor
      SELECT
          id,
          first_name,
          last_name,
          direct_team,
          employee_id,
          immediate_supervisor_id,
          active,
          remote,
          lan_id,
          email
      FROM
          projects.implementer_basicinfo
      WHERE
          lan_id = {user} -- Assuming 'user@mfcgd.com' is the logged-in user's lan_id

      UNION ALL

      -- Recursive case: Select subordinates
      SELECT
          ibi.id,
          ibi.first_name,
          ibi.last_name,
          ibi.direct_team,
          ibi.employee_id,
          ibi.immediate_supervisor_id,
          ibi.active,
          ibi.remote,
          ibi.lan_id,
          ibi.email
      FROM
          projects.implementer_basicinfo ibi
      INNER JOIN
          EmployeeCTE ecte ON ibi.immediate_supervisor_id = ecte.id
    ),

    gwam_okr_set AS (
      SELECT goal_set_num AS gwam_priority_id, goal_name AS gwam_priority
      FROM projects.goal_basicinfo
      WHERE goal_set = 'gwam_okr'
      ORDER BY 1
    ),
    emp_requestor as (
    	select project_id, concat(hb.first_name, ' ', hb.last_name) as requestor 
    	from projects.project_human_map phm 
    	inner join projects.human_basicinfo hb on hb.human_id = phm.human_id 
    	and phm.role_type = 'requestor'
    )
    
      SELECT
        
        pbi.project_id,
        concat(ecte.first_name, ' ', ecte.last_name) as team_lead,
        req.requestor,        
        pbi.project_name,
        pbi.description,
        pbi.status,
        pbi.start_date,
        pbi.idea_date,
        pbi.estimated_completion_date,
        pbi.actual_completion_date,
        pbi.completion_pct,
        pbi.project_size_estimate,
        pbi.front_office_initiative,
        pbi.ultimate_output_system,
        gwam_okr_set.gwam_priority,
        pbi.initiative_type,
        pbi.digital_challenge,
        pbi.gen_ai_reporting,
        pbi.scope_complexity,
        pbi.type,
        pbi.notes,
        pbi.risk_review,
        pbi.compliance_review,
        pbi.model_review,
        pbi.client_team,
        pbi.tech_review,
        pbi.est_person_days,
        pbi.est_fte_alloc,
        pbi.generic_priority_bucket,
        pbi.effort_bucket,
        pbi.confluence_link,
        pbi.description_extended
    FROM
        projects.project_basicinfo pbi
    INNER join projects.project_human_map vmpp on pbi.project_id = vmpp.project_id 
    INNER JOIN EmployeeCTE ecte ON vmpp.human_id = ecte.id
    INNER JOIN gwam_okr_set ON pbi.gwam_priority_id = gwam_okr_set.gwam_priority_id
    left JOIN emp_requestor req on req.project_id = pbi.project_id 
    WHERE pbi.actual_completion_date is null and vmpp.role_type = 'implementer'",
    .con = .con
  )
  return(query)
}

get_completion_date_by_project_id <- function(project_id, .con) {
  query <- glue::glue_sql(
    "SELECT 
      actual_completion_date 
    FROM 
      projects.project_basicinfo 
    WHERE 
      project_id = {project_id}",
    .con = .con
  )
  return(query)
}


get_project_list <- function(user, .con) {
  query <- glue::glue_sql(
    "select distinct ib.project_id, concat(project_name,':     ',description) as project_name 
    from projects.project_basicinfo ib 
    inner join projects.vw_main_project_people vmpp on ib.project_id = vmpp.project_id 
    inner join projects.implementer_basicinfo ib2 on vmpp.lead_implementer_id = ib2.id 
    where ib2.lan_id = {user}",
    .con = .con
  )
  return(query)
}

get_project_list_admin <- function() {
  query <- "select distinct ib.project_id, concat(project_name,':     ',description) as project_name from projects.project_basicinfo ib"
  return(query)
}

get_new_projectid <- function() {
  query <- "SELECT max(project_id) + 1 as project_id FROM projects.project_basicinfo pb WHERE project_id != 9999"
  return(query)
}

get_new_projectid_temp <- function() {
  query <- "select case when project_id is null then 1 else project_id end project_id from (SELECT max(project_id) + 1 as project_id FROM projects.project_basicinfo_temp pb WHERE project_id != 9999) pj"
  return(query)
}

get_project_size <- function() {
  query <- "SELECT project_size, min_days, max_days FROM projects.project_size_basicinfo ORDER BY project_size ASC"
  return(query)
}

get_owner_name <- function(user, .con) {
  query <- glue::glue_sql(
    "select first_name from projects.implementer_basicinfo ib where lan_id = {user}",
    .con = .con
  )
  return(query)
}

get_team_by_user <- function(team_id, .con) {
  query <- glue::glue_sql(
    "select direct_team from projects.implementer_basicinfo ib where id = {team_id}",
    .con = .con
  )
  return(query)
}

get_email_by_user <- function(user, .con) {
  query <- glue::glue_sql(
    "select email from projects.implementer_basicinfo ib where lan_id = {user}",
    .con = .con
  )
  return(query)
}

get_email_by_id <- function(id_to_email, .con) {
  query <- glue::glue_sql(
    "select email from projects.human_basicinfo ib where human_id = {id_to_email}",
    .con = .con
  )
  return(query)
}

get_immediate_supervisor_id <- function(user, .con) {
  query <- glue::glue_sql(
    "select immediate_supervisor_id from projects.implementer_basicinfo ib where lan_id = {user}",
    .con = .con
  )
  return(query)
}

get_supervisor_email <- function(owner_supervisor_id, .con) {
  query <- glue::glue_sql(
    "select email from projects.implementer_basicinfo ib where id = {owner_supervisor_id}",
    .con = .con
  )
  return(query)
}

get_supervisor_flag <- function(user, .con) {
  query <- glue::glue_sql(
    #"select count(human_id) id_flag from projects.human_basicinfo hb where active = true and immediate_supervisor_id = (select human_id from projects.human_basicinfo hb2 where lan_id = {user})",
    "select sum(id_flag) as id_flag from (
    select count(human_id) id_flag from projects.human_basicinfo hb where active = true 
    and immediate_supervisor_id = (select human_id from projects.human_basicinfo hb2 where lan_id = {user})
    union 
    select count(human_id) id_flag from projects.human_basicinfo hb where active = true
    and hb.immediate_supervisor_id = 11 and human_id = (select human_id from projects.human_basicinfo hb2 where lan_id = {user})) x",
    .con = .con
  )
  return(query)
}

get_manage_flag <- function(user, .con) {
  query <- glue::glue_sql(
    "select count(human_id) id_flag from projects.human_basicinfo hb where active = true and immediate_supervisor_id = (select human_id from projects.human_basicinfo hb2 where lan_id = {user})",
    .con = .con
  )
  return(executeQuery(.con, query))
}

get_people <- function(user, .con) {
  query <- glue::glue_sql(
    "select human_id, concat(first_name, ' ', last_name) as name from projects.human_basicinfo hb where active = true and immediate_supervisor_id = (select human_id from projects.human_basicinfo hb2 where lan_id = {user}) order by concat(first_name, ' ', last_name) asc",
    .con = .con
  )
  return(query)
}

create_new_project <- function(project_id, project_name, description, status, start_date, estimated_completion_date, actual_completion_date, completion_pct, project_size_estimate, front_office_initiative, ultimate_output_system, gwam_priority_id, initiative_type, digital_challenge, scope_complexity, type, notes, risk_review, compliance_review, model_review, client_team, tech_review, idea_date, est_person_days, est_fte_alloc, gen_ai_reporting, generic_priority_bucket, effort_bucket, confluence_link, description_extended) {
  query <- paste0("INSERT INTO projects.project_basicinfo (
                  project_id, 
                  project_name, 
                  description, 
                  status, 
                  start_date, 
                  estimated_completion_date, 
                  actual_completion_date, 
                  completion_pct, 
                  project_size_estimate, 
                  front_office_initiative, 
                  ultimate_output_system, 
                  gwam_priority_id, 
                  initiative_type, 
                  digital_challenge, 
                  scope_complexity, 
                  type, 
                  notes, 
                  risk_review, 
                  compliance_review, 
                  model_review, 
                  client_team, 
                  tech_review,
                  idea_date,
                  est_person_days,
                  est_fte_alloc,
                  gen_ai_reporting,
                  generic_priority_bucket,
                  effort_bucket,
                  confluence_link,
                  description_extended) 
                  VALUES (", 
                  project_id,
                  project_name,
                  description,
                  status,
                  start_date,
                  estimated_completion_date,
                  actual_completion_date,
                  completion_pct,
                  project_size_estimate,
                  front_office_initiative,
                  ultimate_output_system,
                  gwam_priority_id,
                  initiative_type,
                  digital_challenge,
                  scope_complexity,
                  type,
                  notes,
                  risk_review,
                  compliance_review,
                  model_review,
                  client_team,
                  tech_review,
                  idea_date,
                  est_person_days,
                  est_fte_alloc,
                  gen_ai_reporting,
                  generic_priority_bucket,
                  effort_bucket,
                  confluence_link,
                  description_extended
                  ,")")
  return(query)
}

create_new_human_map <- function(project_id,human_id, role_type, role_level, role_pct, start_date, end_date, notes) {
  query <- paste0("INSERT INTO projects.project_human_map (
                  project_id, 
                  human_id,
                  role_type,
                  role_level,
                  role_pct,
                  start_date,
                  end_date,
                  notes) 
                  VALUES (", 
                  project_id,
                  human_id,
                  role_type,
                  role_level,
                  role_pct,
                  start_date,
                  end_date,
                  notes
                  ,")")
  return(query)
}

create_new_project_approval <- function(project_id, project_name, description, status, start_date, estimated_completion_date, actual_completion_date, completion_pct, project_size_estimate, front_office_initiative, ultimate_output_system, gwam_priority_id,  initiative_type, digital_challenge, scope_complexity, type, notes, risk_review, compliance_review, model_review, client_team, tech_review, idea_date, est_person_days, est_fte_alloc, gen_ai_reporting, generic_priority_bucket, effort_bucket, confluence_link, description_extended, created_project_user, implementer_project_user, requestor_user) {
  query <- paste0("INSERT INTO projects.project_basicinfo_temp (
                  project_id, 
                  project_name, 
                  description, 
                  status, 
                  start_date, 
                  estimated_completion_date, 
                  actual_completion_date, 
                  completion_pct, 
                  project_size_estimate, 
                  front_office_initiative, 
                  ultimate_output_system, 
                  gwam_priority_id, 
                  initiative_type, 
                  digital_challenge, 
                  scope_complexity, 
                  type, 
                  notes, 
                  risk_review, 
                  compliance_review, 
                  model_review, 
                  client_team, 
                  tech_review,
                  idea_date,
                  est_person_days,
                  est_fte_alloc,
                  gen_ai_reporting,
                  generic_priority_bucket,
                  effort_bucket,
                  confluence_link,
                  description_extended,
                  create_project_user,
                  implementer_project_user,
                  requestor_user) 
                  VALUES (", 
                  project_id,
                  project_name,
                  description,
                  status,
                  start_date,
                  estimated_completion_date,
                  actual_completion_date,
                  completion_pct,
                  project_size_estimate,
                  front_office_initiative,
                  ultimate_output_system,
                  gwam_priority_id,
                  initiative_type,
                  digital_challenge,
                  scope_complexity,
                  type,
                  notes,
                  risk_review,
                  compliance_review,
                  model_review,
                  client_team,
                  tech_review,
                  idea_date,
                  est_person_days,
                  est_fte_alloc,
                  gen_ai_reporting,
                  generic_priority_bucket,
                  effort_bucket,
                  confluence_link,
                  description_extended,
                  created_project_user,
                  implementer_project_user,
                  requestor_user
                  ,")")
  return(query)
}

get_field_tooltips <- function() {
  query <- "SELECT project_field, field_tooltip FROM projects.project_field_tooltips"
  return(query)
}

get_project_data <- function(project_id, .con){
  query <- glue::glue_sql(
    "SELECT pb.*, lead_implementer_id as impl_human_id, requestor_human_id as req_human_id
    FROM projects.project_basicinfo pb
    inner join projects.vw_main_project_people vmpp 
    on pb.project_id = vmpp.project_id 
    WHERE pb.project_id = {project_id}",
    .con = .con
  )
  return(query)
}

get_project_dt <- function(project_id, .con){
  query <- glue::glue_sql(
    "SELECT pb.*, lead_implementer_id as implementer, requestor_human_id as requestor
    FROM projects.project_basicinfo pb
    inner join projects.vw_main_project_people vmpp 
    on pb.project_id = vmpp.project_id 
    WHERE pb.project_id = {project_id}",
    .con = .con
  )
  return(query)
}

get_project_approval_data <- function(project_id = 0, new_project_id = 0, .con){
  if(project_id == 0){
    query <- "SELECT project_id, project_name, implementer_project_user, requestor_user FROM projects.project_basicinfo_temp"
  } else {
    query <- glue::glue_sql(
      "SELECT {new_project_id} as project_id, project_name, description, status, start_date, estimated_completion_date, 
      actual_completion_date, completion_pct, project_size_estimate, front_office_initiative, 
      ultimate_output_system, gwam_priority_id, initiative_type, digital_challenge, 
      scope_complexity, type, notes, risk_review, compliance_review, model_review, client_team, tech_review, idea_date, est_person_days, est_fte_alloc, gen_ai_reporting, generic_priority_bucket, effort_bucket,  confluence_link, description_extended
      FROM projects.project_basicinfo_temp WHERE project_id = {project_id}",
      .con = .con
    )
  }
  return(query)
}

get_project_temp_data <- function(list_of_names,level = 1){
  
  if(level == 0){
    query <- paste0("SELECT submission_status, requestor_user as requestor, implementer_project_user as implementer, project_id as project_temp_id, project_name, description, status, start_date, estimated_completion_date, 
                      actual_completion_date, completion_pct, project_size_estimate, front_office_initiative, 
                      ultimate_output_system, gwam_priority_id,  initiative_type, digital_challenge, 
                      scope_complexity, type, notes, risk_review, compliance_review, model_review, client_team, tech_review, idea_date, est_person_days, est_fte_alloc, gen_ai_reporting, generic_priority_bucket, effort_bucket,  confluence_link, description_extended
                    FROM projects.project_basicinfo_temp WHERE submission_status in ('Submitted','Rejected') and create_project_user IN (", list_of_names, ")")
    
  }else{
    query <- paste0("SELECT submission_status, requestor_user as requestor, implementer_project_user as implementer, project_id as project_temp_id, project_name, description, status, start_date, estimated_completion_date, 
                      actual_completion_date, completion_pct, project_size_estimate, front_office_initiative, 
                      ultimate_output_system, gwam_priority_id,  initiative_type, digital_challenge, 
                      scope_complexity, type, notes, risk_review, compliance_review, model_review, client_team, tech_review, idea_date, est_person_days, est_fte_alloc, gen_ai_reporting, generic_priority_bucket, effort_bucket,  confluence_link, description_extended
                    FROM projects.project_basicinfo_temp WHERE submission_status = 'Submitted' and create_project_user IN (", list_of_names, ")")
    
  }
    
  return(query)
}  
  
create_approved_project <- function(sel_query){
  
  query <- paste0("INSERT INTO projects.project_basicinfo ",sel_query)
 
  return(query) 
}



get_human_id_by_name <- function(name, .con){
  query <- glue::glue_sql(
    "SELECT human_id FROM projects.human_basicinfo WHERE concat(first_name, ' ', last_name) = {name}",
    .con = .con
  )
  return(query)
}

update_project_temp <- function(status, project_id, .con){
  query <- glue::glue_sql(
    "Update projects.project_basicinfo_temp SET submission_status = {status} where project_id = {project_id}",
    .con = .con
  )
  return(query)
}

delete_project_temp <- function(project_id, .con){
  query <- glue::glue_sql(
    "DELETE FROM projects.project_basicinfo_temp WHERE project_id = {project_id}",
    .con = .con
  )
  return(query)
}


upd_req_imp_proj <- function(req_imp, project_id, type, .con){
  query <- glue::glue_sql(
    "Update projects.project_human_map SET human_id = {req_imp} where role_type = {type} and project_id = {project_id}",
    .con = .con
  )
  return(query)
}

upd_project <- function(upd_project_name, upd_project_desc, upd_status, upd_start_date, upd_est_comp_dte, upd_act_comp_dte, upd_compl_pct,upd_project_size_est, upd_f_off_init, upd_ul_out_sys, upd_gwampriority, upd_init_type, upd_dig_chall, upd_scope_comp, upd_type, upd_risk_review, upd_compl_review, upd_model_review, upd_client_team, upd_tech_review, upd_est_per_days, upd_est_fte_alloc, upd_gen_ai_repo, upd_gen_prio_bkt, upd_effort_bkt, upd_confluence, upd_desc_ext, upd_project_id){
  query <- paste0("UPDATE projects.project_basicinfo SET ",
                        "project_name = ", upd_project_name,
                        "description = ", upd_project_desc,
                        "status = ", upd_status,
                        "start_date = ", upd_start_date,
                        "estimated_completion_date = ", upd_est_comp_dte,
                        "actual_completion_date = ", upd_act_comp_dte,
                        "completion_pct = ", upd_compl_pct,
                        "project_size_estimate = ", upd_project_size_est,
                        "front_office_initiative = ", upd_f_off_init,
                        "ultimate_output_system = ", upd_ul_out_sys,
                        "gwam_priority_id = ", upd_gwampriority,
                        "initiative_type = ", upd_init_type,
                        "digital_challenge = ", upd_dig_chall,
                        "scope_complexity = ", upd_scope_comp,
                        "type = ", upd_type,
                        "risk_review = ", upd_risk_review,
                        "compliance_review = ", upd_compl_review,
                        "model_review = ", upd_model_review,
                        "client_team = ", upd_client_team,
                        "tech_review = ", upd_tech_review,
                        "est_person_days = ", upd_est_per_days,
                        "est_fte_alloc = ", upd_est_fte_alloc,
                        "gen_ai_reporting = ", upd_gen_ai_repo,
                        "generic_priority_bucket = ", upd_gen_prio_bkt,
                        "effort_bucket = ", upd_effort_bkt,
                        "confluence_link = ", upd_confluence,
                        "description_extended = ", upd_desc_ext,
                        "WHERE project_id = ", upd_project_id)
  return(query)
}

get_locale_data <- function(){
  query <- "select locale_id, case when city is null then country else city end city from public.locale_basicinfo lb where locale_id <> 3 order by city"
  return(query)
}


save_log <- function(value, notes = "NULL",current_time, user = "anonymous", field = "ranking", project_id = 9999){
  query <- paste0("INSERT INTO projects.project_log (project_id, username, field,  new_value,timestamp, notes) VALUES (",
                  project_id, ", '", user, "', '", field, "','", value,"','",current_time,"',", notes,")")
  return(query)
}

get_projects_admin <- function(user, .con) {
  query <- glue::glue_sql(
    "select count(1) as x_rows 
    from
    	projects.vw_latest_human_team_link vlhtl
    	inner join projects.team_basicinfo tb on vlhtl.latest_team_id = tb.team_id 
    	inner join projects.human_basicinfo hbi on vlhtl.human_id = hbi.human_id 
    where tb.team_id = 5 and hbi.lan_id = {user}",
    .con = .con
  )
  return(query)
}


get_metrics <- function(){
  query <- " select metric Metric, metric_description as Description, metric_type as Type from projects.project_metric_basicinfo pmb order by metric asc"
  return(query)
}

get_metrics_type <- function(metric_id, .con){
  query <- glue::glue_sql(
    "select data_type as data_type from projects.project_metric_basicinfo where metric_id = {metric_id}",
    .con = .con
  )
  return(query)
}

get_metric_list <- function(){
  query <- "select metric_id, metric from projects.project_metric_basicinfo"
  return(query)
}



get_projects_metrics_user <- function(user, .con) {
  query <- glue::glue_sql(
    "WITH RECURSIVE EmployeeCTE AS (
      -- Base case: Select the supervisor
      SELECT
          id,
          first_name,
          last_name,
          direct_team,
          employee_id,
          immediate_supervisor_id,
          active,
          remote,
          lan_id,
          email
      FROM
          projects.implementer_basicinfo
      WHERE
          lan_id = {user} -- Assuming 'user@mfcgd.com' is the logged-in user's lan_id

      UNION ALL

      -- Recursive case: Select subordinates
      SELECT
          ibi.id,
          ibi.first_name,
          ibi.last_name,
          ibi.direct_team,
          ibi.employee_id,
          ibi.immediate_supervisor_id,
          ibi.active,
          ibi.remote,
          ibi.lan_id,
          ibi.email
      FROM
          projects.implementer_basicinfo ibi
      INNER JOIN
          EmployeeCTE ecte ON ibi.immediate_supervisor_id = ecte.id
    ),

    gwam_okr_set AS (
      SELECT goal_set_num AS gwam_priority_id, goal_name AS gwam_priority
      FROM projects.goal_basicinfo
      WHERE goal_set = 'gwam_okr'
      ORDER BY 1
    ),
    emp_requestor as (
    	select project_id, concat(hb.first_name, ' ', hb.last_name) as requestor 
    	from projects.project_human_map phm 
    	inner join projects.human_basicinfo hb on hb.human_id = phm.human_id 
    	and phm.role_type = 'requestor'
    )
    
      SELECT
        distinct
        pbi.project_id,
        pbi.project_name
    FROM
        projects.project_basicinfo pbi
    INNER join projects.project_human_map vmpp on pbi.project_id = vmpp.project_id 
    INNER JOIN EmployeeCTE ecte ON vmpp.human_id = ecte.id
    INNER JOIN gwam_okr_set ON pbi.gwam_priority_id = gwam_okr_set.gwam_priority_id
    left JOIN emp_requestor req on req.project_id = pbi.project_id 
    WHERE pbi.actual_completion_date is null and vmpp.role_type = 'implementer'
    Order by pbi.project_name ASC",
    .con = .con
  )
  return(query)
}

get_scaling_list <- function() {
  query <- "select frequency from projects.project_scaling_basicinfo psb"
  return(query)
}

#####################################
##     Dashboard Count Queries     ##
#####################################

get_active_projects_count <- function(user, .con) {
  query <- glue::glue_sql(
    "SELECT COUNT(ib.project_id) AS count FROM projects.project_basicinfo ib inner join projects.vw_main_project_people vmpp on ib.project_id = vmpp.project_id inner join projects.implementer_basicinfo ib2 on vmpp.lead_implementer_id = ib2.id where ib2.lan_id = {user}",
    .con = .con
  )
  return(query)
}

get_in_progress_projects_count <- function(user, .con) {
  query <- glue::glue_sql(
    "SELECT COUNT(ib.project_id) AS count FROM projects.project_basicinfo ib inner join projects.vw_main_project_people vmpp on ib.project_id = vmpp.project_id inner join projects.implementer_basicinfo ib2 on vmpp.lead_implementer_id = ib2.id where ib.actual_completion_date IS NULL and ib2.lan_id = {user}",
    .con = .con
  )
  return(query)
}

get_completed_projects_count <- function(user, .con) {
  query <- glue::glue_sql(
    "SELECT COUNT(ib.project_id) AS count FROM projects.project_basicinfo ib inner join projects.vw_main_project_people vmpp on ib.project_id = vmpp.project_id inner join projects.implementer_basicinfo ib2 on vmpp.lead_implementer_id = ib2.id where ib.actual_completion_date IS not NULL and ib2.lan_id = {user}",
    .con = .con
  )
  return(query)
}

get_project_status_summary <- function(user, .con) {
  # This query summarizes statuses for active projects, good for a pie chart.
  query <- glue::glue_sql(
    "SELECT status, COUNT(ib.project_id) AS count FROM projects.project_basicinfo ib inner join projects.vw_main_project_people vmpp on ib.project_id = vmpp.project_id inner join projects.implementer_basicinfo ib2 on vmpp.lead_implementer_id = ib2.id WHERE ib.actual_completion_date IS NULL and ib2.lan_id = {user} GROUP BY ib.status ORDER BY ib.status",
    .con = .con
  )
  return(query)
}

get_recent_total_allocation_per_active_project <- function(user, .con) {
  one_month_ago <- format(Sys.Date() %m-% months(1), "%Y-%m-%d")
  query <- glue::glue_sql(
    "SELECT
      pb.project_name,
      SUM(ts.allocation_pct) AS total_allocation_sum
    FROM
      projects.time_sheet ts
    INNER JOIN
      projects.project_basicinfo pb ON ts.project_id = pb.project_id
    inner join
      projects.vw_main_project_people vmpp on pb.project_id = vmpp.project_id 
    inner join
      projects.implementer_basicinfo ib2 on vmpp.lead_implementer_id = ib2.id
    WHERE
      pb.actual_completion_date IS NULL -- Only active projects
      AND ts.effective_date >= {one_month_ago} -- Only last 1 month
      and ib2.lan_id = {user} 
    GROUP BY
      pb.project_name
    HAVING
      SUM(ts.allocation_pct) > 0 -- Only projects with some allocation in the period
    ORDER BY
      total_allocation_sum DESC;",
    .con = .con
  )
  return(query)
}

get_project_metrics_by_project_id <- function(project_id, .con) {
  query <- glue::glue_sql(
    "SELECT pm.project_id, pbi.project_name, pmb.metric AS metric_name, pm.metric_value,
            hb_attestor.first_name || ' ' || hb_attestor.last_name AS attestor_name, 
            hb_beneficiary.first_name || ' ' || hb_beneficiary.last_name AS beneficiary_name,
            pm.frequency, pm.notes, pm.currency, pm.metric_start_date, pm.metric_end_date, 
            pm.status, pm.conviction, pm.scaling_override, pm.beneficiary_id, pm.attestor_id, pm.metric_id 
     FROM projects.project_metrics pm
     JOIN projects.project_basicinfo pbi ON pm.project_id = pbi.project_id
     JOIN projects.project_metric_basicinfo pmb ON pm.metric_id = pmb.metric_id
     JOIN projects.human_basicinfo hb_attestor ON pm.attestor_id = hb_attestor.human_id
     LEFT JOIN projects.human_basicinfo hb_beneficiary ON pm.beneficiary_id = hb_beneficiary.human_id
     WHERE pm.project_id = {as.integer(project_id)}
     ORDER BY pmb.metric, pm.metric_start_date DESC",
    .con = .con
  )
  return(query)
}

get_project_staff <- function(project_id, .con) {
  query <- glue::glue_sql(
    "SELECT 
      phm.human_id, 
      CONCAT(hb.first_name, ' ', hb.last_name) as Name,
      phm.role_type as Role,
      phm.role_level as Level
    FROM projects.project_human_map phm
    JOIN projects.human_basicinfo hb ON phm.human_id = hb.human_id
    WHERE phm.project_id = {project_id} AND phm.end_date IS NULL
    ORDER BY phm.role_level, name",
    .con = .con
  )
  return(executeQuery(.con, query))
}

update_person_role <- function(project_id, human_id, new_role_level = NULL, end_date = NULL, role_type = NULL, .con) {
  
  set_clauses <- c()
  
  if (!is.null(new_role_level)) {
    set_clauses <- c(set_clauses, as.character(glue::glue_sql("role_level = {new_role_level}", .con = .con)))
  }
  if (!is.null(role_type)) {
    set_clauses <- c(set_clauses, as.character(glue::glue_sql("role_type = {role_type}", .con = .con)))
  }
  if (!is.null(end_date)) {
    set_clauses <- c(set_clauses, as.character(glue::glue_sql("end_date = {end_date}", .con = .con)))
  }
  
  if (length(set_clauses) == 0) {
    return(NULL) 
  }
  
  set_statement <- paste(set_clauses, collapse = ", ")

  base_query <- sprintf("UPDATE projects.project_human_map SET %s WHERE project_id = ? AND human_id = ? AND end_date IS NULL", set_statement)
  
  query <- DBI::sqlInterpolate(.con, base_query, project_id, human_id)
  
  return(as.character(query))
}

remove_person_from_project <- function(project_id, human_id, end_date, .con) {
  query <- glue::glue_sql(
    "UPDATE projects.project_human_map 
     SET role_level = 99, end_date = {end_date}
     WHERE project_id = {project_id} AND human_id = {human_id} AND end_date IS NULL",
    .con = .con
  )
  return(query)
}

add_person_to_project <- function(project_id, human_id, role_type, role_level, start_date, .con) {
  query <- glue::glue_sql(
    "INSERT INTO projects.project_human_map (project_id, human_id, role_type, role_level, start_date)
     VALUES ({project_id}, {human_id}, {role_type}, {role_level}, {start_date})",
    .con = .con
  )
  return(query)
}


# Define the UI for the Shiny dashboard
ui <- dashboardPage(
  dashboardHeader(
    title = "IA&D", 
    tags$li(
      class = "dropdown", 
      actionLink("greetUser", textOutput("greeting"), icon = icon("user"))
    )
  ),
  dashboardSidebar(
    sidebarMenu(
      id = "id_sidebarMenu",
      menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")), 
      menuItem("Assistant", tabName = "assistant", icon = icon("robot")),
      menuItem("Project - Time", tabName = "projecttracker", icon = icon("th")),
      menuItem("My TimeSheet", tabName = "personaltime", icon = icon("clock")),
      menuItem("Power BI Report", tabName = "powerbi", icon = icon("chart-bar")),
      menuItem("Q&A", tabName = "qa_feedback", icon = icon("comments"))
      #menuItem("Quant-form", tabName = "quantform", icon = icon("file-alt"))
    )
  ),
  dashboardBody(
    useShinyjs(),  # Initialize shinyjs
    tags$head(
      tags$link(
        rel = "stylesheet",
        href = "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css",
        integrity = "sha512-dNmIQnCxHuCw5J3Kk2CX6vS65i6J3rV2UjDfk6dBYdbKKLOooqH4qRKWZdj5F39c2bp3xlL/RhnP4xN1qgBO0A==",
        crossorigin = "anonymous"
      ),
      tags$style(HTML(customCSS)),
      tags$style(HTML("
      .custom-button {
        background-color: #4CAF50;
        border: none;
        color: white;
        padding: 10px 22px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 12px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 12px;
        transition-duration: 0.4s;
      }
      .custom-button:hover {
        background-color: white;
        color: black;
        border: 2px solid #4CAF50;
      }
      .custom-clear-button {
        background-color: #4CAF50;
        border: none;
        color: white;
        padding: 10px 22px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 12px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 12px;
        transition-duration: 0.4s;
      }
      .custom-combobox {
        border-radius: 12px;
        padding: 5px;
      }
      .custom-combobox:hover {
        border-color: #bcbcbc;
      }
      .custom-textbox {
        border-radius: 12px;
        padding: 5px;
      }
      .custom-textbox:focus {
        border-color: #bcbcbc;
        outline: none;
      }
      .custom-box {
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        background-color: white;
        border: 1px solid #ccc;
      }
      .custom-modal .modal-content {
        border-radius: 15px;
        padding: 15px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
      }
      .custom-modal .modal-header,
      .custom-modal .modal-footer {
        border: none;
        background-color: #f7f7f7;
      }
      .custom-modal .modal-title {
        font-size: 1.5em;
      }
      .quant-form-label {
        font-weight: bold;
        color: #333;
      }
      .quant-form-input {
        margin-bottom: 15px;
      }
      /* Feedback panel styling */
      #feedback-panel {
        position: fixed;
        top: 20%;
        right: -350px;
        width: 300px;
        background: #f9f9f9;
        border: 1px solid #ccc;
        padding: 15px;
        box-shadow: 2px 2px 5px rgba(0,0,0,0.3);
        transition: right 0.4s ease;
        z-index: 1000;
      }
      #feedback-panel.show {
        right: 20px;
      }
      /* --- Chat Styles --- */
      .chat-container {
        height: 70vh;
        display: flex;
        flex-direction: column;
        border: 1px solid #ccc;
        border-radius: 10px;
        overflow: hidden;
      }
      .chat-history {
        display: flex;
        flex-direction: column;
        gap: 6px;
        padding: 12px;
        background: #f9f9f9;
        height: 60vh;
        overflow-y: auto;
      }
      .chat-message {
        margin-bottom: 15px;
        padding: 10px 15px;
        border-radius: 18px;
        max-width: 75%;
        word-wrap: break-word;
        line-height: 1.4;
        display: flex;
        flex-direction: row;
      }
      .bot-message {
        background-color: #e9e9eb;
        color: #222;
        align-self: flex-start;
        border-radius: 18px 18px 2px 18px;
        max-width: 70%;
        padding: 10px 16px;
        word-break: break-word;
        justify-content: flex-start;
      }
      .user-message {
        background-color: #007bff;
        color: #fff;
        align-self: flex-end;
        border-radius: 18px 18px 18px 2px;
        max-width: 70%;
        padding: 10px 16px;
        word-break: break-word;
        text-align: right;
        justify-content: flex-end;
      }
      .chat-input-area {
        padding: 10px;
        border-top: 1px solid #ccc;
        background-color: #fff;
      }
      .chat-buttons .btn {
        margin: 5px;
      }
    ")),
      tags$script(HTML('
        // JavaScript to show alert if allocation_pct is out of range
        $(document).on("shiny:inputchanged", function(event) {
          if (event.name === "allocation_pct") {
            var value = parseFloat(event.value);
            if (value < 0 || value > 1) {
              alert("Allocation (decimal) must be between 0 and 1.");
              Shiny.setInputValue("allocation_pct", Math.max(0, Math.min(1, value)), {priority: "event"});
            }
          }
        });

      '))
    ),
    disconnectMessage(
      text = "Your session has been disconnected due to an internal error. Please refresh the page. If the issue persists, contact the Digital Enablement team.",
      refresh = "Refresh here",
      background = "#282B3E",
      colour = "white",
      overlayColour = "gray",
      overlayOpacity = 0.75,
      top = "center",
      size = 22,
      refreshColour = "white"
    ),
    # conditionalPanel(
    #   condition = "output.maintenance_mode == true",
    #   tags$div(
    #     style = "text-align: center; padding: 50px;",
    #     tags$img(src = "https://media.istockphoto.com/id/1348157796/vector/website-under-construction-page-web-page-under-construction-website-under-maintenance-page.jpg?s=612x612&w=0&k=20&c=vJCWlc0t7pZY3b41LciyKsXQAtcDlMqzq2M7zOsl5rI=", alt = "Site Under Maintenance", style = "max-width: 100%; height: auto;")
    #   )
    # ),
    conditionalPanel(
      condition = "input.id_sidebarMenu == 'dashboard'",
      tabItem(
        tabName = "dashboard",
        fluidRow(
          box(
            title = "Overview Dashboard",
            status = "success",
            solidHeader = TRUE,
            width = 12,
            # Add valueBoxes or infoBoxes here
            fluidRow(
              valueBoxOutput("totalProjectsBox"),
              valueBoxOutput("projectsInProgressBox"),
              valueBoxOutput("completedProjectsBox")
            ),
            # Add charts or other summary elements
            fluidRow(
              box(
                title = "Projects by Status",
                status = "success",
                solidHeader = TRUE,
                width = 6,
                shinycssloaders::withSpinner(
                  plotOutput("projectStatusPieChart")
                )
              ),
              box(
                title = "Project Allocation (Last Month)",
                status = "success",
                solidHeader = TRUE,
                width = 6, # Adjusted width
                shinycssloaders::withSpinner(
                  plotOutput("projectAllocationBarChart")
                )
              )
              # Potentially more charts/summaries
            )
          )
        )
      )
    ),
    conditionalPanel(
      condition = "input.id_sidebarMenu == 'assistant'",
      tabItem(
        tabName = "assistant",
        fluidRow(
          column(
            width = 5,
            box(
              title = "IA&D Project Tracker Assistant (Preview)",
              status = "success",
              solidHeader = TRUE,
              width = NULL,
              uiOutput("chat_ui")
            )
          ),
          column(
            width = 7,
            box(
              title = "Assistant Help & Insights",
              status = "success",
              solidHeader = TRUE,
              width = NULL,
              uiOutput("assistant_right_panel")
            )
          )
        )
      )
    ),conditionalPanel(
  condition = "input.id_sidebarMenu == 'powerbi'",
  tabItem(
    tabName = "powerbi",
    fluidRow(
      box(
        title = "Power BI",
        status = "success",
        solidHeader = TRUE,
        width = 12,
        # Replace the src with your Power BI report's public embed URL
        tags$iframe(
          src = "https://app.powerbi.com/reportEmbed?reportId=918aacf8-b792-4b44-8df2-e6a18d6198f9&autoAuth=true&ctid=5d3e2773-e07f-4432-a630-1a0f68a28a05",
          width = "100%",
          height = "800px", # Adjust height as needed
          frameborder = "0",
          allowfullscreen = "true"
        )
      )
    )
  )
),
    
    conditionalPanel(
      condition = "input.id_sidebarMenu == 'projecttracker'",
      tabItem(
        tabName = "projecttracker",
        fluidRow(
          class = "custom-fluid-row",  # Apply custom CSS class
          box(
            title = "IA&D Project Tracker",
            status = "success",
            solidHeader = TRUE,
            width = 12,
            tabsetPanel(
              id = 'tabset',
              tabPanel(
                title = "Time Entry",
                fluidRow(
                  column(
                    width = 6,
                    box(
                      width = 12,
                      uiOutput("time")
                    )
                  ),
                  column(
                    width = 6,
                    box(
                      width = 12,
                      shinycssloaders::withSpinner(
                        plotlyOutput("time_bar_chart")
                      )
                      
                    )
                  )
                )
              ),
              tabPanel(
                title = "Project Entry",
                fluidRow(
                  class = "custom-fluid-row",  # Apply custom CSS class
                  box(
                    width = 12,
                    uiOutput("newproject")
                  )
                )
              ),
              tabPanel(
                title = "Project Update",
                fluidRow(
                  class = "custom-fluid-row",  # Apply custom CSS class
                  box(
                    width = 12,
                    uiOutput("updateproject")
                  )
                )
              ),
              tabPanel(
                title = "Project Notes",
                fluidRow(
                  class = "custom-fluid-row",  # Apply custom CSS class
                  box(
                    width = 12,
                    uiOutput("projectnotes")
                  )
                )
              ),
              tabPanel(
                title = "Project Metrics",
                fluidRow(
                  class = "custom-fluid-row",  # Apply custom CSS class
                  box(
                    width = 12,
                    uiOutput("metrics")
                  )
                )
              ),
              tabPanel(
                title = "Project for Approval",
                fluidRow(
                  class = "custom-fluid-row",
                  box(
                    # title = "Project for Approval",
                    # status = "success",
                    # solidHeader = TRUE,
                    width = 12,
                    DT::dataTableOutput("approvalproject"),
                    actionButton("approval", "Approve Project", icon = icon("plus"))
                  )
                )
              ),
              tabPanel(
                title = "Submitted Project",
                fluidRow(
                  class = "custom-fluid-row",
                  box(
                    # title = "Submitted Project",
                    # status = "success",
                    # solidHeader = TRUE,
                    width = 12,
                    DT::dataTableOutput("submittedproject"),
                    actionButton("deletesubmission", "Delete Project", icon = icon("plus"))
                  )
                )
              )
            )
          )
        ),
        fluidRow(
          class = "custom-fluid-row",  # Apply custom CSS class
          box(
            title = "My Projects",
            status = "success",
            solidHeader = TRUE,
            width = 12,
            DT::dataTableOutput("PJ")
          )
        )
      )
    ),
    conditionalPanel(
      condition = "input.id_sidebarMenu == 'personaltime'",
      tabItem(
        tabName = "personaltime",
        fluidRow(
          box(
            title = "My TimeSheet",
            status = "success",
            solidHeader = TRUE,
            width = 12,
            DT::dataTableOutput("time_saved_details")
            # ,
            # br(),
            # # Add selectInput for project filtering
            # selectInput("project_filter", "Select Project", 
            #             choices = executeQuery(con,get_time_entry_one(team_id)), 
            #             selected = "All", 
            #             width = "100%"),
            # br(),
            # plotOutput("allocationPlot")
          )
        )
      )
    ),

  
conditionalPanel(
  condition = "input.id_sidebarMenu == 'quantform'",
  tabItem(
    tabName = "Intake Assessment Form",
    fluidRow(
      box(
        title = "AI / Quant Refinement Form",
        status = "success",
        solidHeader = TRUE,
        width = 12,
        tabPanel(
          title = "Quant Refinement Form",
          fluidRow(
            class = "custom-fluid-row",  # Apply custom CSS class
            box(
              width = 12,
              uiOutput("intakeform")
            )
          )
        )
        # fluidRow(
        #   column(
        #     width = 6,
        #     div(
        #       class = "quant-form-input",
        #       textInput("project_name", "Project Name*", placeholder = "Enter project name")
        #     ),
        #     div(
        #       class = "quant-form-input",
        #       textInput("team", "Team*", placeholder = "Enter team name")
        #     ),
        #     div(
        #       class = "quant-form-input",
        #       textInput("group", "Group*", placeholder = "Enter group name")
        #     ),
        #     div(
        #       class = "quant-form-input",
        #       textInput("requestor", "Requestor*", placeholder = "Enter requestor name")
        #     ),
        #     div(
        #       class = "quant-form-input",
        #       textAreaInput("description", "Description*", placeholder = "What is the problem statement, business value?", rows = 3)
        #     )
        #   ),
        #   column(
        #     width = 6,
        #     div(
        #       class = "quant-form-input",
        #       textInput("size", "Size*", placeholder = "Enter size")
        #     ),
        #     div(
        #       class = "quant-form-input",
        #       dateInput("start_date", "Start Date*", value = Sys.Date())
        #     ),
        #     div(
        #       class = "quant-form-input",
        #       textInput("lead", "Lead*", placeholder = "Enter lead name")
        #     ),
        #     div(
        #       class = "quant-form-input",
        #       selectInput("project_type", "Project Type*", choices = c("Data", "Model", "EUC", "Other"))
        #     ),
        #     div(
        #       class = "quant-form-input",
        #       selectInput("risk_model", "Risk Model and Compliance Review Required*", choices = c("Yes", "No"))
        #     )
        #   )
        # ),
        # actionButton("submit_quant_form", "Submit", class = "custom-button")
      )
    )
  )
),
conditionalPanel(
  condition = "input.id_sidebarMenu == 'qa_feedback'",
  tabItem(
    tabName = "qa_feedback",
    fluidRow(
      box(
        title = "Q&A",
        status = "success",
        solidHeader = TRUE,
        width = 12,
        h3("Time Entry Module"),
        p(tags$b("Q: How do I insert data into the time tracking system?")),
        p("A: To insert data into the time tracking system, navigate to the 'IA&D Project Tracker' section under the 'Project - Time' tab and follow these steps:"),
        tags$ol(
          tags$li("Project Name: Select the project name from the list of projects created by the entire team."),
          tags$li("Effective Date: Choose the effective date, which defaults to the end of the previous month. If you missed filling in another month, you can select a different month."),
          #              tags$li("Work Type: Specify the type of work, such as development, support, etc."),
          tags$li("Allocation: Enter the allocation in decimal form. Ensure that the total allocation for each month sums up to 100%.")
        ),
        p("After filling in the required fields, click 'Insert' to add your entry."),
        p(tags$b("Q: Can I edit or delete my entries?")),
        p("A: Yes, you can edit or delete your entries. To do so, navigate to the 'My TimeSheet' tab, where you can find the information you previously created. After reviewing the information, go back to the 'IA&D Project Tracker' section and choose the same values to edit or remove that information. Click 'update' or 'delete' to make the necessary changes."),
        h3("Project Entry Module"),
        p(tags$b("Q: How can I create a new project?")),
        p("A: You can create a new project under the Project Entry tab, and add notes for the project under the Project Notes tab. For any questions or additional help, please contact the Digital Enablement team.")
      )
    )
    
  )
),

fluidPage(
  useShinyjs(),
  tags$head(
    tags$style(HTML("
    
      /* Feedback panel styling */
      #feedback-panel {
        position: fixed;
        top: 20%;
        right: -350px; /* hidden by default */
        width: 300px;
        background: #f9f9f9;
        border: 1px solid #ccc;
        padding: 15px;
        box-shadow: 2px 2px 5px rgba(0,0,0,0.3);
        transition: right 0.4s ease;
        z-index: 1000;
      }
      #feedback-panel.show {
        right: 20px;
      }
    "))
  ),
  div(
   style = "position: fixed; left: 0px; top: 80%; transform: translateY(-50%) ; z-index: 1050;",
   actionButton("open_feedback", "Give Project Tracker Feedback")
  ),
  div(
   id = "feedback-panel",
   style = "text-align: center;",
   h4("How was your experience?"),
   shinyRatings("star", no_of_stars = 5, default = 5),
   textAreaInput("feedback_comment", "Comments (optional)", "", placeholder = "Type your comments here..."),
   actionButton("submit_feedback", "Submit anonymous feedback"),
   actionButton("close_feedback", label = "Skip")
  )

)
,
    tags$footer(
      style = "text-align: center; padding: 10px; background-color: #282B3E; color: white;",
      "For any questions or issues, please contact the Digital Enablement team at ",
      tags$a(href = "mailto:digital_enablement@manulife.com", "digital_enablement@manulife.com"),
      "."
    )
  )
)


# Define the directory for source files
rcc_code_dir <- ifelse(Sys.getenv("RCC_CODE") != "", Sys.getenv("RCC_CODE"), "P:")
source_dir <- file.path(rcc_code_dir, "qd_main", "R")
source_log <- paste0(mamHelpers::get_working_dir(), "Reporting_enablement/Projects/Project Tracker/Log/")


# Source required R scripts
source(file.path(source_dir, "get_data_helpers.R"))
source("queries.R")

########################################################################################
##                                      Libraries                                     ## 
########################################################################################

library(shinydashboard)  # For creating dashboards in Shiny
library(DBI)             # For database interface operations
library(dplyr)           # For data manipulation and transformation
library(DT)              # For rendering interactive data tables
library(shinyWidgets)    # For additional Shiny UI widgets
library(dbHelpers)       # Custom helper functions for database operations
library(mamHelpers)      # Custom helper functions specific to the project
library(shinyjs)         # For enhancing Shiny apps with JavaScript functionality
library(odbc)            # For ODBC database connectivity
library(lubridate)       # For date and time manipulation
library(shinyalert)      # For displaying alert messages in Shiny apps
library(plotly)          # For creating interactive plots
library(ggplot2)         # For static plot creation
library(jsonlite)        # For JSON parsing and generation
library(sendmailR)       # For sending emails from R
library(rJava)           # For interfacing with Java from R
library(shinydisconnect) # For handling Shiny disconnects gracefully
library(shinyRatings)    # For displaying star ratings in Shiny apps
library(httr)
#library(tidyr)           # For data tidying and reshaping


########################################################################################
##                                    DB Connection                                   ## 
########################################################################################

# Function to safely connect to a PostgreSQL database
dbConnectSafe <- function(conn_id) {
  tryCatch({
    dbHelpers::db_conn(conn_id = conn_id)
  }, error = function(e) {
    error_message <- paste("Error connecting to PostgreSQL database:\n\n", e$message)
    shinyalert::shinyalert(
      title = "Error",
      text = error_message,
      type = "error"
    )
    NULL
  })
}

# Function to safely execute database queries
executeQuery <- function(con, query) {
  tryCatch({
    if (grepl("^SELECT", query, ignore.case = TRUE)) {
      dbGetQuery(con, query)
    } else {
      dbExecute(con, query)
    }
  }, error = function(e) {
    error_message <- paste("Error executing query:\n\n", e$message)
    shinyalert::shinyalert(
      title = "Error",
      text = error_message,
      type = "error"
    )
    NULL
  })
}

con <- dbConnectSafe(conn_id = "ericmart")


########################################################################################
##                               Variables and Functions                              ##
########################################################################################

include <- c("FALSE", "TRUE")

# Generate end-of-month dates for the past 12 months
get_end_of_month_dates <- function() {
  start_date <- as.Date(format(Sys.Date(), "%Y-%m-01"))
  dates <- seq.Date(from = start_date, by = "-1 month", length.out = 12)
  end_of_month_dates <- as.Date(format(dates, "%Y-%m-01")) + months(1) - days(1)
  format(end_of_month_dates, "%Y-%m-%d")
}

########################################################################################
##                            Project Management Sources                              ##
########################################################################################

fetch_dropdown_data <- function(con, query, default_option) {
  data <- executeQuery(con, query)
  rbind(default_option, data)
}

# Default options for dropdowns
choose_ds_status          <- data.frame(status = "Choose")
choose_ds_team_led        <- data.frame(team_lead = "Choose")
choose_ds_project_size    <- data.frame(project_size = "Choose", min_days = 0, max_days = 0)
choose_ds_initiative_type <- data.frame(initiative_type = "Choose")
choose_ds_priority        <- data.frame(priority = "Choose")
choose_ds_type            <- data.frame(type = "Choose")
choose_ds_output_type     <- data.frame(output_type = "Choose")
choose_ds_work_type       <- data.frame(work_type = "Choose")
choose_ds_scaling         <- data.frame(frequency = "Choose")

datapj_status_query       <- get_status()
datapj_status             <- fetch_dropdown_data(con, datapj_status_query, choose_ds_status)

datapj_team_lead_query    <- get_team_lead()
datapj_team_lead          <- fetch_dropdown_data(con, datapj_team_lead_query, choose_ds_team_led)

datapj_initiative_query   <- get_initiative_type()
datapj_initiative_type    <- fetch_dropdown_data(con, datapj_initiative_query, choose_ds_initiative_type)

datapj_priority_query     <- get_priority()
datapj_priority           <- fetch_dropdown_data(con, datapj_priority_query, choose_ds_priority)

datapj_type_query         <- get_project_broad_domain()
datapj_type               <- fetch_dropdown_data(con, datapj_type_query, choose_ds_type)

datapj_output_type_query  <- get_output_type()
datapj_output_type        <- fetch_dropdown_data(con, datapj_output_type_query, choose_ds_output_type)

datapj_project_size_query <- get_project_size()
datapj_project_size_val   <- fetch_dropdown_data(con, datapj_project_size_query, choose_ds_project_size)

ds_gwam_priority_query    <- get_gwam_priority()
ds_gwam_priority          <- executeQuery(con,ds_gwam_priority_query)
datapj_gwampriority       <- setNames(as.list(ds_gwam_priority$gwam_priority_id), ds_gwam_priority$gwam_priority)
datapj_gwampriority       <- c("Choose" = 0, datapj_gwampriority)

ds_projectparent_query    <- get_sort_projects()
ds_projectparent          <- executeQuery(con, ds_projectparent_query)
datapj_projectparent      <- setNames(as.list(ds_projectparent$project_id), ds_projectparent$project_name)
datapj_projectparent      <- c("Choose" = 0, datapj_projectparent)

ds_employee_query         <- get_employees()
ds_employee               <- executeQuery(con, ds_employee_query)
datapj_employee           <- setNames(as.list(ds_employee$id), ds_employee$full_name)
datapj_employee           <- c("Choose" = 0, datapj_employee)

ds_locale_query           <- get_locale_data()
ds_locale                 <- executeQuery(con, ds_locale_query)
datapj_locale             <- setNames(as.list(ds_locale$locale_id), ds_locale$city)
datapj_locale             <- c("Choose" = 0, datapj_locale)


list_of_projects          <- get_projects()

tooltips_data             <- dbGetQuery(con, get_field_tooltips())
tooltip_map               <- setNames(tooltips_data$field_tooltip, tooltips_data$project_field)

ds_metric_query           <- get_metric_list()
ds_metric                 <- executeQuery(con, ds_metric_query)
datapj_metric             <- setNames(as.list(ds_metric$metric_id), ds_metric$metric)
datapj_metric             <- c("Choose" = 0, datapj_metric)

ds_scaling_query          <- get_scaling_list()
ds_scaling                <- fetch_dropdown_data(con, ds_scaling_query, choose_ds_scaling)



########################################################################################
##                                   IA&D TRACKER CSS                                 ##
########################################################################################


customCSS <- "
/* Header and logo background color */
.skin-blue .main-header .navbar {
  background-color: #282B3E;
}
.skin-blue .main-header .logo {
  background-color: #282B3E;
}

/* Sidebar background color */
.skin-blue .main-sidebar {
  background-color: #282B3E;
}

/* Sidebar menu item background color */
.skin-blue .main-sidebar .sidebar-menu > li.active > a,
.skin-blue .main-sidebar .sidebar-menu > li:hover > a {
  background-color: #3c3f58;
}

/* Sidebar menu item text color */
.skin-blue .main-sidebar .sidebar-menu > li > a {
  color: #ffffff;
}

/* Sidebar menu item icon color */
.skin-blue .main-sidebar .sidebar-menu > li > a > .fa {
  color: #ffffff;
}

/* Sidebar menu item hover text color */
.skin-blue .main-sidebar .sidebar-menu > li:hover > a {
  color: #ffffff;
}

/* Sidebar menu item hover icon color */
.skin-blue .main-sidebar .sidebar-menu > li:hover > a > .fa {
  color: #ffffff;
}

/* Box header background color */
.box.box-solid > .box-header {
  background-color: #282B3E;
  color: white;
}

/* Box header button background color */
.box.box-solid > .box-header .btn {
  background-color: #282B3E;
  color: white;
}

/* Box header link color */
.box.box-solid > .box-header a {
  color: white;
}

/* DataTables pagination button color */
.dataTables_wrapper .dataTables_paginate .paginate_button {
  color: #282B3E !important;
}

/* Hide input elements */
.hide-input {
  display: none;
}

/* Custom CSS for Time and Project titles */
.tab-content .box.box-solid > .box-header.with-border > .box-title {
  background-color: #282B3E;
  color: white;
}

/* Custom CSS for Time Entry tab background color */
#projecttracker .tab-content {
  background-color: #f0f0f0; /* Light gray */
}

/* Custom CSS for fluidRow and column */
.custom-fluid-row {
  margin-bottom: 20px; /* Space between rows */
}

.custom-column {
  padding: 10px; /* Padding inside columns */
  background-color: #f0f0f0; /* Light gray background */
  border-radius: 10px; /* Rounded corners */
}


"

# Load necessary libraries
library(shiny)          # For building interactive web applications

# Load UI and server components
ui <- source("ui.R")$value
server <- source("server.R")$value

# Run the Shiny app
shinyApp(ui = ui, server = server)



{
  "version": 1,
  "locale": "en_US",
  "platform": "4.4.2",
  "metadata": {
    "appmode": "shiny",
    "primary_rmd": null,
    "primary_html": null,
    "content_category": null,
    "has_parameters": false
  },
  "packages": {
    "DBI": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "DBI",
        "Title": "R Database Interface",
        "Version": "1.2.3",
        "Date": "2024-06-02",
        "Authors@R": "c(\n    person(\"R Special Interest Group on Databases (R-SIG-DB)\", role = \"aut\"),\n    person(\"Hadley\", \"Wickham\", role = \"aut\"),\n    person(\"Kirill\", \"Müller\", , \"kirill@cynkra.com\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"0000-0002-1416-3412\")),\n    person(\"R Consortium\", role = \"fnd\")\n  )",
        "Description": "A database interface definition for communication between R\n    and relational database management systems.  All classes in this\n    package are virtual and need to be extended by the various R/DBMS\n    implementations.",
        "License": "LGPL (>= 2.1)",
        "URL": "https://dbi.r-dbi.org, https://github.com/r-dbi/DBI",
        "BugReports": "https://github.com/r-dbi/DBI/issues",
        "Depends": "methods, R (>= 3.0.0)",
        "Suggests": "arrow, blob, covr, DBItest, dbplyr, downlit, dplyr, glue,\nhms, knitr, magrittr, nanoarrow (>= 0.3.0.1), RMariaDB,\nrmarkdown, rprojroot, RSQLite (>= 1.1-2), testthat (>= 3.0.0),\nvctrs, xml2",
        "VignetteBuilder": "knitr",
        "Config/autostyle/scope": "line_breaks",
        "Config/autostyle/strict": "false",
        "Config/Needs/check": "r-dbi/DBItest",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.1",
        "Config/Needs/website": "r-dbi/DBItest, r-dbi/dbitemplate, adbi,\nAzureKusto, bigrquery, DatabaseConnector, dittodb, duckdb,\nimplyr, lazysf, odbc, pool, RAthena, IMSMWU/RClickhouse, RH2,\nRJDBC, RMariaDB, RMySQL, RPostgres, RPostgreSQL, RPresto,\nRSQLite, sergeant, sparklyr, withr",
        "Config/testthat/edition": "3",
        "NeedsCompilation": "no",
        "Packaged": "2024-06-02 20:26:05 UTC; kirill",
        "Author": "R Special Interest Group on Databases (R-SIG-DB) [aut],\n  Hadley Wickham [aut],\n  Kirill Müller [aut, cre] (<https://orcid.org/0000-0002-1416-3412>),\n  R Consortium [fnd]",
        "Maintainer": "Kirill Müller <kirill@cynkra.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-06-02 21:50:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 01:52:34 UTC; windows"
      }
    },
    "DT": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "DT",
        "Type": "Package",
        "Title": "A Wrapper of the JavaScript Library 'DataTables'",
        "Version": "0.33",
        "Authors@R": "c(\n    person(\"Yihui\", \"Xie\", role = \"aut\"),\n    person(\"Joe\", \"Cheng\", email = \"joe@posit.co\", role = c(\"aut\", \"cre\")),\n    person(\"Xianying\", \"Tan\", role = \"aut\"),\n    person(\"JJ\", \"Allaire\", role = \"ctb\"),\n    person(\"Maximilian\", \"Girlich\", role = \"ctb\"),\n    person(\"Greg\", \"Freedman Ellis\", role = \"ctb\"),\n    person(\"Johannes\", \"Rauh\", role = \"ctb\"),\n    person(\"SpryMedia Limited\", role = c(\"ctb\", \"cph\"), comment = \"DataTables in htmlwidgets/lib\"),\n    person(\"Brian\", \"Reavis\", role = c(\"ctb\", \"cph\"), comment = \"selectize.js in htmlwidgets/lib\"),\n    person(\"Leon\", \"Gersen\", role = c(\"ctb\", \"cph\"), comment = \"noUiSlider in htmlwidgets/lib\"),\n    person(\"Bartek\", \"Szopka\", role = c(\"ctb\", \"cph\"), comment = \"jquery.highlight.js in htmlwidgets/lib\"),\n    person(\"Alex\", \"Pickering\", role = c(\"ctb\")),\n    person(\"William\", \"Holmes\", role = c(\"ctb\")),\n    person(\"Mikko\", \"Marttila\", role = c(\"ctb\")),\n    person(\"Andres\", \"Quintero\", role = c(\"ctb\")),\n    person(\"Stéphane\", \"Laurent\", role = c(\"ctb\")),\n    person(given = \"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n    )",
        "Description": "Data objects in R can be rendered as HTML tables using the\n    JavaScript library 'DataTables' (typically via R Markdown or Shiny). The\n    'DataTables' library has been included in this R package. The package name\n    'DT' is an abbreviation of 'DataTables'.",
        "URL": "https://github.com/rstudio/DT",
        "BugReports": "https://github.com/rstudio/DT/issues",
        "License": "GPL-3 | file LICENSE",
        "Imports": "htmltools (>= 0.3.6), htmlwidgets (>= 1.3), httpuv, jsonlite\n(>= 0.9.16), magrittr, crosstalk, jquerylib, promises",
        "Suggests": "knitr (>= 1.8), rmarkdown, shiny (>= 1.6), bslib, future,\ntestit, tibble",
        "VignetteBuilder": "knitr",
        "RoxygenNote": "7.3.1",
        "Encoding": "UTF-8",
        "NeedsCompilation": "no",
        "Packaged": "2024-04-03 14:36:50 UTC; yihui",
        "Author": "Yihui Xie [aut],\n  Joe Cheng [aut, cre],\n  Xianying Tan [aut],\n  JJ Allaire [ctb],\n  Maximilian Girlich [ctb],\n  Greg Freedman Ellis [ctb],\n  Johannes Rauh [ctb],\n  SpryMedia Limited [ctb, cph] (DataTables in htmlwidgets/lib),\n  Brian Reavis [ctb, cph] (selectize.js in htmlwidgets/lib),\n  Leon Gersen [ctb, cph] (noUiSlider in htmlwidgets/lib),\n  Bartek Szopka [ctb, cph] (jquery.highlight.js in htmlwidgets/lib),\n  Alex Pickering [ctb],\n  William Holmes [ctb],\n  Mikko Marttila [ctb],\n  Andres Quintero [ctb],\n  Stéphane Laurent [ctb],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Joe Cheng <joe@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-04-04 05:03:17 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:35:17 UTC; windows"
      }
    },
    "MASS": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "MASS",
        "Priority": "recommended",
        "Version": "7.3-61",
        "Date": "2024-06-10",
        "Revision": "$Rev: 3657 $",
        "Depends": "R (>= 4.4.0), grDevices, graphics, stats, utils",
        "Imports": "methods",
        "Suggests": "lattice, nlme, nnet, survival",
        "Authors@R": "c(person(\"Brian\", \"Ripley\", role = c(\"aut\", \"cre\", \"cph\"),\n                    email = \"ripley@stats.ox.ac.uk\"),\n\t     person(\"Bill\", \"Venables\", role = c(\"aut\", \"cph\")),\n\t     person(c(\"Douglas\", \"M.\"), \"Bates\", role = \"ctb\"),\n\t     person(\"Kurt\", \"Hornik\", role = \"trl\",\n                     comment = \"partial port ca 1998\"),\n\t     person(\"Albrecht\", \"Gebhardt\", role = \"trl\",\n                     comment = \"partial port ca 1998\"),\n\t     person(\"David\", \"Firth\", role = \"ctb\",\n\t            comment = \"support functions for polr\"))",
        "Description": "Functions and datasets to support Venables and Ripley,\n  \"Modern Applied Statistics with S\" (4th edition, 2002).",
        "Title": "Support Functions and Datasets for Venables and Ripley's MASS",
        "LazyData": "yes",
        "ByteCompile": "yes",
        "License": "GPL-2 | GPL-3",
        "URL": "http://www.stats.ox.ac.uk/pub/MASS4/",
        "Contact": "<MASS@stats.ox.ac.uk>",
        "NeedsCompilation": "yes",
        "Packaged": "2024-06-13 08:23:32 UTC; ripley",
        "Author": "Brian Ripley [aut, cre, cph],\n  Bill Venables [aut, cph],\n  Douglas M. Bates [ctb],\n  Kurt Hornik [trl] (partial port ca 1998),\n  Albrecht Gebhardt [trl] (partial port ca 1998),\n  David Firth [ctb] (support functions for polr)",
        "Maintainer": "Brian Ripley <ripley@stats.ox.ac.uk>",
        "Repository": "CRAN",
        "Date/Publication": "2024-06-13 10:23:32",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2024-10-31 16:49:22 UTC; windows",
        "Archs": "x64"
      }
    },
    "Matrix": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "Matrix",
        "Version": "1.7-1",
        "VersionNote": "do also bump src/version.h, inst/include/Matrix/version.h",
        "Date": "2024-10-17",
        "Priority": "recommended",
        "Title": "Sparse and Dense Matrix Classes and Methods",
        "Description": "A rich hierarchy of sparse and dense matrix classes,\n\tincluding general, symmetric, triangular, and diagonal matrices\n\twith numeric, logical, or pattern entries.  Efficient methods for\n\toperating on such matrices, often wrapping the 'BLAS', 'LAPACK',\n\tand 'SuiteSparse' libraries.",
        "License": "GPL (>= 2) | file LICENCE",
        "URL": "https://Matrix.R-forge.R-project.org",
        "BugReports": "https://R-forge.R-project.org/tracker/?atid=294&group_id=61",
        "Contact": "Matrix-authors@R-project.org",
        "Authors@R": "\n\tc(person(\"Douglas\", \"Bates\", role = \"aut\",\n\t         comment = c(ORCID = \"0000-0001-8316-9503\")),\n\t  person(\"Martin\", \"Maechler\", role = c(\"aut\", \"cre\"),\n\t         email = \"mmaechler+Matrix@gmail.com\",\n\t         comment = c(ORCID = \"0000-0002-8685-9910\")),\n\t  person(\"Mikael\", \"Jagan\", role = \"aut\",\n\t         comment = c(ORCID = \"0000-0002-3542-2938\")),\n\t  person(\"Timothy A.\", \"Davis\", role = \"ctb\",\n\t         comment = c(ORCID = \"0000-0001-7614-6899\",\n\t                     \"SuiteSparse libraries\",\n\t                     \"collaborators listed in dir(system.file(\\\"doc\\\", \\\"SuiteSparse\\\", package=\\\"Matrix\\\"), pattern=\\\"License\\\", full.names=TRUE, recursive=TRUE)\")),\n\t  person(\"George\", \"Karypis\", role = \"ctb\",\n\t         comment = c(ORCID = \"0000-0003-2753-1437\",\n\t                     \"METIS library\",\n\t                     \"Copyright: Regents of the University of Minnesota\")),\n\t  person(\"Jason\", \"Riedy\", role = \"ctb\",\n\t         comment = c(ORCID = \"0000-0002-4345-4200\",\n\t                     \"GNU Octave's condest() and onenormest()\",\n\t                     \"Copyright: Regents of the University of California\")),\n\t  person(\"Jens\", \"Oehlschlägel\", role = \"ctb\",\n\t         comment = \"initial nearPD()\"),\n\t  person(\"R Core Team\", role = \"ctb\",\n\t         comment = \"base R's matrix implementation\"))",
        "Depends": "R (>= 4.4.0), methods",
        "Imports": "grDevices, graphics, grid, lattice, stats, utils",
        "Suggests": "MASS, datasets, sfsmisc, tools",
        "Enhances": "SparseM, graph",
        "LazyData": "no",
        "LazyDataNote": "not possible, since we use data/*.R and our S4 classes",
        "BuildResaveData": "no",
        "Encoding": "UTF-8",
        "NeedsCompilation": "yes",
        "Packaged": "2024-10-17 20:22:00 UTC; maechler",
        "Author": "Douglas Bates [aut] (<https://orcid.org/0000-0001-8316-9503>),\n  Martin Maechler [aut, cre] (<https://orcid.org/0000-0002-8685-9910>),\n  Mikael Jagan [aut] (<https://orcid.org/0000-0002-3542-2938>),\n  Timothy A. Davis [ctb] (<https://orcid.org/0000-0001-7614-6899>,\n    SuiteSparse libraries, collaborators listed in\n    dir(system.file(\"doc\", \"SuiteSparse\", package=\"Matrix\"),\n    pattern=\"License\", full.names=TRUE, recursive=TRUE)),\n  George Karypis [ctb] (<https://orcid.org/0000-0003-2753-1437>, METIS\n    library, Copyright: Regents of the University of Minnesota),\n  Jason Riedy [ctb] (<https://orcid.org/0000-0002-4345-4200>, GNU\n    Octave's condest() and onenormest(), Copyright: Regents of the\n    University of California),\n  Jens Oehlschlägel [ctb] (initial nearPD()),\n  R Core Team [ctb] (base R's matrix implementation)",
        "Maintainer": "Martin Maechler <mmaechler+Matrix@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-10-18 18:10:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2024-10-31 16:49:54 UTC; windows",
        "Archs": "x64"
      }
    },
    "R.methodsS3": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "R.methodsS3",
        "Version": "1.8.2",
        "Depends": "R (>= 2.13.0)",
        "Imports": "utils",
        "Suggests": "codetools",
        "Title": "S3 Methods Simplified",
        "Authors@R": "c(person(\"Henrik\", \"Bengtsson\", role=c(\"aut\", \"cre\", \"cph\"),\n                                          email = \"henrikb@braju.com\"))",
        "Author": "Henrik Bengtsson [aut, cre, cph]",
        "Maintainer": "Henrik Bengtsson <henrikb@braju.com>",
        "Description": "Methods that simplify the setup of S3 generic functions and S3 methods.  Major effort has been made in making definition of methods as simple as possible with a minimum of maintenance for package developers.  For example, generic functions are created automatically, if missing, and naming conflict are automatically solved, if possible.  The method setMethodS3() is a good start for those who in the future may want to migrate to S4.  This is a cross-platform package implemented in pure R that generates standard S3 methods.",
        "License": "LGPL (>= 2.1)",
        "LazyLoad": "TRUE",
        "URL": "https://github.com/HenrikBengtsson/R.methodsS3",
        "BugReports": "https://github.com/HenrikBengtsson/R.methodsS3/issues",
        "NeedsCompilation": "no",
        "Packaged": "2022-06-13 18:23:35 UTC; hb",
        "Repository": "CRAN",
        "Date/Publication": "2022-06-13 22:00:14 UTC",
        "Built": "R 4.4.0; ; 2024-04-23 00:24:06 UTC; windows"
      }
    },
    "R.oo": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "R.oo",
        "Version": "1.27.0",
        "Depends": "R (>= 2.13.0), R.methodsS3 (>= 1.8.2)",
        "Imports": "methods, utils",
        "Suggests": "tools",
        "Title": "R Object-Oriented Programming with or without References",
        "Authors@R": "c(person(\"Henrik\", \"Bengtsson\", role=c(\"aut\", \"cre\", \"cph\"),\n                                          email = \"henrikb@braju.com\"))",
        "Author": "Henrik Bengtsson [aut, cre, cph]",
        "Maintainer": "Henrik Bengtsson <henrikb@braju.com>",
        "Description": "Methods and classes for object-oriented programming in R with or without references.  Large effort has been made on making definition of methods as simple as possible with a minimum of maintenance for package developers.  The package has been developed since 2001 and is now considered very stable.  This is a cross-platform package implemented in pure R that defines standard S3 classes without any tricks.",
        "License": "LGPL (>= 2.1)",
        "LazyLoad": "TRUE",
        "URL": "https://github.com/HenrikBengtsson/R.oo",
        "BugReports": "https://github.com/HenrikBengtsson/R.oo/issues",
        "NeedsCompilation": "no",
        "Packaged": "2024-11-01 17:26:30 UTC; henrik",
        "Repository": "CRAN",
        "Date/Publication": "2024-11-01 18:00:02 UTC",
        "Built": "R 4.4.1; ; 2024-11-02 00:50:32 UTC; windows"
      }
    },
    "R.utils": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "R.utils",
        "Version": "2.12.3",
        "Depends": "R (>= 2.14.0), R.oo",
        "Imports": "methods, utils, tools, R.methodsS3",
        "Suggests": "datasets, digest (>= 0.6.10)",
        "Title": "Various Programming Utilities",
        "Authors@R": "c(person(\"Henrik\", \"Bengtsson\", role=c(\"aut\", \"cre\", \"cph\"),\n                                          email = \"henrikb@braju.com\"))",
        "Author": "Henrik Bengtsson [aut, cre, cph]",
        "Maintainer": "Henrik Bengtsson <henrikb@braju.com>",
        "Description": "Utility functions useful when programming and developing R packages.",
        "License": "LGPL (>= 2.1)",
        "LazyLoad": "TRUE",
        "URL": "https://henrikbengtsson.github.io/R.utils/,\nhttps://github.com/HenrikBengtsson/R.utils",
        "BugReports": "https://github.com/HenrikBengtsson/R.utils/issues",
        "NeedsCompilation": "no",
        "Packaged": "2023-11-17 05:13:25 UTC; henrik",
        "Repository": "CRAN",
        "Date/Publication": "2023-11-18 01:00:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 01:53:27 UTC; windows"
      }
    },
    "R6": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "R6",
        "Title": "Encapsulated Classes with Reference Semantics",
        "Version": "2.5.1",
        "Authors@R": "person(\"Winston\", \"Chang\", role = c(\"aut\", \"cre\"), email = \"winston@stdout.org\")",
        "Description": "Creates classes with reference semantics, similar to R's built-in\n    reference classes. Compared to reference classes, R6 classes are simpler\n    and lighter-weight, and they are not built on S4 classes so they do not\n    require the methods package. These classes allow public and private\n    members, and they support inheritance, even when the classes are defined in\n    different packages.",
        "Depends": "R (>= 3.0)",
        "Suggests": "testthat, pryr",
        "License": "MIT + file LICENSE",
        "URL": "https://r6.r-lib.org, https://github.com/r-lib/R6/",
        "BugReports": "https://github.com/r-lib/R6/issues",
        "RoxygenNote": "7.1.1",
        "NeedsCompilation": "no",
        "Packaged": "2021-08-06 20:18:46 UTC; winston",
        "Author": "Winston Chang [aut, cre]",
        "Maintainer": "Winston Chang <winston@stdout.org>",
        "Repository": "CRAN",
        "Date/Publication": "2021-08-19 14:00:05 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 01:52:14 UTC; windows"
      }
    },
    "RColorBrewer": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "RColorBrewer",
        "Version": "1.1-3",
        "Date": "2022-04-03",
        "Title": "ColorBrewer Palettes",
        "Authors@R": "c(person(given = \"Erich\", family = \"Neuwirth\", role = c(\"aut\",\n        \"cre\"), email = \"erich.neuwirth@univie.ac.at\"))",
        "Author": "Erich Neuwirth [aut, cre]",
        "Maintainer": "Erich Neuwirth <erich.neuwirth@univie.ac.at>",
        "Depends": "R (>= 2.0.0)",
        "Description": "Provides color schemes for maps (and other graphics)\n        designed by Cynthia Brewer as described at http://colorbrewer2.org.",
        "License": "Apache License 2.0",
        "Packaged": "2022-04-03 10:26:20 UTC; neuwirth",
        "NeedsCompilation": "no",
        "Repository": "CRAN",
        "Date/Publication": "2022-04-03 19:20:13 UTC",
        "Built": "R 4.4.0; ; 2024-04-23 00:23:59 UTC; windows"
      }
    },
    "RODBC": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "RODBC",
        "Version": "1.3-26",
        "Revision": "$Rev: 3674 $",
        "Date": "2024-12-12",
        "Authors@R": "c(person(\"Brian\", \"Ripley\", role = c(\"aut\", \"cre\"),\n                    email = \"Brian.Ripley@R-project.org\"),\n             person(\"Michael\", \"Lapsley\", role = \"aut\", \n\t            comment = \"1999 to Oct 2002\"))",
        "Title": "ODBC Database Access",
        "Description": "An ODBC database interface.",
        "SystemRequirements": "An ODBC3 driver manager and drivers.",
        "Depends": "R (>= 4.0.0)",
        "Imports": "stats",
        "LazyLoad": "yes",
        "Biarch": "yes",
        "License": "GPL-2 | GPL-3",
        "NeedsCompilation": "yes",
        "Packaged": "2024-12-12 11:56:03 UTC; ripley",
        "Author": "Brian Ripley [aut, cre],\n  Michael Lapsley [aut] (1999 to Oct 2002)",
        "Maintainer": "Brian Ripley <Brian.Ripley@R-project.org>",
        "Repository": "CRAN",
        "Date/Publication": "2024-12-12 13:47:23 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-21 19:26:21 UTC; windows",
        "Archs": "x64"
      }
    },
    "RPostgreSQL": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "RPostgreSQL",
        "Version": "0.7-7",
        "Date": "2024-09-30",
        "Title": "R Interface to the 'PostgreSQL' Database System",
        "Maintainer": "Tomoaki Nishiyama <tomoaki@sci.u-toyama.ac.jp>",
        "Description": "Database interface and 'PostgreSQL' driver for 'R'.\n This package provides a Database Interface 'DBI' compliant \n driver for 'R' to access 'PostgreSQL' database systems.  \n In order to build and install this package from source, 'PostgreSQL' \n itself must be present your system to provide 'PostgreSQL' functionality \n via its libraries and header files. These files are provided as\n 'postgresql-devel' package under some Linux distributions.\n On 'macOS' and 'Microsoft Windows' system the attached 'libpq' library source will be used.",
        "LazyLoad": "true",
        "Depends": "R (>= 3.4.0), methods, DBI (>= 0.3)",
        "License": "GPL-3 | file LICENSE",
        "Copyright": "Authors listed above, PostgreSQL Global Development Group,\nand The Regents of the University of California",
        "Collate": "S4R.R zzz.R PostgreSQLSupport.R dbObjectId.R PostgreSQL.R",
        "URL": "https://github.com/tomoakin/RPostgreSQL,\nhttps://cran.r-project.org/package=DBI,\nhttps://www.postgresql.org",
        "Authors@R": "c(person(given = \"Joe\",\n                       family = \"Conway\",\n                       role = \"aut\"),\n                person(given = \"Dirk\",\n                       family = \"Eddelbuettel\",\n                       role = \"aut\"),\n                person(given = \"Tomoaki\",\n                       family = \"Nishiyama\",\n                       role = c(\"aut\", \"cre\"),\n                       email = \"tomoaki@sci.u-toyama.ac.jp\"),\n                person(given = c(\"Sameer\", \"Kumar\"),\n                       family = \"Prayaga\",\n                       role = \"aut\",\n                       comment = \"during 2008\"),\n                person(given = \"Neil\",\n                       family = \"Tiffin\",\n                       role = \"aut\"))",
        "NeedsCompilation": "yes",
        "Packaged": "2024-09-30 04:53:23 UTC; tomoaki",
        "Author": "Joe Conway [aut],\n  Dirk Eddelbuettel [aut],\n  Tomoaki Nishiyama [aut, cre],\n  Sameer Kumar Prayaga [aut] (during 2008),\n  Neil Tiffin [aut]",
        "Repository": "CRAN",
        "Date/Publication": "2024-09-30 07:20:07 UTC",
        "Built": "R 4.4.1; x86_64-w64-mingw32; 2024-10-14 00:35:11 UTC; windows",
        "Archs": "x64"
      }
    },
    "RPostgres": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "RPostgres",
        "Title": "C++ Interface to PostgreSQL",
        "Version": "1.4.7",
        "Date": "2024-05-26",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", role = \"aut\"),\n    person(\"Jeroen\", \"Ooms\", role = \"aut\"),\n    person(\"Kirill\", \"Müller\", , \"kirill@cynkra.com\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"0000-0002-1416-3412\")),\n    person(\"RStudio\", role = \"cph\"),\n    person(\"R Consortium\", role = \"fnd\"),\n    person(\"Tomoaki\", \"Nishiyama\", role = \"ctb\",\n           comment = \"Code for encoding vectors into strings derived from RPostgreSQL\")\n  )",
        "Description": "Fully DBI-compliant C++-backed interface to PostgreSQL\n    <https://www.postgresql.org/>, an open-source relational database.",
        "License": "MIT + file LICENSE",
        "URL": "https://rpostgres.r-dbi.org, https://github.com/r-dbi/RPostgres",
        "BugReports": "https://github.com/r-dbi/RPostgres/issues",
        "Depends": "R (>= 3.1.0)",
        "Imports": "bit64, blob (>= 1.2.0), DBI (>= 1.2.0), hms (>= 1.0.0),\nlubridate, methods, withr",
        "Suggests": "callr, covr, DBItest (>= 1.7.3), knitr, rlang, rmarkdown,\ntestthat (>= 3.0.0)",
        "LinkingTo": "cpp11, plogr (>= 0.2.0)",
        "Config/Needs/website": "r-dbi/dbitemplate",
        "VignetteBuilder": "knitr",
        "Config/Needs/build": "decor",
        "Config/autostyle/scope": "line_breaks",
        "Config/autostyle/strict": "false",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "LazyLoad": "true",
        "RoxygenNote": "7.3.1",
        "SystemRequirements": "libpq >= 9.0: libpq-dev (deb) or postgresql-devel\n(rpm)",
        "Collate": "'PqDriver.R' 'PqConnection.R' 'PqResult.R' 'RPostgres-pkg.R'\n'Redshift.R' 'cpp11.R' 'dbAppendTable_PqConnection.R'\n'dbBegin_PqConnection.R' 'dbBind_PqResult.R'\n'dbClearResult_PqResult.R' 'dbColumnInfo_PqResult.R'\n'dbCommit_PqConnection.R' 'dbConnect_PqDriver.R'\n'dbConnect_RedshiftDriver.R' 'dbDataType_PqConnection.R'\n'dbDataType_PqDriver.R' 'dbDisconnect_PqConnection.R'\n'dbExistsTable_PqConnection_Id.R'\n'dbExistsTable_PqConnection_character.R' 'dbFetch_PqResult.R'\n'dbGetInfo_PqConnection.R' 'dbGetInfo_PqDriver.R'\n'dbGetRowCount_PqResult.R' 'dbGetRowsAffected_PqResult.R'\n'dbGetStatement_PqResult.R' 'dbHasCompleted_PqResult.R'\n'dbIsValid_PqConnection.R' 'dbIsValid_PqDriver.R'\n'dbIsValid_PqResult.R' 'dbListFields_PqConnection_Id.R'\n'dbListFields_PqConnection_character.R'\n'dbListObjects_PqConnection_ANY.R'\n'dbListTables_PqConnection.R'\n'dbQuoteIdentifier_PqConnection_Id.R'\n'dbQuoteIdentifier_PqConnection_SQL.R'\n'dbQuoteIdentifier_PqConnection_character.R'\n'dbQuoteLiteral_PqConnection.R'\n'dbQuoteString_PqConnection_SQL.R'\n'dbQuoteString_PqConnection_character.R'\n'dbReadTable_PqConnection_character.R'\n'dbRemoveTable_PqConnection_character.R'\n'dbRollback_PqConnection.R' 'dbSendQuery_PqConnection.R'\n'dbUnloadDriver_PqDriver.R'\n'dbUnquoteIdentifier_PqConnection_SQL.R'\n'dbWriteTable_PqConnection_character_data.frame.R' 'default.R'\n'export.R' 'quote.R' 'show_PqConnection.R'\n'sqlData_PqConnection.R' 'tables.R' 'transactions.R' 'utils.R'",
        "NeedsCompilation": "yes",
        "Packaged": "2024-05-26 20:04:39 UTC; kirill",
        "Author": "Hadley Wickham [aut],\n  Jeroen Ooms [aut],\n  Kirill Müller [aut, cre] (<https://orcid.org/0000-0002-1416-3412>),\n  RStudio [cph],\n  R Consortium [fnd],\n  Tomoaki Nishiyama [ctb] (Code for encoding vectors into strings derived\n    from RPostgreSQL)",
        "Maintainer": "Kirill Müller <kirill@cynkra.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-05-27 10:30:02 UTC",
        "Built": "R 4.4.1; x86_64-w64-mingw32; 2024-07-09 01:42:39 UTC; windows",
        "Archs": "x64"
      }
    },
    "Rcpp": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "Rcpp",
        "Title": "Seamless R and C++ Integration",
        "Version": "1.0.14",
        "Date": "2025-01-11",
        "Authors@R": "c(person(\"Dirk\", \"Eddelbuettel\", role = c(\"aut\", \"cre\"), email = \"edd@debian.org\",\n                    comment = c(ORCID = \"0000-0001-6419-907X\")),\n             person(\"Romain\", \"Francois\", role = \"aut\",\n                    comment = c(ORCID = \"0000-0002-2444-4226\")),\n             person(\"JJ\", \"Allaire\", role = \"aut\",\n                    comment = c(ORCID = \"0000-0003-0174-9868\")),\n             person(\"Kevin\", \"Ushey\", role = \"aut\",\n                    comment = c(ORCID = \"0000-0003-2880-7407\")),\n             person(\"Qiang\", \"Kou\", role = \"aut\",\n                    comment = c(ORCID = \"0000-0001-6786-5453\")),\n             person(\"Nathan\", \"Russell\", role = \"aut\"),\n             person(\"Iñaki\", \"Ucar\", role = \"aut\",\n                    comment = c(ORCID = \"0000-0001-6403-5550\")),\n             person(\"Doug\", \"Bates\", role = \"aut\",\n                    comment = c(ORCID = \"0000-0001-8316-9503\")),\n             person(\"John\", \"Chambers\", role = \"aut\"))",
        "Description": "The 'Rcpp' package provides R functions as well as C++ classes which\n offer a seamless integration of R and C++. Many R data types and objects can be\n mapped back and forth to C++ equivalents which facilitates both writing of new\n code as well as easier integration of third-party libraries. Documentation\n about 'Rcpp' is provided by several vignettes included in this package, via the\n 'Rcpp Gallery' site at <https://gallery.rcpp.org>, the paper by Eddelbuettel and\n Francois (2011, <doi:10.18637/jss.v040.i08>), the book by Eddelbuettel (2013,\n <doi:10.1007/978-1-4614-6868-4>) and the paper by Eddelbuettel and Balamuta (2018,\n <doi:10.1080/00031305.2017.1375990>); see 'citation(\"Rcpp\")' for details.",
        "Imports": "methods, utils",
        "Suggests": "tinytest, inline, rbenchmark, pkgKitten (>= 0.1.2)",
        "URL": "https://www.rcpp.org,\nhttps://dirk.eddelbuettel.com/code/rcpp.html,\nhttps://github.com/RcppCore/Rcpp",
        "License": "GPL (>= 2)",
        "BugReports": "https://github.com/RcppCore/Rcpp/issues",
        "MailingList": "rcpp-devel@lists.r-forge.r-project.org",
        "RoxygenNote": "6.1.1",
        "Encoding": "UTF-8",
        "NeedsCompilation": "yes",
        "Packaged": "2025-01-11 20:21:25 UTC; edd",
        "Author": "Dirk Eddelbuettel [aut, cre] (<https://orcid.org/0000-0001-6419-907X>),\n  Romain Francois [aut] (<https://orcid.org/0000-0002-2444-4226>),\n  JJ Allaire [aut] (<https://orcid.org/0000-0003-0174-9868>),\n  Kevin Ushey [aut] (<https://orcid.org/0000-0003-2880-7407>),\n  Qiang Kou [aut] (<https://orcid.org/0000-0001-6786-5453>),\n  Nathan Russell [aut],\n  Iñaki Ucar [aut] (<https://orcid.org/0000-0001-6403-5550>),\n  Doug Bates [aut] (<https://orcid.org/0000-0001-8316-9503>),\n  John Chambers [aut]",
        "Maintainer": "Dirk Eddelbuettel <edd@debian.org>",
        "Repository": "CRAN",
        "Date/Publication": "2025-01-12 16:10:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 00:51:34 UTC; windows",
        "Archs": "x64"
      }
    },
    "askpass": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "askpass",
        "Type": "Package",
        "Title": "Password Entry Utilities for R, Git, and SSH",
        "Version": "1.2.1",
        "Authors@R": "person(\"Jeroen\", \"Ooms\", role = c(\"aut\", \"cre\"), \n    email = \"jeroenooms@gmail.com\", comment = c(ORCID = \"0000-0002-4035-0289\"))",
        "Description": "Cross-platform utilities for prompting the user for credentials or a \n    passphrase, for example to authenticate with a server or read a protected key.\n    Includes native programs for MacOS and Windows, hence no 'tcltk' is required. \n    Password entry can be invoked in two different ways: directly from R via the \n    askpass() function, or indirectly as password-entry back-end for 'ssh-agent' \n    or 'git-credential' via the SSH_ASKPASS and GIT_ASKPASS environment variables.\n    Thereby the user can be prompted for credentials or a passphrase if needed \n    when R calls out to git or ssh.",
        "License": "MIT + file LICENSE",
        "URL": "https://r-lib.r-universe.dev/askpass",
        "BugReports": "https://github.com/r-lib/askpass/issues",
        "Encoding": "UTF-8",
        "Imports": "sys (>= 2.1)",
        "RoxygenNote": "7.2.3",
        "Suggests": "testthat",
        "Language": "en-US",
        "NeedsCompilation": "yes",
        "Packaged": "2024-10-03 14:12:09 UTC; jeroen",
        "Author": "Jeroen Ooms [aut, cre] (<https://orcid.org/0000-0002-4035-0289>)",
        "Maintainer": "Jeroen Ooms <jeroenooms@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-10-04 07:20:03 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 02:47:26 UTC; windows",
        "Archs": "x64"
      }
    },
    "assertthat": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "assertthat",
        "Title": "Easy Pre and Post Assertions",
        "Version": "0.2.1",
        "Authors@R": "\n  person(\"Hadley\", \"Wickham\", , \"hadley@rstudio.com\", c(\"aut\", \"cre\"))",
        "Description": "An extension to stopifnot() that makes it easy to declare \n    the pre and post conditions that you code should satisfy, while also \n    producing friendly error messages so that your users know what's gone\n    wrong.",
        "License": "GPL-3",
        "Imports": "tools",
        "Suggests": "testthat, covr",
        "RoxygenNote": "6.0.1",
        "Collate": "'assert-that.r' 'on-failure.r' 'assertions-file.r'\n'assertions-scalar.R' 'assertions.r' 'base.r'\n'base-comparison.r' 'base-is.r' 'base-logical.r' 'base-misc.r'\n'utils.r' 'validate-that.R'",
        "NeedsCompilation": "no",
        "Packaged": "2019-03-21 13:11:01 UTC; hadley",
        "Author": "Hadley Wickham [aut, cre]",
        "Maintainer": "Hadley Wickham <hadley@rstudio.com>",
        "Repository": "CRAN",
        "Date/Publication": "2019-03-21 14:53:46 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 01:53:01 UTC; windows"
      }
    },
    "backports": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "backports",
        "Type": "Package",
        "Title": "Reimplementations of Functions Introduced Since R-3.0.0",
        "Version": "1.5.0",
        "Authors@R": "c(\n    person(\"Michel\", \"Lang\", NULL, \"michellang@gmail.com\",\n      role = c(\"cre\", \"aut\"), comment = c(ORCID = \"0000-0001-9754-0393\")),\n    person(\"Duncan\", \"Murdoch\", NULL, \"murdoch.duncan@gmail.com\",\n      role = c(\"aut\")),\n    person(\"R Core Team\", role = \"aut\"))",
        "Maintainer": "Michel Lang <michellang@gmail.com>",
        "Description": "\n    Functions introduced or changed since R v3.0.0 are re-implemented in this\n    package. The backports are conditionally exported in order to let R resolve\n    the function name to either the implemented backport, or the respective base\n    version, if available. Package developers can make use of new functions or\n    arguments by selectively importing specific backports to\n    support older installations.",
        "URL": "https://github.com/r-lib/backports",
        "BugReports": "https://github.com/r-lib/backports/issues",
        "License": "GPL-2 | GPL-3",
        "NeedsCompilation": "yes",
        "ByteCompile": "yes",
        "Depends": "R (>= 3.0.0)",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.1",
        "Packaged": "2024-05-23 11:56:25 UTC; michel",
        "Author": "Michel Lang [cre, aut] (<https://orcid.org/0000-0001-9754-0393>),\n  Duncan Murdoch [aut],\n  R Core Team [aut]",
        "Repository": "CRAN",
        "Date/Publication": "2024-05-23 12:30:02 UTC",
        "Built": "R 4.4.0; x86_64-w64-mingw32; 2024-05-24 23:50:37 UTC; windows",
        "Archs": "x64"
      }
    },
    "base64enc": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "base64enc",
        "Version": "0.1-3",
        "Title": "Tools for base64 encoding",
        "Author": "Simon Urbanek <Simon.Urbanek@r-project.org>",
        "Maintainer": "Simon Urbanek <Simon.Urbanek@r-project.org>",
        "Depends": "R (>= 2.9.0)",
        "Enhances": "png",
        "Description": "This package provides tools for handling base64 encoding. It is more flexible than the orphaned base64 package.",
        "License": "GPL-2 | GPL-3",
        "URL": "http://www.rforge.net/base64enc",
        "NeedsCompilation": "yes",
        "Packaged": "2015-02-04 20:31:00 UTC; svnuser",
        "Repository": "CRAN",
        "Date/Publication": "2015-07-28 08:03:37",
        "Built": "R 4.4.0; x86_64-w64-mingw32; 2024-04-23 00:24:00 UTC; windows",
        "Archs": "x64"
      }
    },
    "bit": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "bit",
        "Type": "Package",
        "Title": "Classes and Methods for Fast Memory-Efficient Boolean Selections",
        "Version": "4.5.0.1",
        "Date": "2024-09-17",
        "Authors@R": "c(person(given = \"Jens\",\n                      family = \"Oehlschlägel\",\n                      role = c(\"aut\", \"cre\"),\n                      email = \"Jens.Oehlschlaegel@truecluster.com\"),\n               person(given = \"Brian\",\n                      family = \"Ripley\",\n                      role = \"ctb\"))",
        "Author": "Jens Oehlschlägel [aut, cre],\n  Brian Ripley [ctb]",
        "Maintainer": "Jens Oehlschlägel <Jens.Oehlschlaegel@truecluster.com>",
        "Depends": "R (>= 3.4.0)",
        "Suggests": "testthat (>= 0.11.0), roxygen2, knitr, markdown, rmarkdown,\nmicrobenchmark, bit64 (>= 4.0.0), ff (>= 4.0.0)",
        "Description": "Provided are classes for boolean and skewed boolean vectors,\n    fast boolean methods, fast unique and non-unique integer sorting,\n    fast set operations on sorted and unsorted sets of integers, and\n    foundations for ff (range index, compression, chunked processing).",
        "License": "GPL-2 | GPL-3",
        "LazyLoad": "yes",
        "ByteCompile": "yes",
        "Encoding": "UTF-8",
        "URL": "https://github.com/truecluster/bit",
        "VignetteBuilder": "knitr, rmarkdown",
        "RoxygenNote": "7.3.2",
        "NeedsCompilation": "yes",
        "Packaged": "2024-11-27 08:15:13 UTC; ripley",
        "Repository": "CRAN",
        "Date/Publication": "2024-12-03 13:45:44 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:53 UTC; windows",
        "Archs": "x64"
      }
    },
    "bit64": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "bit64",
        "Title": "A S3 Class for Vectors of 64bit Integers",
        "Version": "4.6.0-1",
        "Authors@R": "c(\n    person(\"Michael\", \"Chirico\", email = \"michaelchirico4@gmail.com\", role = c(\"aut\", \"cre\")),\n    person(\"Jens\", \"Oehlschlägel\", role = \"aut\"),\n    person(\"Leonardo\", \"Silvestri\", role = \"ctb\"),\n    person(\"Ofek\", \"Shilon\", role = \"ctb\")\n  )",
        "Depends": "R (>= 3.4.0), bit (>= 4.0.0)",
        "Description": "\n  Package 'bit64' provides serializable S3 atomic 64bit (signed) integers.\n  These are useful for handling database keys and exact counting in +-2^63.\n  WARNING: do not use them as replacement for 32bit integers, integer64 are not\n  supported for subscripting by R-core and they have different semantics when\n  combined with double, e.g. integer64 + double => integer64.\n  Class integer64 can be used in vectors, matrices, arrays and data.frames.\n  Methods are available for coercion from and to logicals, integers, doubles,\n  characters and factors as well as many elementwise and summary functions.\n  Many fast algorithmic operations such as 'match' and 'order' support inter-\n  active data exploration and manipulation and optionally leverage caching.",
        "License": "GPL-2 | GPL-3",
        "LazyLoad": "yes",
        "ByteCompile": "yes",
        "URL": "https://github.com/r-lib/bit64",
        "Encoding": "UTF-8",
        "Imports": "graphics, methods, stats, utils",
        "Suggests": "testthat (>= 3.0.3), withr",
        "Config/testthat/edition": "3",
        "Config/needs/development": "testthat",
        "RoxygenNote": "7.3.2",
        "NeedsCompilation": "yes",
        "Packaged": "2025-01-16 14:04:20 UTC; michael",
        "Author": "Michael Chirico [aut, cre],\n  Jens Oehlschlägel [aut],\n  Leonardo Silvestri [ctb],\n  Ofek Shilon [ctb]",
        "Maintainer": "Michael Chirico <michaelchirico4@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2025-01-16 16:00:07 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-21 00:51:17 UTC; windows",
        "Archs": "x64"
      }
    },
    "blob": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "blob",
        "Title": "A Simple S3 Class for Representing Vectors of Binary Data\n('BLOBS')",
        "Version": "1.2.4",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", role = \"aut\"),\n    person(\"Kirill\", \"Müller\", , \"kirill@cynkra.com\", role = \"cre\"),\n    person(\"RStudio\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "R's raw vector is useful for storing a single binary object.\n    What if you want to put a vector of them in a data frame? The 'blob'\n    package provides the blob object, a list of raw vectors, suitable for\n    use as a column in data frame.",
        "License": "MIT + file LICENSE",
        "URL": "https://blob.tidyverse.org, https://github.com/tidyverse/blob",
        "BugReports": "https://github.com/tidyverse/blob/issues",
        "Imports": "methods, rlang, vctrs (>= 0.2.1)",
        "Suggests": "covr, crayon, pillar (>= 1.2.1), testthat",
        "Config/autostyle/scope": "line_breaks",
        "Config/autostyle/strict": "false",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.3",
        "NeedsCompilation": "no",
        "Packaged": "2023-03-17 09:42:50 UTC; kirill",
        "Author": "Hadley Wickham [aut],\n  Kirill Müller [cre],\n  RStudio [cph, fnd]",
        "Maintainer": "Kirill Müller <kirill@cynkra.com>",
        "Repository": "CRAN",
        "Date/Publication": "2023-03-17 12:00:06 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:12:19 UTC; windows"
      }
    },
    "bslib": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "bslib",
        "Title": "Custom 'Bootstrap' 'Sass' Themes for 'shiny' and 'rmarkdown'",
        "Version": "0.8.0",
        "Authors@R": "c(\n    person(\"Carson\", \"Sievert\", , \"carson@posit.co\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"0000-0002-4958-2844\")),\n    person(\"Joe\", \"Cheng\", , \"joe@posit.co\", role = \"aut\"),\n    person(\"Garrick\", \"Aden-Buie\", , \"garrick@posit.co\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-7111-0077\")),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\")),\n    person(, \"Bootstrap contributors\", role = \"ctb\",\n           comment = \"Bootstrap library\"),\n    person(, \"Twitter, Inc\", role = \"cph\",\n           comment = \"Bootstrap library\"),\n    person(\"Javi\", \"Aguilar\", role = c(\"ctb\", \"cph\"),\n           comment = \"Bootstrap colorpicker library\"),\n    person(\"Thomas\", \"Park\", role = c(\"ctb\", \"cph\"),\n           comment = \"Bootswatch library\"),\n    person(, \"PayPal\", role = c(\"ctb\", \"cph\"),\n           comment = \"Bootstrap accessibility plugin\")\n  )",
        "Description": "Simplifies custom 'CSS' styling of both 'shiny' and\n    'rmarkdown' via 'Bootstrap' 'Sass'. Supports 'Bootstrap' 3, 4 and 5 as\n    well as their various 'Bootswatch' themes. An interactive widget is\n    also provided for previewing themes in real time.",
        "License": "MIT + file LICENSE",
        "URL": "https://rstudio.github.io/bslib/, https://github.com/rstudio/bslib",
        "BugReports": "https://github.com/rstudio/bslib/issues",
        "Depends": "R (>= 2.10)",
        "Imports": "base64enc, cachem, fastmap (>= 1.1.1), grDevices, htmltools\n(>= 0.5.8), jquerylib (>= 0.1.3), jsonlite, lifecycle, memoise\n(>= 2.0.1), mime, rlang, sass (>= 0.4.9)",
        "Suggests": "bsicons, curl, fontawesome, future, ggplot2, knitr, magrittr,\nrappdirs, rmarkdown (>= 2.7), shiny (> 1.8.1), testthat,\nthematic, withr",
        "Config/Needs/deploy": "BH, chiflights22, colourpicker, commonmark, cpp11,\ncpsievert/chiflights22, cpsievert/histoslider, dplyr, DT,\nggplot2, ggridges, gt, hexbin, histoslider, htmlwidgets,\nlattice, leaflet, lubridate, modelr, plotly, reactable,\nreshape2, rprojroot, rsconnect, rstudio/shiny, scales, styler,\ntibble",
        "Config/Needs/routine": "chromote, desc, renv",
        "Config/Needs/website": "brio, crosstalk, dplyr, DT, ggplot2, glue,\nhtmlwidgets, leaflet, lorem, palmerpenguins, plotly, purrr,\nrprojroot, rstudio/htmltools, scales, stringr, tidyr, webshot2",
        "Config/testthat/edition": "3",
        "Config/testthat/parallel": "true",
        "Config/testthat/start-first": "zzzz-bs-sass, fonts, zzz-precompile,\ntheme-*, rmd-*",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.2",
        "Collate": "'accordion.R' 'breakpoints.R' 'bs-current-theme.R'\n'bs-dependencies.R' 'bs-global.R' 'bs-remove.R'\n'bs-theme-layers.R' 'bs-theme-preset-bootswatch.R'\n'bs-theme-preset-builtin.R' 'bs-theme-preset.R' 'utils.R'\n'bs-theme-preview.R' 'bs-theme-update.R' 'bs-theme.R'\n'bslib-package.R' 'buttons.R' 'card.R' 'deprecated.R' 'files.R'\n'fill.R' 'imports.R' 'input-dark-mode.R' 'input-switch.R'\n'layout.R' 'nav-items.R' 'nav-update.R' 'navs-legacy.R'\n'navs.R' 'onLoad.R' 'page.R' 'popover.R' 'precompiled.R'\n'print.R' 'shiny-devmode.R' 'sidebar.R' 'staticimports.R'\n'tooltip.R' 'utils-deps.R' 'utils-shiny.R' 'utils-tags.R'\n'value-box.R' 'version-default.R' 'versions.R'",
        "NeedsCompilation": "no",
        "Packaged": "2024-07-29 18:49:12 UTC; cpsievert",
        "Author": "Carson Sievert [aut, cre] (<https://orcid.org/0000-0002-4958-2844>),\n  Joe Cheng [aut],\n  Garrick Aden-Buie [aut] (<https://orcid.org/0000-0002-7111-0077>),\n  Posit Software, PBC [cph, fnd],\n  Bootstrap contributors [ctb] (Bootstrap library),\n  Twitter, Inc [cph] (Bootstrap library),\n  Javi Aguilar [ctb, cph] (Bootstrap colorpicker library),\n  Thomas Park [ctb, cph] (Bootswatch library),\n  PayPal [ctb, cph] (Bootstrap accessibility plugin)",
        "Maintainer": "Carson Sievert <carson@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-07-29 19:20:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:12:10 UTC; windows"
      }
    },
    "cachem": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "cachem",
        "Version": "1.1.0",
        "Title": "Cache R Objects with Automatic Pruning",
        "Description": "Key-value stores with automatic pruning. Caches can limit\n    either their total size or the age of the oldest object (or both),\n    automatically pruning objects to maintain the constraints.",
        "Authors@R": "c(\n    person(\"Winston\", \"Chang\", , \"winston@posit.co\", c(\"aut\", \"cre\")),\n    person(family = \"Posit Software, PBC\", role = c(\"cph\", \"fnd\")))",
        "License": "MIT + file LICENSE",
        "Encoding": "UTF-8",
        "ByteCompile": "true",
        "URL": "https://cachem.r-lib.org/, https://github.com/r-lib/cachem",
        "Imports": "rlang, fastmap (>= 1.2.0)",
        "Suggests": "testthat",
        "RoxygenNote": "7.2.3",
        "Config/Needs/routine": "lobstr",
        "Config/Needs/website": "pkgdown",
        "NeedsCompilation": "yes",
        "Packaged": "2024-05-15 15:54:22 UTC; winston",
        "Author": "Winston Chang [aut, cre],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Winston Chang <winston@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-05-16 09:50:11 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 02:47:26 UTC; windows",
        "Archs": "x64"
      }
    },
    "callr": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "callr",
        "Title": "Call R from R",
        "Version": "3.7.6",
        "Authors@R": "c(\n    person(\"Gábor\", \"Csárdi\", , \"csardi.gabor@gmail.com\", role = c(\"aut\", \"cre\", \"cph\"),\n           comment = c(ORCID = \"0000-0001-7098-9676\")),\n    person(\"Winston\", \"Chang\", role = \"aut\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\")),\n    person(\"Ascent Digital Services\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "It is sometimes useful to perform a computation in a separate\n    R process, without affecting the current R process at all.  This\n    packages does exactly that.",
        "License": "MIT + file LICENSE",
        "URL": "https://callr.r-lib.org, https://github.com/r-lib/callr",
        "BugReports": "https://github.com/r-lib/callr/issues",
        "Depends": "R (>= 3.4)",
        "Imports": "processx (>= 3.6.1), R6, utils",
        "Suggests": "asciicast (>= 2.3.1), cli (>= 1.1.0), mockery, ps, rprojroot,\nspelling, testthat (>= 3.2.0), withr (>= 2.3.0)",
        "Config/Needs/website": "r-lib/asciicast, glue, htmlwidgets, igraph,\ntibble, tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "Language": "en-US",
        "RoxygenNote": "7.3.1.9000",
        "NeedsCompilation": "no",
        "Packaged": "2024-03-25 12:10:25 UTC; gaborcsardi",
        "Author": "Gábor Csárdi [aut, cre, cph] (<https://orcid.org/0000-0001-7098-9676>),\n  Winston Chang [aut],\n  Posit Software, PBC [cph, fnd],\n  Ascent Digital Services [cph, fnd]",
        "Maintainer": "Gábor Csárdi <csardi.gabor@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-03-25 13:30:06 UTC",
        "Built": "R 4.4.1; ; 2024-07-09 01:24:12 UTC; windows"
      }
    },
    "checkmate": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "checkmate",
        "Type": "Package",
        "Title": "Fast and Versatile Argument Checks",
        "Description": "Tests and assertions to perform frequent argument checks. A\n    substantial part of the package was written in C to minimize any worries\n    about execution time overhead.",
        "Version": "2.3.2",
        "Authors@R": "c(\n    person(\"Michel\", \"Lang\", NULL, \"michellang@gmail.com\",\n      role = c(\"cre\", \"aut\"), comment = c(ORCID = \"0000-0001-9754-0393\")),\n    person(\"Bernd\", \"Bischl\", NULL, \"bernd_bischl@gmx.net\", role = \"ctb\"),\n    person(\"Dénes\", \"Tóth\", NULL, \"toth.denes@kogentum.hu\", role = \"ctb\",\n      comment = c(ORCID = \"0000-0003-4262-3217\"))\n    )",
        "URL": "https://mllg.github.io/checkmate/,\nhttps://github.com/mllg/checkmate",
        "URLNote": "https://github.com/mllg/checkmate",
        "BugReports": "https://github.com/mllg/checkmate/issues",
        "NeedsCompilation": "yes",
        "ByteCompile": "yes",
        "Encoding": "UTF-8",
        "Depends": "R (>= 3.0.0)",
        "Imports": "backports (>= 1.1.0), utils",
        "Suggests": "R6, fastmatch, data.table (>= 1.9.8), devtools, ggplot2,\nknitr, magrittr, microbenchmark, rmarkdown, testthat (>=\n3.0.4), tinytest (>= 1.1.0), tibble",
        "License": "BSD_3_clause + file LICENSE",
        "VignetteBuilder": "knitr",
        "RoxygenNote": "7.3.2",
        "Collate": "'AssertCollection.R' 'allMissing.R' 'anyInfinite.R'\n'anyMissing.R' 'anyNaN.R' 'asInteger.R' 'assert.R' 'helper.R'\n'makeExpectation.R' 'makeTest.R' 'makeAssertion.R'\n'checkAccess.R' 'checkArray.R' 'checkAtomic.R'\n'checkAtomicVector.R' 'checkCharacter.R' 'checkChoice.R'\n'checkClass.R' 'checkComplex.R' 'checkCount.R'\n'checkDataFrame.R' 'checkDataTable.R' 'checkDate.R'\n'checkDirectoryExists.R' 'checkDisjunct.R' 'checkDouble.R'\n'checkEnvironment.R' 'checkFALSE.R' 'checkFactor.R'\n'checkFileExists.R' 'checkFlag.R' 'checkFormula.R'\n'checkFunction.R' 'checkInt.R' 'checkInteger.R'\n'checkIntegerish.R' 'checkList.R' 'checkLogical.R'\n'checkMatrix.R' 'checkMultiClass.R' 'checkNamed.R'\n'checkNames.R' 'checkNull.R' 'checkNumber.R' 'checkNumeric.R'\n'checkOS.R' 'checkPOSIXct.R' 'checkPathForOutput.R'\n'checkPermutation.R' 'checkR6.R' 'checkRaw.R' 'checkScalar.R'\n'checkScalarNA.R' 'checkSetEqual.R' 'checkString.R'\n'checkSubset.R' 'checkTRUE.R' 'checkTibble.R' 'checkVector.R'\n'coalesce.R' 'isIntegerish.R' 'matchArg.R' 'qassert.R'\n'qassertr.R' 'vname.R' 'wfwl.R' 'zzz.R'",
        "Packaged": "2024-07-29 09:26:26 UTC; michel",
        "Author": "Michel Lang [cre, aut] (<https://orcid.org/0000-0001-9754-0393>),\n  Bernd Bischl [ctb],\n  Dénes Tóth [ctb] (<https://orcid.org/0000-0003-4262-3217>)",
        "Maintainer": "Michel Lang <michellang@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-07-29 12:30:06 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:53:01 UTC; windows",
        "Archs": "x64"
      }
    },
    "cli": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "cli",
        "Title": "Helpers for Developing Command Line Interfaces",
        "Version": "3.6.3",
        "Authors@R": "c(\n    person(\"Gábor\", \"Csárdi\", , \"csardi.gabor@gmail.com\", role = c(\"aut\", \"cre\")),\n    person(\"Hadley\", \"Wickham\", role = \"ctb\"),\n    person(\"Kirill\", \"Müller\", role = \"ctb\"),\n    person(\"Salim\", \"Brüggemann\", , \"salim-b@pm.me\", role = \"ctb\",\n           comment = c(ORCID = \"0000-0002-5329-5987\")),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "A suite of tools to build attractive command line interfaces\n    ('CLIs'), from semantic elements: headings, lists, alerts, paragraphs,\n    etc. Supports custom themes via a 'CSS'-like language. It also\n    contains a number of lower level 'CLI' elements: rules, boxes, trees,\n    and 'Unicode' symbols with 'ASCII' alternatives. It support ANSI\n    colors and text styles as well.",
        "License": "MIT + file LICENSE",
        "URL": "https://cli.r-lib.org, https://github.com/r-lib/cli",
        "BugReports": "https://github.com/r-lib/cli/issues",
        "Depends": "R (>= 3.4)",
        "Imports": "utils",
        "Suggests": "callr, covr, crayon, digest, glue (>= 1.6.0), grDevices,\nhtmltools, htmlwidgets, knitr, methods, mockery, processx, ps\n(>= 1.3.4.9000), rlang (>= 1.0.2.9003), rmarkdown, rprojroot,\nrstudioapi, testthat, tibble, whoami, withr",
        "Config/Needs/website": "r-lib/asciicast, bench, brio, cpp11, decor, desc,\nfansi, prettyunits, sessioninfo, tidyverse/tidytemplate,\nusethis, vctrs",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.3",
        "NeedsCompilation": "yes",
        "Packaged": "2024-06-21 17:24:00 UTC; gaborcsardi",
        "Author": "Gábor Csárdi [aut, cre],\n  Hadley Wickham [ctb],\n  Kirill Müller [ctb],\n  Salim Brüggemann [ctb] (<https://orcid.org/0000-0002-5329-5987>),\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Gábor Csárdi <csardi.gabor@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-06-21 21:00:07 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:16 UTC; windows",
        "Archs": "x64"
      }
    },
    "colorspace": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "colorspace",
        "Version": "2.1-1",
        "Date": "2024-07-26",
        "Title": "A Toolbox for Manipulating and Assessing Colors and Palettes",
        "Authors@R": "c(person(given = \"Ross\", family = \"Ihaka\", role = \"aut\", email = \"ihaka@stat.auckland.ac.nz\"),\n             person(given = \"Paul\", family = \"Murrell\", role = \"aut\", email = \"paul@stat.auckland.ac.nz\",\n                    comment = c(ORCID = \"0000-0002-3224-8858\")),\n             person(given = \"Kurt\", family = \"Hornik\", role = \"aut\", email = \"Kurt.Hornik@R-project.org\",\n\t\t    comment = c(ORCID = \"0000-0003-4198-9911\")),\n             person(given = c(\"Jason\", \"C.\"), family = \"Fisher\", role = \"aut\", email = \"jfisher@usgs.gov\",\n                    comment = c(ORCID = \"0000-0001-9032-8912\")),\n             person(given = \"Reto\", family = \"Stauffer\", role = \"aut\", email = \"Reto.Stauffer@uibk.ac.at\",\n                    comment = c(ORCID = \"0000-0002-3798-5507\")),\n             person(given = c(\"Claus\", \"O.\"), family = \"Wilke\", role = \"aut\", email = \"wilke@austin.utexas.edu\",\n                    comment = c(ORCID = \"0000-0002-7470-9261\")),\n             person(given = c(\"Claire\", \"D.\"), family = \"McWhite\", role = \"aut\", email = \"claire.mcwhite@utmail.utexas.edu\",\n                    comment = c(ORCID = \"0000-0001-7346-3047\")),\n             person(given = \"Achim\", family = \"Zeileis\", role = c(\"aut\", \"cre\"), email = \"Achim.Zeileis@R-project.org\",\n                    comment = c(ORCID = \"0000-0003-0918-3766\")))",
        "Description": "Carries out mapping between assorted color spaces including RGB, HSV, HLS,\n             CIEXYZ, CIELUV, HCL (polar CIELUV), CIELAB, and polar CIELAB.\n\t     Qualitative, sequential, and diverging color palettes based on HCL colors\n\t     are provided along with corresponding ggplot2 color scales.\n\t     Color palette choice is aided by an interactive app (with either a Tcl/Tk\n\t     or a shiny graphical user interface) and shiny apps with an HCL color picker and a\n\t     color vision deficiency emulator. Plotting functions for displaying\n\t     and assessing palettes include color swatches, visualizations of the\n\t     HCL space, and trajectories in HCL and/or RGB spectrum. Color manipulation\n\t     functions include: desaturation, lightening/darkening, mixing, and\n\t     simulation of color vision deficiencies (deutanomaly, protanomaly, tritanomaly).\n\t     Details can be found on the project web page at <https://colorspace.R-Forge.R-project.org/>\n\t     and in the accompanying scientific paper: Zeileis et al. (2020, Journal of Statistical\n\t     Software, <doi:10.18637/jss.v096.i01>).",
        "Depends": "R (>= 3.0.0), methods",
        "Imports": "graphics, grDevices, stats",
        "Suggests": "datasets, utils, KernSmooth, MASS, kernlab, mvtnorm, vcd,\ntcltk, shiny, shinyjs, ggplot2, dplyr, scales, grid, png, jpeg,\nknitr, rmarkdown, RColorBrewer, rcartocolor, scico, viridis,\nwesanderson",
        "VignetteBuilder": "knitr",
        "License": "BSD_3_clause + file LICENSE",
        "URL": "https://colorspace.R-Forge.R-project.org/, https://hclwizard.org/",
        "BugReports": "https://colorspace.R-Forge.R-project.org/contact.html",
        "LazyData": "yes",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.1",
        "NeedsCompilation": "yes",
        "Packaged": "2024-07-26 15:40:41 UTC; zeileis",
        "Author": "Ross Ihaka [aut],\n  Paul Murrell [aut] (<https://orcid.org/0000-0002-3224-8858>),\n  Kurt Hornik [aut] (<https://orcid.org/0000-0003-4198-9911>),\n  Jason C. Fisher [aut] (<https://orcid.org/0000-0001-9032-8912>),\n  Reto Stauffer [aut] (<https://orcid.org/0000-0002-3798-5507>),\n  Claus O. Wilke [aut] (<https://orcid.org/0000-0002-7470-9261>),\n  Claire D. McWhite [aut] (<https://orcid.org/0000-0001-7346-3047>),\n  Achim Zeileis [aut, cre] (<https://orcid.org/0000-0003-0918-3766>)",
        "Maintainer": "Achim Zeileis <Achim.Zeileis@R-project.org>",
        "Repository": "CRAN",
        "Date/Publication": "2024-07-26 17:10:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:16 UTC; windows",
        "Archs": "x64"
      }
    },
    "commonmark": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "commonmark",
        "Type": "Package",
        "Title": "High Performance CommonMark and Github Markdown Rendering in R",
        "Version": "1.9.2",
        "Authors@R": "c(\n    person(\"Jeroen\", \"Ooms\", ,\"jeroenooms@gmail.com\", role = c(\"aut\", \"cre\"),\n        comment = c(ORCID = \"0000-0002-4035-0289\")),\n    person(\"John MacFarlane\", role = \"cph\", comment = \"Author of cmark\"))",
        "Description": "The CommonMark specification <https://github.github.com/gfm/> defines\n    a rationalized version of markdown syntax. This package uses the 'cmark' \n    reference implementation for converting markdown text into various formats\n    including html, latex and groff man. In addition it exposes the markdown\n    parse tree in xml format. Also includes opt-in support for GFM extensions\n    including tables, autolinks, and strikethrough text.",
        "License": "BSD_2_clause + file LICENSE",
        "URL": "https://docs.ropensci.org/commonmark/\nhttps://ropensci.r-universe.dev/commonmark",
        "BugReports": "https://github.com/r-lib/commonmark/issues",
        "Suggests": "curl, testthat, xml2",
        "RoxygenNote": "7.2.3",
        "Language": "en-US",
        "Encoding": "UTF-8",
        "NeedsCompilation": "yes",
        "Packaged": "2024-10-03 14:12:30 UTC; jeroen",
        "Author": "Jeroen Ooms [aut, cre] (<https://orcid.org/0000-0002-4035-0289>),\n  John MacFarlane [cph] (Author of cmark)",
        "Maintainer": "Jeroen Ooms <jeroenooms@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-10-04 12:40:06 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:58 UTC; windows",
        "Archs": "x64"
      }
    },
    "cpp11": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "cpp11",
        "Title": "A C++11 Interface for R's C Interface",
        "Version": "0.5.1",
        "Authors@R": "\n    c(\n      person(\"Davis\", \"Vaughan\", email = \"davis@posit.co\", role = c(\"aut\", \"cre\"), comment = c(ORCID = \"0000-0003-4777-038X\")),\n      person(\"Jim\",\"Hester\", role = \"aut\", comment = c(ORCID = \"0000-0002-2739-7082\")),\n      person(\"Romain\", \"François\", role = \"aut\", comment = c(ORCID = \"0000-0002-2444-4226\")),\n      person(\"Benjamin\", \"Kietzman\", role = \"ctb\"),\n      person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n    )",
        "Description": "Provides a header only, C++11 interface to R's C\n    interface.  Compared to other approaches 'cpp11' strives to be safe\n    against long jumps from the C API as well as C++ exceptions, conform\n    to normal R function semantics and supports interaction with 'ALTREP'\n    vectors.",
        "License": "MIT + file LICENSE",
        "URL": "https://cpp11.r-lib.org, https://github.com/r-lib/cpp11",
        "BugReports": "https://github.com/r-lib/cpp11/issues",
        "Depends": "R (>= 4.0.0)",
        "Suggests": "bench, brio, callr, cli, covr, decor, desc, ggplot2, glue,\nknitr, lobstr, mockery, progress, rmarkdown, scales, Rcpp,\ntestthat (>= 3.2.0), tibble, utils, vctrs, withr",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Config/Needs/cpp11/cpp_register": "brio, cli, decor, desc, glue, tibble,\nvctrs",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.2",
        "NeedsCompilation": "no",
        "Packaged": "2024-12-04 14:25:58 UTC; davis",
        "Author": "Davis Vaughan [aut, cre] (<https://orcid.org/0000-0003-4777-038X>),\n  Jim Hester [aut] (<https://orcid.org/0000-0002-2739-7082>),\n  Romain François [aut] (<https://orcid.org/0000-0002-2444-4226>),\n  Benjamin Kietzman [ctb],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Davis Vaughan <davis@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-12-04 15:40:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 01:52:14 UTC; windows"
      }
    },
    "crayon": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "crayon",
        "Title": "Colored Terminal Output",
        "Version": "1.5.3",
        "Authors@R": "c(\n    person(\"Gábor\", \"Csárdi\", , \"csardi.gabor@gmail.com\", role = c(\"aut\", \"cre\")),\n    person(\"Brodie\", \"Gaslam\", , \"brodie.gaslam@yahoo.com\", role = \"ctb\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "The crayon package is now superseded. Please use the 'cli'\n    package for new projects.  Colored terminal output on terminals that\n    support 'ANSI' color and highlight codes. It also works in 'Emacs'\n    'ESS'. 'ANSI' color support is automatically detected. Colors and\n    highlighting can be combined and nested. New styles can also be\n    created easily.  This package was inspired by the 'chalk' 'JavaScript'\n    project.",
        "License": "MIT + file LICENSE",
        "URL": "https://r-lib.github.io/crayon/, https://github.com/r-lib/crayon",
        "BugReports": "https://github.com/r-lib/crayon/issues",
        "Imports": "grDevices, methods, utils",
        "Suggests": "mockery, rstudioapi, testthat, withr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.1",
        "Collate": "'aaa-rstudio-detect.R' 'aaaa-rematch2.R'\n'aab-num-ansi-colors.R' 'aac-num-ansi-colors.R' 'ansi-256.R'\n'ansi-palette.R' 'combine.R' 'string.R' 'utils.R'\n'crayon-package.R' 'disposable.R' 'enc-utils.R' 'has_ansi.R'\n'has_color.R' 'link.R' 'styles.R' 'machinery.R' 'parts.R'\n'print.R' 'style-var.R' 'show.R' 'string_operations.R'",
        "NeedsCompilation": "no",
        "Packaged": "2024-06-20 11:49:08 UTC; gaborcsardi",
        "Author": "Gábor Csárdi [aut, cre],\n  Brodie Gaslam [ctb],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Gábor Csárdi <csardi.gabor@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-06-20 13:00:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 01:52:15 UTC; windows"
      }
    },
    "crosstalk": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "crosstalk",
        "Type": "Package",
        "Title": "Inter-Widget Interactivity for HTML Widgets",
        "Version": "1.2.1",
        "Authors@R": "c(\n    person(\"Joe\", \"Cheng\", role = \"aut\", email = \"joe@posit.co\"),\n    person(\"Carson\", \"Sievert\", role = c(\"aut\", \"cre\"),\n    email = \"carson@posit.co\", comment = c(ORCID = \"0000-0002-4958-2844\")),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\")),\n    person(family = \"jQuery Foundation\", role = \"cph\",\n    comment = \"jQuery library and jQuery UI library\"),\n    person(family = \"jQuery contributors\", role = c(\"ctb\", \"cph\"),\n    comment = \"jQuery library; authors listed in inst/www/shared/jquery-AUTHORS.txt\"),\n    person(\"Mark\", \"Otto\", role = \"ctb\",\n    comment = \"Bootstrap library\"),\n    person(\"Jacob\", \"Thornton\", role = \"ctb\",\n    comment = \"Bootstrap library\"),\n    person(family = \"Bootstrap contributors\", role = \"ctb\",\n    comment = \"Bootstrap library\"),\n    person(family = \"Twitter, Inc\", role = \"cph\",\n    comment = \"Bootstrap library\"),\n    person(\"Brian\", \"Reavis\", role = c(\"ctb\", \"cph\"),\n    comment = \"selectize.js library\"),\n    person(\"Kristopher Michael\", \"Kowal\", role = c(\"ctb\", \"cph\"),\n    comment = \"es5-shim library\"),\n    person(family = \"es5-shim contributors\", role = c(\"ctb\", \"cph\"),\n    comment = \"es5-shim library\"),\n    person(\"Denis\", \"Ineshin\", role = c(\"ctb\", \"cph\"),\n    comment = \"ion.rangeSlider library\"),\n    person(\"Sami\", \"Samhuri\", role = c(\"ctb\", \"cph\"),\n    comment = \"Javascript strftime library\")\n    )",
        "Description": "Provides building blocks for allowing HTML widgets to communicate\n    with each other, with Shiny or without (i.e. static .html files). Currently\n    supports linked brushing and filtering.",
        "License": "MIT + file LICENSE",
        "Imports": "htmltools (>= 0.3.6), jsonlite, lazyeval, R6",
        "Suggests": "shiny, ggplot2, testthat (>= 2.1.0), sass, bslib",
        "URL": "https://rstudio.github.io/crosstalk/,\nhttps://github.com/rstudio/crosstalk",
        "BugReports": "https://github.com/rstudio/crosstalk/issues",
        "RoxygenNote": "7.2.3",
        "Encoding": "UTF-8",
        "NeedsCompilation": "no",
        "Packaged": "2023-11-22 16:29:50 UTC; cpsievert",
        "Author": "Joe Cheng [aut],\n  Carson Sievert [aut, cre] (<https://orcid.org/0000-0002-4958-2844>),\n  Posit Software, PBC [cph, fnd],\n  jQuery Foundation [cph] (jQuery library and jQuery UI library),\n  jQuery contributors [ctb, cph] (jQuery library; authors listed in\n    inst/www/shared/jquery-AUTHORS.txt),\n  Mark Otto [ctb] (Bootstrap library),\n  Jacob Thornton [ctb] (Bootstrap library),\n  Bootstrap contributors [ctb] (Bootstrap library),\n  Twitter, Inc [cph] (Bootstrap library),\n  Brian Reavis [ctb, cph] (selectize.js library),\n  Kristopher Michael Kowal [ctb, cph] (es5-shim library),\n  es5-shim contributors [ctb, cph] (es5-shim library),\n  Denis Ineshin [ctb, cph] (ion.rangeSlider library),\n  Sami Samhuri [ctb, cph] (Javascript strftime library)",
        "Maintainer": "Carson Sievert <carson@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2023-11-23 08:50:07 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 02:54:52 UTC; windows"
      }
    },
    "curl": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "curl",
        "Type": "Package",
        "Title": "A Modern and Flexible Web Client for R",
        "Version": "6.1.0",
        "Authors@R": "c(\n    person(\"Jeroen\", \"Ooms\", role = c(\"aut\", \"cre\"), email = \"jeroenooms@gmail.com\",\n      comment = c(ORCID = \"0000-0002-4035-0289\")),\n    person(\"Hadley\", \"Wickham\", role = \"ctb\"),\n    person(\"Posit Software, PBC\", role = \"cph\"))",
        "Description": "Bindings to 'libcurl' <https://curl.se/libcurl/> for performing fully\n    configurable HTTP/FTP requests where responses can be processed in memory, on\n    disk, or streaming via the callback or connection interfaces. Some knowledge\n    of 'libcurl' is recommended; for a more-user-friendly web client see the \n    'httr2' package which builds on this package with http specific tools and logic.",
        "License": "MIT + file LICENSE",
        "SystemRequirements": "libcurl (>= 7.62): libcurl-devel (rpm) or\nlibcurl4-openssl-dev (deb)",
        "URL": "https://jeroen.r-universe.dev/curl",
        "BugReports": "https://github.com/jeroen/curl/issues",
        "Suggests": "spelling, testthat (>= 1.0.0), knitr, jsonlite, later,\nrmarkdown, httpuv (>= 1.4.4), webutils",
        "VignetteBuilder": "knitr",
        "Depends": "R (>= 3.0.0)",
        "RoxygenNote": "7.3.2.9000",
        "Encoding": "UTF-8",
        "Language": "en-US",
        "NeedsCompilation": "yes",
        "Packaged": "2024-12-22 11:16:23 UTC; jeroen",
        "Author": "Jeroen Ooms [aut, cre] (<https://orcid.org/0000-0002-4035-0289>),\n  Hadley Wickham [ctb],\n  Posit Software, PBC [cph]",
        "Maintainer": "Jeroen Ooms <jeroenooms@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2025-01-06 15:30:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:27 UTC; windows",
        "Archs": "x64"
      }
    },
    "data.table": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "data.table",
        "Version": "1.16.4",
        "Title": "Extension of `data.frame`",
        "Depends": "R (>= 3.3.0)",
        "Imports": "methods",
        "Suggests": "bit64 (>= 4.0.0), bit (>= 4.0.4), R.utils, xts, zoo (>=\n1.8-1), yaml, knitr, markdown",
        "Description": "Fast aggregation of large data (e.g. 100GB in RAM), fast ordered joins, fast add/modify/delete of columns by group using no copies at all, list columns, friendly and fast character-separated-value read/write. Offers a natural and flexible syntax, for faster development.",
        "License": "MPL-2.0 | file LICENSE",
        "URL": "https://r-datatable.com, https://Rdatatable.gitlab.io/data.table,\nhttps://github.com/Rdatatable/data.table",
        "BugReports": "https://github.com/Rdatatable/data.table/issues",
        "VignetteBuilder": "knitr",
        "Encoding": "UTF-8",
        "ByteCompile": "TRUE",
        "Authors@R": "c(\n  person(\"Tyson\",\"Barrett\",        role=c(\"aut\",\"cre\"), email=\"t.barrett88@gmail.com\", comment = c(ORCID=\"0000-0002-2137-1391\")),\n  person(\"Matt\",\"Dowle\",           role=\"aut\",          email=\"mattjdowle@gmail.com\"),\n  person(\"Arun\",\"Srinivasan\",      role=\"aut\",          email=\"asrini@pm.me\"),\n  person(\"Jan\",\"Gorecki\",          role=\"aut\"),\n  person(\"Michael\",\"Chirico\",      role=\"aut\", comment = c(ORCID=\"0000-0003-0787-087X\")),\n  person(\"Toby\",\"Hocking\",         role=\"aut\", comment = c(ORCID=\"0000-0002-3146-0865\")),\n  person(\"Benjamin\",\"Schwendinger\",role=\"aut\", comment = c(ORCID=\"0000-0003-3315-8114\")),\n  person(\"Pasha\",\"Stetsenko\",      role=\"ctb\"),\n  person(\"Tom\",\"Short\",            role=\"ctb\"),\n  person(\"Steve\",\"Lianoglou\",      role=\"ctb\"),\n  person(\"Eduard\",\"Antonyan\",      role=\"ctb\"),\n  person(\"Markus\",\"Bonsch\",        role=\"ctb\"),\n  person(\"Hugh\",\"Parsonage\",       role=\"ctb\"),\n  person(\"Scott\",\"Ritchie\",        role=\"ctb\"),\n  person(\"Kun\",\"Ren\",              role=\"ctb\"),\n  person(\"Xianying\",\"Tan\",         role=\"ctb\"),\n  person(\"Rick\",\"Saporta\",         role=\"ctb\"),\n  person(\"Otto\",\"Seiskari\",        role=\"ctb\"),\n  person(\"Xianghui\",\"Dong\",        role=\"ctb\"),\n  person(\"Michel\",\"Lang\",          role=\"ctb\"),\n  person(\"Watal\",\"Iwasaki\",        role=\"ctb\"),\n  person(\"Seth\",\"Wenchel\",         role=\"ctb\"),\n  person(\"Karl\",\"Broman\",          role=\"ctb\"),\n  person(\"Tobias\",\"Schmidt\",       role=\"ctb\"),\n  person(\"David\",\"Arenburg\",       role=\"ctb\"),\n  person(\"Ethan\",\"Smith\",          role=\"ctb\"),\n  person(\"Francois\",\"Cocquemas\",   role=\"ctb\"),\n  person(\"Matthieu\",\"Gomez\",       role=\"ctb\"),\n  person(\"Philippe\",\"Chataignon\",  role=\"ctb\"),\n  person(\"Nello\",\"Blaser\",         role=\"ctb\"),\n  person(\"Dmitry\",\"Selivanov\",     role=\"ctb\"),\n  person(\"Andrey\",\"Riabushenko\",   role=\"ctb\"),\n  person(\"Cheng\",\"Lee\",            role=\"ctb\"),\n  person(\"Declan\",\"Groves\",        role=\"ctb\"),\n  person(\"Daniel\",\"Possenriede\",   role=\"ctb\"),\n  person(\"Felipe\",\"Parages\",       role=\"ctb\"),\n  person(\"Denes\",\"Toth\",           role=\"ctb\"),\n  person(\"Mus\",\"Yaramaz-David\",    role=\"ctb\"),\n  person(\"Ayappan\",\"Perumal\",      role=\"ctb\"),\n  person(\"James\",\"Sams\",           role=\"ctb\"),\n  person(\"Martin\",\"Morgan\",        role=\"ctb\"),\n  person(\"Michael\",\"Quinn\",        role=\"ctb\"),\n  person(\"@javrucebo\",\"\",          role=\"ctb\"),\n  person(\"@marc-outins\",\"\",        role=\"ctb\"),\n  person(\"Roy\",\"Storey\",           role=\"ctb\"),\n  person(\"Manish\",\"Saraswat\",      role=\"ctb\"),\n  person(\"Morgan\",\"Jacob\",         role=\"ctb\"),\n  person(\"Michael\",\"Schubmehl\",    role=\"ctb\"),\n  person(\"Davis\",\"Vaughan\",        role=\"ctb\"),\n  person(\"Leonardo\",\"Silvestri\",   role=\"ctb\"),\n  person(\"Jim\",\"Hester\",           role=\"ctb\"),\n  person(\"Anthony\",\"Damico\",       role=\"ctb\"),\n  person(\"Sebastian\",\"Freundt\",    role=\"ctb\"),\n  person(\"David\",\"Simons\",         role=\"ctb\"),\n  person(\"Elliott\",\"Sales de Andrade\", role=\"ctb\"),\n  person(\"Cole\",\"Miller\",          role=\"ctb\"),\n  person(\"Jens Peder\",\"Meldgaard\", role=\"ctb\"),\n  person(\"Vaclav\",\"Tlapak\",        role=\"ctb\"),\n  person(\"Kevin\",\"Ushey\",          role=\"ctb\"),\n  person(\"Dirk\",\"Eddelbuettel\",    role=\"ctb\"),\n  person(\"Tony\",\"Fischetti\",       role=\"ctb\"),\n  person(\"Ofek\",\"Shilon\",          role=\"ctb\"),\n  person(\"Vadim\",\"Khotilovich\",    role=\"ctb\"),\n  person(\"Hadley\",\"Wickham\",       role=\"ctb\"),\n  person(\"Bennet\",\"Becker\",        role=\"ctb\"),\n  person(\"Kyle\",\"Haynes\",          role=\"ctb\"),\n  person(\"Boniface Christian\",\"Kamgang\", role=\"ctb\"),\n  person(\"Olivier\",\"Delmarcell\",   role=\"ctb\"),\n  person(\"Josh\",\"O'Brien\",         role=\"ctb\"),\n  person(\"Dereck\",\"de Mezquita\",   role=\"ctb\"),\n  person(\"Michael\",\"Czekanski\",    role=\"ctb\"),\n  person(\"Dmitry\", \"Shemetov\",     role=\"ctb\"),\n  person(\"Nitish\", \"Jha\",          role=\"ctb\"),\n  person(\"Joshua\", \"Wu\",           role=\"ctb\"),\n  person(\"Iago\", \"Giné-Vázquez\",   role=\"ctb\"),\n  person(\"Anirban\", \"Chetia\",      role=\"ctb\"),\n  person(\"Doris\", \"Amoakohene\",    role=\"ctb\"),\n  person(\"Ivan\", \"Krylov\",         role=\"ctb\")\n  )",
        "NeedsCompilation": "yes",
        "Packaged": "2024-12-04 23:18:02 UTC; tysonbarrett",
        "Author": "Tyson Barrett [aut, cre] (<https://orcid.org/0000-0002-2137-1391>),\n  Matt Dowle [aut],\n  Arun Srinivasan [aut],\n  Jan Gorecki [aut],\n  Michael Chirico [aut] (<https://orcid.org/0000-0003-0787-087X>),\n  Toby Hocking [aut] (<https://orcid.org/0000-0002-3146-0865>),\n  Benjamin Schwendinger [aut] (<https://orcid.org/0000-0003-3315-8114>),\n  Pasha Stetsenko [ctb],\n  Tom Short [ctb],\n  Steve Lianoglou [ctb],\n  Eduard Antonyan [ctb],\n  Markus Bonsch [ctb],\n  Hugh Parsonage [ctb],\n  Scott Ritchie [ctb],\n  Kun Ren [ctb],\n  Xianying Tan [ctb],\n  Rick Saporta [ctb],\n  Otto Seiskari [ctb],\n  Xianghui Dong [ctb],\n  Michel Lang [ctb],\n  Watal Iwasaki [ctb],\n  Seth Wenchel [ctb],\n  Karl Broman [ctb],\n  Tobias Schmidt [ctb],\n  David Arenburg [ctb],\n  Ethan Smith [ctb],\n  Francois Cocquemas [ctb],\n  Matthieu Gomez [ctb],\n  Philippe Chataignon [ctb],\n  Nello Blaser [ctb],\n  Dmitry Selivanov [ctb],\n  Andrey Riabushenko [ctb],\n  Cheng Lee [ctb],\n  Declan Groves [ctb],\n  Daniel Possenriede [ctb],\n  Felipe Parages [ctb],\n  Denes Toth [ctb],\n  Mus Yaramaz-David [ctb],\n  Ayappan Perumal [ctb],\n  James Sams [ctb],\n  Martin Morgan [ctb],\n  Michael Quinn [ctb],\n  @javrucebo [ctb],\n  @marc-outins [ctb],\n  Roy Storey [ctb],\n  Manish Saraswat [ctb],\n  Morgan Jacob [ctb],\n  Michael Schubmehl [ctb],\n  Davis Vaughan [ctb],\n  Leonardo Silvestri [ctb],\n  Jim Hester [ctb],\n  Anthony Damico [ctb],\n  Sebastian Freundt [ctb],\n  David Simons [ctb],\n  Elliott Sales de Andrade [ctb],\n  Cole Miller [ctb],\n  Jens Peder Meldgaard [ctb],\n  Vaclav Tlapak [ctb],\n  Kevin Ushey [ctb],\n  Dirk Eddelbuettel [ctb],\n  Tony Fischetti [ctb],\n  Ofek Shilon [ctb],\n  Vadim Khotilovich [ctb],\n  Hadley Wickham [ctb],\n  Bennet Becker [ctb],\n  Kyle Haynes [ctb],\n  Boniface Christian Kamgang [ctb],\n  Olivier Delmarcell [ctb],\n  Josh O'Brien [ctb],\n  Dereck de Mezquita [ctb],\n  Michael Czekanski [ctb],\n  Dmitry Shemetov [ctb],\n  Nitish Jha [ctb],\n  Joshua Wu [ctb],\n  Iago Giné-Vázquez [ctb],\n  Anirban Chetia [ctb],\n  Doris Amoakohene [ctb],\n  Ivan Krylov [ctb]",
        "Maintainer": "Tyson Barrett <t.barrett88@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-12-06 15:10:10 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:43 UTC; windows",
        "Archs": "x64"
      }
    },
    "dbHelpers": {
      "Source": "quant_dev-cran-local",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/quant_dev-cran-local",
      "description": {
        "Package": "dbHelpers",
        "Type": "Package",
        "Title": "Database helpers for MIM Quantitative Development team",
        "Version": "1.10.1",
        "Date": "2025-02-28",
        "Author": "MIM Quant Dev",
        "Maintainer": "MIM Quant Dev <mim_quant_dev@manulife.com>",
        "Description": "Database helper functions for MIM Quant Dev team.",
        "License": "file LICENSE",
        "Encoding": "UTF-8",
        "Imports": "rlang, RODBC, DBI, RPostgreSQL, RPostgres, lubridate, odbc,\ndigest, dplyr, dbplyr, redux, jsonlite, httr, stringr, purrr,\nmodules",
        "RoxygenNote": "7.3.2",
        "NeedsCompilation": "no",
        "Packaged": "2025-03-03 22:48:47 UTC; runner",
        "Built": "R 4.4.2; ; 2025-03-04 18:41:42 UTC; windows"
      }
    },
    "dbplyr": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Type": "Package",
        "Package": "dbplyr",
        "Title": "A 'dplyr' Back End for Databases",
        "Version": "2.5.0",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = c(\"aut\", \"cre\")),\n    person(\"Maximilian\", \"Girlich\", role = \"aut\"),\n    person(\"Edgar\", \"Ruiz\", role = \"aut\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "A 'dplyr' back end for databases that allows you to work with\n    remote database tables as if they are in-memory data frames.  Basic\n    features works with any database that has a 'DBI' back end; more\n    advanced features require 'SQL' translation to be provided by the\n    package author.",
        "License": "MIT + file LICENSE",
        "URL": "https://dbplyr.tidyverse.org/, https://github.com/tidyverse/dbplyr",
        "BugReports": "https://github.com/tidyverse/dbplyr/issues",
        "Depends": "R (>= 3.6)",
        "Imports": "blob (>= 1.2.0), cli (>= 3.6.1), DBI (>= 1.1.3), dplyr (>=\n1.1.2), glue (>= 1.6.2), lifecycle (>= 1.0.3), magrittr,\nmethods, pillar (>= 1.9.0), purrr (>= 1.0.1), R6 (>= 2.2.2),\nrlang (>= 1.1.1), tibble (>= 3.2.1), tidyr (>= 1.3.0),\ntidyselect (>= 1.2.1), utils, vctrs (>= 0.6.3), withr (>=\n2.5.0)",
        "Suggests": "bit64, covr, knitr, Lahman, nycflights13, odbc (>= 1.4.2),\nRMariaDB (>= 1.2.2), rmarkdown, RPostgres (>= 1.4.5),\nRPostgreSQL, RSQLite (>= 2.3.1), testthat (>= 3.1.10)",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Config/testthat/parallel": "TRUE",
        "Encoding": "UTF-8",
        "Language": "en-gb",
        "RoxygenNote": "7.3.1",
        "Collate": "'db-sql.R' 'utils-check.R' 'import-standalone-types-check.R'\n'import-standalone-obj-type.R' 'utils.R' 'sql.R' 'escape.R'\n'translate-sql-cut.R' 'translate-sql-quantile.R'\n'translate-sql-string.R' 'translate-sql-paste.R'\n'translate-sql-helpers.R' 'translate-sql-window.R'\n'translate-sql-conditional.R' 'backend-.R' 'backend-access.R'\n'backend-hana.R' 'backend-hive.R' 'backend-impala.R'\n'verb-copy-to.R' 'backend-mssql.R' 'backend-mysql.R'\n'backend-odbc.R' 'backend-oracle.R' 'backend-postgres.R'\n'backend-postgres-old.R' 'backend-redshift.R'\n'backend-snowflake.R' 'backend-spark-sql.R' 'backend-sqlite.R'\n'backend-teradata.R' 'build-sql.R' 'data-cache.R'\n'data-lahman.R' 'data-nycflights13.R' 'db-escape.R' 'db-io.R'\n'db.R' 'dbplyr.R' 'explain.R' 'ident.R'\n'import-standalone-s3-register.R' 'join-by-compat.R'\n'join-cols-compat.R' 'lazy-join-query.R' 'lazy-ops.R'\n'lazy-query.R' 'lazy-select-query.R' 'lazy-set-op-query.R'\n'memdb.R' 'optimise-utils.R' 'pillar.R' 'progress.R'\n'sql-build.R' 'query-join.R' 'query-select.R'\n'query-semi-join.R' 'query-set-op.R' 'query.R' 'reexport.R'\n'remote.R' 'rows.R' 'schema.R' 'simulate.R' 'sql-clause.R'\n'sql-expr.R' 'src-sql.R' 'src_dbi.R' 'table-name.R'\n'tbl-lazy.R' 'tbl-sql.R' 'test-frame.R' 'testthat.R'\n'tidyeval-across.R' 'tidyeval.R' 'translate-sql.R'\n'utils-format.R' 'verb-arrange.R' 'verb-compute.R'\n'verb-count.R' 'verb-distinct.R' 'verb-do-query.R' 'verb-do.R'\n'verb-expand.R' 'verb-fill.R' 'verb-filter.R' 'verb-group_by.R'\n'verb-head.R' 'verb-joins.R' 'verb-mutate.R'\n'verb-pivot-longer.R' 'verb-pivot-wider.R' 'verb-pull.R'\n'verb-select.R' 'verb-set-ops.R' 'verb-slice.R'\n'verb-summarise.R' 'verb-uncount.R' 'verb-window.R' 'zzz.R'",
        "NeedsCompilation": "no",
        "Packaged": "2024-03-15 17:27:18 UTC; hadleywickham",
        "Author": "Hadley Wickham [aut, cre],\n  Maximilian Girlich [aut],\n  Edgar Ruiz [aut],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Hadley Wickham <hadley@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-03-19 17:00:05 UTC",
        "Built": "R 4.4.1; ; 2024-07-09 02:34:31 UTC; windows"
      }
    },
    "desc": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "desc",
        "Title": "Manipulate DESCRIPTION Files",
        "Version": "1.4.3",
        "Authors@R": "c(\n    person(\"Gábor\", \"Csárdi\", , \"csardi.gabor@gmail.com\", role = c(\"aut\", \"cre\")),\n    person(\"Kirill\", \"Müller\", role = \"aut\"),\n    person(\"Jim\", \"Hester\", , \"james.f.hester@gmail.com\", role = \"aut\"),\n    person(\"Maëlle\", \"Salmon\", role = \"ctb\",\n           comment = c(ORCID = \"0000-0002-2815-0399\")),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Maintainer": "Gábor Csárdi <csardi.gabor@gmail.com>",
        "Description": "Tools to read, write, create, and manipulate DESCRIPTION\n    files.  It is intended for packages that create or manipulate other\n    packages.",
        "License": "MIT + file LICENSE",
        "URL": "https://desc.r-lib.org/, https://github.com/r-lib/desc",
        "BugReports": "https://github.com/r-lib/desc/issues",
        "Depends": "R (>= 3.4)",
        "Imports": "cli, R6, utils",
        "Suggests": "callr, covr, gh, spelling, testthat, whoami, withr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "Language": "en-US",
        "RoxygenNote": "7.2.3",
        "Collate": "'assertions.R' 'authors-at-r.R' 'built.R' 'classes.R'\n'collate.R' 'constants.R' 'deps.R' 'desc-package.R'\n'description.R' 'encoding.R' 'find-package-root.R' 'latex.R'\n'non-oo-api.R' 'package-archives.R' 'read.R' 'remotes.R'\n'str.R' 'syntax_checks.R' 'urls.R' 'utils.R' 'validate.R'\n'version.R'",
        "NeedsCompilation": "no",
        "Packaged": "2023-12-10 11:07:50 UTC; gaborcsardi",
        "Author": "Gábor Csárdi [aut, cre],\n  Kirill Müller [aut],\n  Jim Hester [aut],\n  Maëlle Salmon [ctb] (<https://orcid.org/0000-0002-2815-0399>),\n  Posit Software, PBC [cph, fnd]",
        "Repository": "CRAN",
        "Date/Publication": "2023-12-10 11:40:08 UTC",
        "Built": "R 4.4.1; ; 2024-07-09 01:15:18 UTC; windows"
      }
    },
    "digest": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "digest",
        "Authors@R": "c(person(\"Dirk\", \"Eddelbuettel\", role = c(\"aut\", \"cre\"), email = \"edd@debian.org\",\n                    comment = c(ORCID = \"0000-0001-6419-907X\")),\n             person(\"Antoine\", \"Lucas\", role=\"ctb\"),\n             person(\"Jarek\", \"Tuszynski\", role=\"ctb\"),\n             person(\"Henrik\", \"Bengtsson\", role=\"ctb\", comment = c(ORCID = \"0000-0002-7579-5165\")),\n             person(\"Simon\", \"Urbanek\", role=\"ctb\", comment = c(ORCID = \"0000-0003-2297-1732\")),\n             person(\"Mario\", \"Frasca\", role=\"ctb\"),\n             person(\"Bryan\", \"Lewis\", role=\"ctb\"),\n             person(\"Murray\", \"Stokely\", role=\"ctb\"),\n             person(\"Hannes\", \"Muehleisen\", role=\"ctb\"),\n             person(\"Duncan\", \"Murdoch\", role=\"ctb\"),\n             person(\"Jim\", \"Hester\", role=\"ctb\"),\n             person(\"Wush\", \"Wu\", role=\"ctb\", comment = c(ORCID = \"0000-0001-5180-0567\")),\n             person(\"Qiang\", \"Kou\", role=\"ctb\", comment = c(ORCID = \"0000-0001-6786-5453\")),\n             person(\"Thierry\", \"Onkelinx\", role=\"ctb\", comment = c(ORCID = \"0000-0001-8804-4216\")),\n             person(\"Michel\", \"Lang\", role=\"ctb\", comment = c(ORCID = \"0000-0001-9754-0393\")),\n             person(\"Viliam\", \"Simko\", role=\"ctb\"),\n             person(\"Kurt\", \"Hornik\", role=\"ctb\", comment = c(ORCID = \"0000-0003-4198-9911\")),\n             person(\"Radford\", \"Neal\", role=\"ctb\", comment = c(ORCID = \"0000-0002-2473-3407\")),\n             person(\"Kendon\", \"Bell\", role=\"ctb\", comment = c(ORCID = \"0000-0002-9093-8312\")),\n             person(\"Matthew\", \"de Queljoe\", role=\"ctb\"),\n             person(\"Dmitry\", \"Selivanov\", role=\"ctb\"),\n             person(\"Ion\", \"Suruceanu\", role=\"ctb\"),\n             person(\"Bill\", \"Denney\", role=\"ctb\"),\n             person(\"Dirk\", \"Schumacher\", role=\"ctb\"),\n             person(\"András\", \"Svraka\", role=\"ctb\"),\n             person(\"Sergey\", \"Fedorov\", role=\"ctb\"),\n             person(\"Will\", \"Landau\", role=\"ctb\", comment = c(ORCID = \"0000-0003-1878-3253\")),\n             person(\"Floris\", \"Vanderhaeghe\", role=\"ctb\", comment = c(ORCID = \"0000-0002-6378-6229\")),\n             person(\"Kevin\", \"Tappe\", role=\"ctb\"),\n             person(\"Harris\", \"McGehee\", role=\"ctb\"),\n             person(\"Tim\", \"Mastny\", role=\"ctb\"),\n             person(\"Aaron\", \"Peikert\", role=\"ctb\", comment = c(ORCID = \"0000-0001-7813-818X\")),\n             person(\"Mark\", \"van der Loo\", role=\"ctb\", comment = c(ORCID = \"0000-0002-9807-4686\")),\n             person(\"Chris\", \"Muir\", role=\"ctb\", comment = c(ORCID = \"0000-0003-2555-3878\")),\n             person(\"Moritz\", \"Beller\", role=\"ctb\", comment = c(ORCID = \"0000-0003-4852-0526\")),\n             person(\"Sebastian\", \"Campbell\", role=\"ctb\"),\n             person(\"Winston\", \"Chang\", role=\"ctb\", comment = c(ORCID = \"0000-0002-1576-2126\")),\n             person(\"Dean\", \"Attali\", role=\"ctb\", comment = c(ORCID = \"0000-0002-5645-3493\")),\n             person(\"Michael\", \"Chirico\", role=\"ctb\", comment = c(ORCID = \"0000-0003-0787-087X\")),\n             person(\"Kevin\", \"Ushey\", role=\"ctb\"))",
        "Version": "0.6.37",
        "Date": "2024-08-19",
        "Title": "Create Compact Hash Digests of R Objects",
        "Description": "Implementation of a function 'digest()' for the creation of hash\n digests of arbitrary R objects (using the 'md5', 'sha-1', 'sha-256', 'crc32',\n 'xxhash', 'murmurhash', 'spookyhash', 'blake3', 'crc32c', 'xxh3_64', and 'xxh3_128'\n algorithms) permitting easy comparison of R language objects, as well as functions\n such as'hmac()' to create hash-based message authentication code. Please note that\n this package is not meant to be deployed for cryptographic purposes for which more\n comprehensive (and widely tested) libraries such as 'OpenSSL' should be used.",
        "URL": "https://github.com/eddelbuettel/digest,\nhttps://dirk.eddelbuettel.com/code/digest.html",
        "BugReports": "https://github.com/eddelbuettel/digest/issues",
        "Depends": "R (>= 3.3.0)",
        "Imports": "utils",
        "License": "GPL (>= 2)",
        "Suggests": "tinytest, simplermarkdown",
        "VignetteBuilder": "simplermarkdown",
        "Encoding": "UTF-8",
        "NeedsCompilation": "yes",
        "Packaged": "2024-08-19 12:16:05 UTC; edd",
        "Author": "Dirk Eddelbuettel [aut, cre] (<https://orcid.org/0000-0001-6419-907X>),\n  Antoine Lucas [ctb],\n  Jarek Tuszynski [ctb],\n  Henrik Bengtsson [ctb] (<https://orcid.org/0000-0002-7579-5165>),\n  Simon Urbanek [ctb] (<https://orcid.org/0000-0003-2297-1732>),\n  Mario Frasca [ctb],\n  Bryan Lewis [ctb],\n  Murray Stokely [ctb],\n  Hannes Muehleisen [ctb],\n  Duncan Murdoch [ctb],\n  Jim Hester [ctb],\n  Wush Wu [ctb] (<https://orcid.org/0000-0001-5180-0567>),\n  Qiang Kou [ctb] (<https://orcid.org/0000-0001-6786-5453>),\n  Thierry Onkelinx [ctb] (<https://orcid.org/0000-0001-8804-4216>),\n  Michel Lang [ctb] (<https://orcid.org/0000-0001-9754-0393>),\n  Viliam Simko [ctb],\n  Kurt Hornik [ctb] (<https://orcid.org/0000-0003-4198-9911>),\n  Radford Neal [ctb] (<https://orcid.org/0000-0002-2473-3407>),\n  Kendon Bell [ctb] (<https://orcid.org/0000-0002-9093-8312>),\n  Matthew de Queljoe [ctb],\n  Dmitry Selivanov [ctb],\n  Ion Suruceanu [ctb],\n  Bill Denney [ctb],\n  Dirk Schumacher [ctb],\n  András Svraka [ctb],\n  Sergey Fedorov [ctb],\n  Will Landau [ctb] (<https://orcid.org/0000-0003-1878-3253>),\n  Floris Vanderhaeghe [ctb] (<https://orcid.org/0000-0002-6378-6229>),\n  Kevin Tappe [ctb],\n  Harris McGehee [ctb],\n  Tim Mastny [ctb],\n  Aaron Peikert [ctb] (<https://orcid.org/0000-0001-7813-818X>),\n  Mark van der Loo [ctb] (<https://orcid.org/0000-0002-9807-4686>),\n  Chris Muir [ctb] (<https://orcid.org/0000-0003-2555-3878>),\n  Moritz Beller [ctb] (<https://orcid.org/0000-0003-4852-0526>),\n  Sebastian Campbell [ctb],\n  Winston Chang [ctb] (<https://orcid.org/0000-0002-1576-2126>),\n  Dean Attali [ctb] (<https://orcid.org/0000-0002-5645-3493>),\n  Michael Chirico [ctb] (<https://orcid.org/0000-0003-0787-087X>),\n  Kevin Ushey [ctb]",
        "Maintainer": "Dirk Eddelbuettel <edd@debian.org>",
        "Repository": "CRAN",
        "Date/Publication": "2024-08-19 14:10:07 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:16 UTC; windows",
        "Archs": "x64"
      }
    },
    "dplyr": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Type": "Package",
        "Package": "dplyr",
        "Title": "A Grammar of Data Manipulation",
        "Version": "1.1.4",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"0000-0003-4757-117X\")),\n    person(\"Romain\", \"François\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-2444-4226\")),\n    person(\"Lionel\", \"Henry\", role = \"aut\"),\n    person(\"Kirill\", \"Müller\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-1416-3412\")),\n    person(\"Davis\", \"Vaughan\", , \"davis@posit.co\", role = \"aut\",\n           comment = c(ORCID = \"0000-0003-4777-038X\")),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "A fast, consistent tool for working with data frame like\n    objects, both in memory and out of memory.",
        "License": "MIT + file LICENSE",
        "URL": "https://dplyr.tidyverse.org, https://github.com/tidyverse/dplyr",
        "BugReports": "https://github.com/tidyverse/dplyr/issues",
        "Depends": "R (>= 3.5.0)",
        "Imports": "cli (>= 3.4.0), generics, glue (>= 1.3.2), lifecycle (>=\n1.0.3), magrittr (>= 1.5), methods, pillar (>= 1.9.0), R6,\nrlang (>= 1.1.0), tibble (>= 3.2.0), tidyselect (>= 1.2.0),\nutils, vctrs (>= 0.6.4)",
        "Suggests": "bench, broom, callr, covr, DBI, dbplyr (>= 2.2.1), ggplot2,\nknitr, Lahman, lobstr, microbenchmark, nycflights13, purrr,\nrmarkdown, RMySQL, RPostgreSQL, RSQLite, stringi (>= 1.7.6),\ntestthat (>= 3.1.5), tidyr (>= 1.3.0), withr",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "tidyverse, shiny, pkgdown, tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "LazyData": "true",
        "RoxygenNote": "7.2.3",
        "NeedsCompilation": "yes",
        "Packaged": "2023-11-16 21:48:56 UTC; hadleywickham",
        "Author": "Hadley Wickham [aut, cre] (<https://orcid.org/0000-0003-4757-117X>),\n  Romain François [aut] (<https://orcid.org/0000-0002-2444-4226>),\n  Lionel Henry [aut],\n  Kirill Müller [aut] (<https://orcid.org/0000-0002-1416-3412>),\n  Davis Vaughan [aut] (<https://orcid.org/0000-0003-4777-038X>),\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Hadley Wickham <hadley@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2023-11-17 16:50:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 03:35:04 UTC; windows",
        "Archs": "x64"
      }
    },
    "evaluate": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Type": "Package",
        "Package": "evaluate",
        "Title": "Parsing and Evaluation Tools that Provide More Details than the\nDefault",
        "Version": "1.0.3",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = c(\"aut\", \"cre\")),\n    person(\"Yihui\", \"Xie\", role = \"aut\",\n           comment = c(ORCID = \"0000-0003-0645-5666\")),\n    person(\"Michael\", \"Lawrence\", role = \"ctb\"),\n    person(\"Thomas\", \"Kluyver\", role = \"ctb\"),\n    person(\"Jeroen\", \"Ooms\", role = \"ctb\"),\n    person(\"Barret\", \"Schloerke\", role = \"ctb\"),\n    person(\"Adam\", \"Ryczkowski\", role = \"ctb\"),\n    person(\"Hiroaki\", \"Yutani\", role = \"ctb\"),\n    person(\"Michel\", \"Lang\", role = \"ctb\"),\n    person(\"Karolis\", \"Koncevičius\", role = \"ctb\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "Parsing and evaluation tools that make it easy to recreate\n    the command line behaviour of R.",
        "License": "MIT + file LICENSE",
        "URL": "https://evaluate.r-lib.org/, https://github.com/r-lib/evaluate",
        "BugReports": "https://github.com/r-lib/evaluate/issues",
        "Depends": "R (>= 3.6.0)",
        "Suggests": "callr, covr, ggplot2 (>= 3.3.6), lattice, methods, pkgload,\nrlang, knitr, testthat (>= 3.0.0), withr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.2",
        "NeedsCompilation": "no",
        "Packaged": "2025-01-10 22:27:28 UTC; hadleywickham",
        "Author": "Hadley Wickham [aut, cre],\n  Yihui Xie [aut] (<https://orcid.org/0000-0003-0645-5666>),\n  Michael Lawrence [ctb],\n  Thomas Kluyver [ctb],\n  Jeroen Ooms [ctb],\n  Barret Schloerke [ctb],\n  Adam Ryczkowski [ctb],\n  Hiroaki Yutani [ctb],\n  Michel Lang [ctb],\n  Karolis Koncevičius [ctb],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Hadley Wickham <hadley@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2025-01-10 23:00:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 01:52:14 UTC; windows"
      }
    },
    "fansi": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "fansi",
        "Title": "ANSI Control Sequence Aware String Functions",
        "Description": "Counterparts to R string manipulation functions that account for\n   the effects of ANSI text formatting control sequences.",
        "Version": "1.0.6",
        "Authors@R": "c(\n    person(\"Brodie\", \"Gaslam\", email=\"brodie.gaslam@yahoo.com\",\n    role=c(\"aut\", \"cre\")),\n    person(\"Elliott\", \"Sales De Andrade\", role=\"ctb\"),\n    person(family=\"R Core Team\",\n    email=\"R-core@r-project.org\", role=\"cph\",\n    comment=\"UTF8 byte length calcs from src/util.c\"\n    ))",
        "Depends": "R (>= 3.1.0)",
        "License": "GPL-2 | GPL-3",
        "URL": "https://github.com/brodieG/fansi",
        "BugReports": "https://github.com/brodieG/fansi/issues",
        "VignetteBuilder": "knitr",
        "Suggests": "unitizer, knitr, rmarkdown",
        "Imports": "grDevices, utils",
        "RoxygenNote": "7.2.3",
        "Encoding": "UTF-8",
        "Collate": "'constants.R' 'fansi-package.R' 'internal.R' 'load.R' 'misc.R'\n'nchar.R' 'strwrap.R' 'strtrim.R' 'strsplit.R' 'substr2.R'\n'trimws.R' 'tohtml.R' 'unhandled.R' 'normalize.R' 'sgr.R'",
        "NeedsCompilation": "yes",
        "Packaged": "2023-12-06 00:59:41 UTC; bg",
        "Author": "Brodie Gaslam [aut, cre],\n  Elliott Sales De Andrade [ctb],\n  R Core Team [cph] (UTF8 byte length calcs from src/util.c)",
        "Maintainer": "Brodie Gaslam <brodie.gaslam@yahoo.com>",
        "Repository": "CRAN",
        "Date/Publication": "2023-12-08 03:30:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:15 UTC; windows",
        "Archs": "x64"
      }
    },
    "farver": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Type": "Package",
        "Package": "farver",
        "Title": "High Performance Colour Space Manipulation",
        "Version": "2.1.2",
        "Authors@R": "c(\n    person(\"Thomas Lin\", \"Pedersen\", , \"thomas.pedersen@posit.co\", role = c(\"cre\", \"aut\"),\n           comment = c(ORCID = \"0000-0002-5147-4711\")),\n    person(\"Berendea\", \"Nicolae\", role = \"aut\",\n           comment = \"Author of the ColorSpace C++ library\"),\n    person(\"Romain\", \"François\", , \"romain@purrple.cat\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-2444-4226\")),\n    person(\"Posit, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "The encoding of colour can be handled in many different ways,\n    using different colour spaces. As different colour spaces have\n    different uses, efficient conversion between these representations are\n    important. The 'farver' package provides a set of functions that gives\n    access to very fast colour space conversion and comparisons\n    implemented in C++, and offers speed improvements over the\n    'convertColor' function in the 'grDevices' package.",
        "License": "MIT + file LICENSE",
        "URL": "https://farver.data-imaginist.com,\nhttps://github.com/thomasp85/farver",
        "BugReports": "https://github.com/thomasp85/farver/issues",
        "Suggests": "covr, testthat (>= 3.0.0)",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.1",
        "NeedsCompilation": "yes",
        "Packaged": "2024-05-13 08:31:27 UTC; thomas",
        "Author": "Thomas Lin Pedersen [cre, aut]\n    (<https://orcid.org/0000-0002-5147-4711>),\n  Berendea Nicolae [aut] (Author of the ColorSpace C++ library),\n  Romain François [aut] (<https://orcid.org/0000-0002-2444-4226>),\n  Posit, PBC [cph, fnd]",
        "Maintainer": "Thomas Lin Pedersen <thomas.pedersen@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-05-13 09:33:09 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:14 UTC; windows",
        "Archs": "x64"
      }
    },
    "fastmap": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "fastmap",
        "Title": "Fast Data Structures",
        "Version": "1.2.0",
        "Authors@R": "c(\n    person(\"Winston\", \"Chang\", email = \"winston@posit.co\", role = c(\"aut\", \"cre\")),\n    person(given = \"Posit Software, PBC\", role = c(\"cph\", \"fnd\")),\n    person(given = \"Tessil\", role = \"cph\", comment = \"hopscotch_map library\")\n    )",
        "Description": "Fast implementation of data structures, including a key-value\n    store, stack, and queue. Environments are commonly used as key-value stores\n    in R, but every time a new key is used, it is added to R's global symbol\n    table, causing a small amount of memory leakage. This can be problematic in\n    cases where many different keys are used. Fastmap avoids this memory leak\n    issue by implementing the map using data structures in C++.",
        "License": "MIT + file LICENSE",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.3",
        "Suggests": "testthat (>= 2.1.1)",
        "URL": "https://r-lib.github.io/fastmap/, https://github.com/r-lib/fastmap",
        "BugReports": "https://github.com/r-lib/fastmap/issues",
        "NeedsCompilation": "yes",
        "Packaged": "2024-05-14 17:54:13 UTC; winston",
        "Author": "Winston Chang [aut, cre],\n  Posit Software, PBC [cph, fnd],\n  Tessil [cph] (hopscotch_map library)",
        "Maintainer": "Winston Chang <winston@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-05-15 09:00:07 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:14 UTC; windows",
        "Archs": "x64"
      }
    },
    "fontawesome": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Type": "Package",
        "Package": "fontawesome",
        "Version": "0.5.3",
        "Title": "Easily Work with 'Font Awesome' Icons",
        "Description": "Easily and flexibly insert 'Font Awesome' icons into 'R Markdown'\n    documents and 'Shiny' apps. These icons can be inserted into HTML content\n    through inline 'SVG' tags or 'i' tags. There is also a utility function for\n    exporting 'Font Awesome' icons as 'PNG' images for those situations where\n    raster graphics are needed.",
        "Authors@R": "c(\n    person(\"Richard\", \"Iannone\", , \"rich@posit.co\", c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"0000-0003-3925-190X\")),\n    person(\"Christophe\", \"Dervieux\", , \"cderv@posit.co\", role = \"ctb\",\n           comment = c(ORCID = \"0000-0003-4474-2498\")),\n    person(\"Winston\", \"Chang\", , \"winston@posit.co\", role = \"ctb\"),\n    person(\"Dave\", \"Gandy\", role = c(\"ctb\", \"cph\"),\n           comment = \"Font-Awesome font\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n    )",
        "License": "MIT + file LICENSE",
        "URL": "https://github.com/rstudio/fontawesome,\nhttps://rstudio.github.io/fontawesome/",
        "BugReports": "https://github.com/rstudio/fontawesome/issues",
        "Encoding": "UTF-8",
        "ByteCompile": "true",
        "RoxygenNote": "7.3.2",
        "Depends": "R (>= 3.3.0)",
        "Imports": "rlang (>= 1.0.6), htmltools (>= 0.5.1.1)",
        "Suggests": "covr, dplyr (>= 1.0.8), gt (>= 0.9.0), knitr (>= 1.31),\ntestthat (>= 3.0.0), rsvg",
        "Config/testthat/edition": "3",
        "NeedsCompilation": "no",
        "Packaged": "2024-11-16 17:06:16 UTC; riannone",
        "Author": "Richard Iannone [aut, cre] (<https://orcid.org/0000-0003-3925-190X>),\n  Christophe Dervieux [ctb] (<https://orcid.org/0000-0003-4474-2498>),\n  Winston Chang [ctb],\n  Dave Gandy [ctb, cph] (Font-Awesome font),\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Richard Iannone <rich@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-11-16 17:30:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 02:54:42 UTC; windows"
      }
    },
    "fs": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "fs",
        "Title": "Cross-Platform File System Operations Based on 'libuv'",
        "Version": "1.6.5",
        "Authors@R": "c(\n    person(\"Jim\", \"Hester\", role = \"aut\"),\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = \"aut\"),\n    person(\"Gábor\", \"Csárdi\", , \"csardi.gabor@gmail.com\", role = c(\"aut\", \"cre\")),\n    person(\"libuv project contributors\", role = \"cph\",\n           comment = \"libuv library\"),\n    person(\"Joyent, Inc. and other Node contributors\", role = \"cph\",\n           comment = \"libuv library\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "A cross-platform interface to file system operations, built\n    on top of the 'libuv' C library.",
        "License": "MIT + file LICENSE",
        "URL": "https://fs.r-lib.org, https://github.com/r-lib/fs",
        "BugReports": "https://github.com/r-lib/fs/issues",
        "Depends": "R (>= 3.6)",
        "Imports": "methods",
        "Suggests": "covr, crayon, knitr, pillar (>= 1.0.0), rmarkdown, spelling,\ntestthat (>= 3.0.0), tibble (>= 1.1.0), vctrs (>= 0.3.0), withr",
        "VignetteBuilder": "knitr",
        "ByteCompile": "true",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Copyright": "file COPYRIGHTS",
        "Encoding": "UTF-8",
        "Language": "en-US",
        "RoxygenNote": "7.2.3",
        "SystemRequirements": "GNU make",
        "NeedsCompilation": "yes",
        "Packaged": "2024-10-28 22:30:40 UTC; gaborcsardi",
        "Author": "Jim Hester [aut],\n  Hadley Wickham [aut],\n  Gábor Csárdi [aut, cre],\n  libuv project contributors [cph] (libuv library),\n  Joyent, Inc. and other Node contributors [cph] (libuv library),\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Gábor Csárdi <csardi.gabor@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-10-30 08:40:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:16 UTC; windows",
        "Archs": "x64"
      }
    },
    "generics": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "generics",
        "Title": "Common S3 Generics not Provided by Base R Methods Related to\nModel Fitting",
        "Version": "0.1.3",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@rstudio.com\", role = c(\"aut\", \"cre\")),\n    person(\"Max\", \"Kuhn\", , \"max@rstudio.com\", role = \"aut\"),\n    person(\"Davis\", \"Vaughan\", , \"davis@rstudio.com\", role = \"aut\"),\n    person(\"RStudio\", role = \"cph\")\n  )",
        "Description": "In order to reduce potential package dependencies and\n    conflicts, generics provides a number of commonly used S3 generics.",
        "License": "MIT + file LICENSE",
        "URL": "https://generics.r-lib.org, https://github.com/r-lib/generics",
        "BugReports": "https://github.com/r-lib/generics/issues",
        "Depends": "R (>= 3.2)",
        "Imports": "methods",
        "Suggests": "covr, pkgload, testthat (>= 3.0.0), tibble, withr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.0",
        "NeedsCompilation": "no",
        "Packaged": "2022-07-05 14:52:13 UTC; davis",
        "Author": "Hadley Wickham [aut, cre],\n  Max Kuhn [aut],\n  Davis Vaughan [aut],\n  RStudio [cph]",
        "Maintainer": "Hadley Wickham <hadley@rstudio.com>",
        "Repository": "CRAN",
        "Date/Publication": "2022-07-05 19:40:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 01:52:15 UTC; windows"
      }
    },
    "ggplot2": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "ggplot2",
        "Version": "3.5.1",
        "Title": "Create Elegant Data Visualisations Using the Grammar of Graphics",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = \"aut\",\n           comment = c(ORCID = \"0000-0003-4757-117X\")),\n    person(\"Winston\", \"Chang\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-1576-2126\")),\n    person(\"Lionel\", \"Henry\", role = \"aut\"),\n    person(\"Thomas Lin\", \"Pedersen\", , \"thomas.pedersen@posit.co\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"0000-0002-5147-4711\")),\n    person(\"Kohske\", \"Takahashi\", role = \"aut\"),\n    person(\"Claus\", \"Wilke\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-7470-9261\")),\n    person(\"Kara\", \"Woo\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-5125-4188\")),\n    person(\"Hiroaki\", \"Yutani\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-3385-7233\")),\n    person(\"Dewey\", \"Dunnington\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-9415-4582\")),\n    person(\"Teun\", \"van den Brand\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-9335-7468\")),\n    person(\"Posit, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "A system for 'declaratively' creating graphics, based on \"The\n    Grammar of Graphics\". You provide the data, tell 'ggplot2' how to map\n    variables to aesthetics, what graphical primitives to use, and it\n    takes care of the details.",
        "License": "MIT + file LICENSE",
        "URL": "https://ggplot2.tidyverse.org,\nhttps://github.com/tidyverse/ggplot2",
        "BugReports": "https://github.com/tidyverse/ggplot2/issues",
        "Depends": "R (>= 3.5)",
        "Imports": "cli, glue, grDevices, grid, gtable (>= 0.1.1), isoband,\nlifecycle (> 1.0.1), MASS, mgcv, rlang (>= 1.1.0), scales (>=\n1.3.0), stats, tibble, vctrs (>= 0.6.0), withr (>= 2.5.0)",
        "Suggests": "covr, dplyr, ggplot2movies, hexbin, Hmisc, knitr, mapproj,\nmaps, multcomp, munsell, nlme, profvis, quantreg, ragg (>=\n1.2.6), RColorBrewer, rmarkdown, rpart, sf (>= 0.7-3), svglite\n(>= 2.1.2), testthat (>= 3.1.2), vdiffr (>= 1.0.6), xml2",
        "Enhances": "sp",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "ggtext, tidyr, forcats, tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "LazyData": "true",
        "RoxygenNote": "7.3.1",
        "Collate": "'ggproto.R' 'ggplot-global.R' 'aaa-.R'\n'aes-colour-fill-alpha.R' 'aes-evaluation.R'\n'aes-group-order.R' 'aes-linetype-size-shape.R'\n'aes-position.R' 'compat-plyr.R' 'utilities.R' 'aes.R'\n'utilities-checks.R' 'legend-draw.R' 'geom-.R'\n'annotation-custom.R' 'annotation-logticks.R' 'geom-polygon.R'\n'geom-map.R' 'annotation-map.R' 'geom-raster.R'\n'annotation-raster.R' 'annotation.R' 'autolayer.R' 'autoplot.R'\n'axis-secondary.R' 'backports.R' 'bench.R' 'bin.R' 'coord-.R'\n'coord-cartesian-.R' 'coord-fixed.R' 'coord-flip.R'\n'coord-map.R' 'coord-munch.R' 'coord-polar.R'\n'coord-quickmap.R' 'coord-radial.R' 'coord-sf.R'\n'coord-transform.R' 'data.R' 'docs_layer.R' 'facet-.R'\n'facet-grid-.R' 'facet-null.R' 'facet-wrap.R' 'fortify-lm.R'\n'fortify-map.R' 'fortify-multcomp.R' 'fortify-spatial.R'\n'fortify.R' 'stat-.R' 'geom-abline.R' 'geom-rect.R'\n'geom-bar.R' 'geom-bin2d.R' 'geom-blank.R' 'geom-boxplot.R'\n'geom-col.R' 'geom-path.R' 'geom-contour.R' 'geom-count.R'\n'geom-crossbar.R' 'geom-segment.R' 'geom-curve.R'\n'geom-defaults.R' 'geom-ribbon.R' 'geom-density.R'\n'geom-density2d.R' 'geom-dotplot.R' 'geom-errorbar.R'\n'geom-errorbarh.R' 'geom-freqpoly.R' 'geom-function.R'\n'geom-hex.R' 'geom-histogram.R' 'geom-hline.R' 'geom-jitter.R'\n'geom-label.R' 'geom-linerange.R' 'geom-point.R'\n'geom-pointrange.R' 'geom-quantile.R' 'geom-rug.R' 'geom-sf.R'\n'geom-smooth.R' 'geom-spoke.R' 'geom-text.R' 'geom-tile.R'\n'geom-violin.R' 'geom-vline.R' 'ggplot2-package.R'\n'grob-absolute.R' 'grob-dotstack.R' 'grob-null.R' 'grouping.R'\n'theme-elements.R' 'guide-.R' 'guide-axis.R'\n'guide-axis-logticks.R' 'guide-axis-stack.R'\n'guide-axis-theta.R' 'guide-legend.R' 'guide-bins.R'\n'guide-colorbar.R' 'guide-colorsteps.R' 'guide-custom.R'\n'layer.R' 'guide-none.R' 'guide-old.R' 'guides-.R'\n'guides-grid.R' 'hexbin.R' 'import-standalone-obj-type.R'\n'import-standalone-types-check.R' 'labeller.R' 'labels.R'\n'layer-sf.R' 'layout.R' 'limits.R' 'margins.R' 'performance.R'\n'plot-build.R' 'plot-construction.R' 'plot-last.R' 'plot.R'\n'position-.R' 'position-collide.R' 'position-dodge.R'\n'position-dodge2.R' 'position-identity.R' 'position-jitter.R'\n'position-jitterdodge.R' 'position-nudge.R' 'position-stack.R'\n'quick-plot.R' 'reshape-add-margins.R' 'save.R' 'scale-.R'\n'scale-alpha.R' 'scale-binned.R' 'scale-brewer.R'\n'scale-colour.R' 'scale-continuous.R' 'scale-date.R'\n'scale-discrete-.R' 'scale-expansion.R' 'scale-gradient.R'\n'scale-grey.R' 'scale-hue.R' 'scale-identity.R'\n'scale-linetype.R' 'scale-linewidth.R' 'scale-manual.R'\n'scale-shape.R' 'scale-size.R' 'scale-steps.R' 'scale-type.R'\n'scale-view.R' 'scale-viridis.R' 'scales-.R' 'stat-align.R'\n'stat-bin.R' 'stat-bin2d.R' 'stat-bindot.R' 'stat-binhex.R'\n'stat-boxplot.R' 'stat-contour.R' 'stat-count.R'\n'stat-density-2d.R' 'stat-density.R' 'stat-ecdf.R'\n'stat-ellipse.R' 'stat-function.R' 'stat-identity.R'\n'stat-qq-line.R' 'stat-qq.R' 'stat-quantilemethods.R'\n'stat-sf-coordinates.R' 'stat-sf.R' 'stat-smooth-methods.R'\n'stat-smooth.R' 'stat-sum.R' 'stat-summary-2d.R'\n'stat-summary-bin.R' 'stat-summary-hex.R' 'stat-summary.R'\n'stat-unique.R' 'stat-ydensity.R' 'summarise-plot.R'\n'summary.R' 'theme.R' 'theme-defaults.R' 'theme-current.R'\n'utilities-break.R' 'utilities-grid.R' 'utilities-help.R'\n'utilities-matrix.R' 'utilities-patterns.R'\n'utilities-resolution.R' 'utilities-tidy-eval.R' 'zxx.R'\n'zzz.R'",
        "NeedsCompilation": "no",
        "Packaged": "2024-04-22 10:39:16 UTC; thomas",
        "Author": "Hadley Wickham [aut] (<https://orcid.org/0000-0003-4757-117X>),\n  Winston Chang [aut] (<https://orcid.org/0000-0002-1576-2126>),\n  Lionel Henry [aut],\n  Thomas Lin Pedersen [aut, cre]\n    (<https://orcid.org/0000-0002-5147-4711>),\n  Kohske Takahashi [aut],\n  Claus Wilke [aut] (<https://orcid.org/0000-0002-7470-9261>),\n  Kara Woo [aut] (<https://orcid.org/0000-0002-5125-4188>),\n  Hiroaki Yutani [aut] (<https://orcid.org/0000-0002-3385-7233>),\n  Dewey Dunnington [aut] (<https://orcid.org/0000-0002-9415-4582>),\n  Teun van den Brand [aut] (<https://orcid.org/0000-0002-9335-7468>),\n  Posit, PBC [cph, fnd]",
        "Maintainer": "Thomas Lin Pedersen <thomas.pedersen@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-04-23 08:00:08 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:35:04 UTC; windows"
      }
    },
    "glue": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "glue",
        "Title": "Interpreted String Literals",
        "Version": "1.8.0",
        "Authors@R": "c(\n    person(\"Jim\", \"Hester\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-2739-7082\")),\n    person(\"Jennifer\", \"Bryan\", , \"jenny@posit.co\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"0000-0002-6983-2759\")),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "An implementation of interpreted string literals, inspired by\n    Python's Literal String Interpolation\n    <https://www.python.org/dev/peps/pep-0498/> and Docstrings\n    <https://www.python.org/dev/peps/pep-0257/> and Julia's Triple-Quoted\n    String Literals\n    <https://docs.julialang.org/en/v1.3/manual/strings/#Triple-Quoted-String-Literals-1>.",
        "License": "MIT + file LICENSE",
        "URL": "https://glue.tidyverse.org/, https://github.com/tidyverse/glue",
        "BugReports": "https://github.com/tidyverse/glue/issues",
        "Depends": "R (>= 3.6)",
        "Imports": "methods",
        "Suggests": "crayon, DBI (>= 1.2.0), dplyr, knitr, magrittr, rlang,\nrmarkdown, RSQLite, testthat (>= 3.2.0), vctrs (>= 0.3.0),\nwaldo (>= 0.5.3), withr",
        "VignetteBuilder": "knitr",
        "ByteCompile": "true",
        "Config/Needs/website": "bench, forcats, ggbeeswarm, ggplot2, R.utils,\nrprintf, tidyr, tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.2",
        "NeedsCompilation": "yes",
        "Packaged": "2024-09-27 16:00:45 UTC; jenny",
        "Author": "Jim Hester [aut] (<https://orcid.org/0000-0002-2739-7082>),\n  Jennifer Bryan [aut, cre] (<https://orcid.org/0000-0002-6983-2759>),\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Jennifer Bryan <jenny@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-09-30 22:30:01 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:16 UTC; windows",
        "Archs": "x64"
      }
    },
    "gtable": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "gtable",
        "Title": "Arrange 'Grobs' in Tables",
        "Version": "0.3.6",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = \"aut\"),\n    person(\"Thomas Lin\", \"Pedersen\", , \"thomas.pedersen@posit.co\", role = c(\"aut\", \"cre\")),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "Tools to make it easier to work with \"tables\" of 'grobs'. The\n    'gtable' package defines a 'gtable' grob class that specifies a grid\n    along with a list of grobs and their placement in the grid. Further\n    the package makes it easy to manipulate and combine 'gtable' objects\n    so that complex compositions can be built up sequentially.",
        "License": "MIT + file LICENSE",
        "URL": "https://gtable.r-lib.org, https://github.com/r-lib/gtable",
        "BugReports": "https://github.com/r-lib/gtable/issues",
        "Depends": "R (>= 4.0)",
        "Imports": "cli, glue, grid, lifecycle, rlang (>= 1.1.0), stats",
        "Suggests": "covr, ggplot2, knitr, profvis, rmarkdown, testthat (>= 3.0.0)",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Config/usethis/last-upkeep": "2024-10-25",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.2",
        "NeedsCompilation": "no",
        "Packaged": "2024-10-25 12:42:05 UTC; thomas",
        "Author": "Hadley Wickham [aut],\n  Thomas Lin Pedersen [aut, cre],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Thomas Lin Pedersen <thomas.pedersen@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-10-25 13:20:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 02:54:40 UTC; windows"
      }
    },
    "highr": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "highr",
        "Type": "Package",
        "Title": "Syntax Highlighting for R Source Code",
        "Version": "0.11",
        "Authors@R": "c(\n    person(\"Yihui\", \"Xie\", role = c(\"aut\", \"cre\"), email = \"xie@yihui.name\", comment = c(ORCID = \"0000-0003-0645-5666\")),\n    person(\"Yixuan\", \"Qiu\", role = \"aut\"),\n    person(\"Christopher\", \"Gandrud\", role = \"ctb\"),\n    person(\"Qiang\", \"Li\", role = \"ctb\")\n    )",
        "Description": "Provides syntax highlighting for R source code. Currently it\n    supports LaTeX and HTML output. Source code of other languages is supported\n    via Andre Simon's highlight package (<https://gitlab.com/saalen/highlight>).",
        "Depends": "R (>= 3.3.0)",
        "Imports": "xfun (>= 0.18)",
        "Suggests": "knitr, markdown, testit",
        "License": "GPL",
        "URL": "https://github.com/yihui/highr",
        "BugReports": "https://github.com/yihui/highr/issues",
        "VignetteBuilder": "knitr",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.1",
        "NeedsCompilation": "no",
        "Packaged": "2024-05-26 19:27:21 UTC; yihui",
        "Author": "Yihui Xie [aut, cre] (<https://orcid.org/0000-0003-0645-5666>),\n  Yixuan Qiu [aut],\n  Christopher Gandrud [ctb],\n  Qiang Li [ctb]",
        "Maintainer": "Yihui Xie <xie@yihui.name>",
        "Repository": "CRAN",
        "Date/Publication": "2024-05-26 20:00:03 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 02:47:25 UTC; windows"
      }
    },
    "hms": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "hms",
        "Title": "Pretty Time of Day",
        "Date": "2023-03-21",
        "Version": "1.1.3",
        "Authors@R": "c(\n    person(\"Kirill\", \"Müller\", role = c(\"aut\", \"cre\"), email = \"kirill@cynkra.com\", comment = c(ORCID = \"0000-0002-1416-3412\")),\n    person(\"R Consortium\", role = \"fnd\"),\n    person(\"RStudio\", role = \"fnd\")\n    )",
        "Description": "Implements an S3 class for storing and formatting time-of-day\n    values, based on the 'difftime' class.",
        "Imports": "lifecycle, methods, pkgconfig, rlang (>= 1.0.2), vctrs (>=\n0.3.8)",
        "Suggests": "crayon, lubridate, pillar (>= 1.1.0), testthat (>= 3.0.0)",
        "License": "MIT + file LICENSE",
        "Encoding": "UTF-8",
        "URL": "https://hms.tidyverse.org/, https://github.com/tidyverse/hms",
        "BugReports": "https://github.com/tidyverse/hms/issues",
        "RoxygenNote": "7.2.3",
        "Config/testthat/edition": "3",
        "Config/autostyle/scope": "line_breaks",
        "Config/autostyle/strict": "false",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "NeedsCompilation": "no",
        "Packaged": "2023-03-21 16:52:11 UTC; kirill",
        "Author": "Kirill Müller [aut, cre] (<https://orcid.org/0000-0002-1416-3412>),\n  R Consortium [fnd],\n  RStudio [fnd]",
        "Maintainer": "Kirill Müller <kirill@cynkra.com>",
        "Repository": "CRAN",
        "Date/Publication": "2023-03-21 18:10:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:12:07 UTC; windows"
      }
    },
    "htmltools": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Type": "Package",
        "Package": "htmltools",
        "Title": "Tools for HTML",
        "Version": "0.5.8.1",
        "Authors@R": "c(\n    person(\"Joe\", \"Cheng\", , \"joe@posit.co\", role = \"aut\"),\n    person(\"Carson\", \"Sievert\", , \"carson@posit.co\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"0000-0002-4958-2844\")),\n    person(\"Barret\", \"Schloerke\", , \"barret@posit.co\", role = \"aut\",\n           comment = c(ORCID = \"0000-0001-9986-114X\")),\n    person(\"Winston\", \"Chang\", , \"winston@posit.co\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-1576-2126\")),\n    person(\"Yihui\", \"Xie\", , \"yihui@posit.co\", role = \"aut\"),\n    person(\"Jeff\", \"Allen\", role = \"aut\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "Tools for HTML generation and output.",
        "License": "GPL (>= 2)",
        "URL": "https://github.com/rstudio/htmltools,\nhttps://rstudio.github.io/htmltools/",
        "BugReports": "https://github.com/rstudio/htmltools/issues",
        "Depends": "R (>= 2.14.1)",
        "Imports": "base64enc, digest, fastmap (>= 1.1.0), grDevices, rlang (>=\n1.0.0), utils",
        "Suggests": "Cairo, markdown, ragg, shiny, testthat, withr",
        "Enhances": "knitr",
        "Config/Needs/check": "knitr",
        "Config/Needs/website": "rstudio/quillt, bench",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.1",
        "Collate": "'colors.R' 'fill.R' 'html_dependency.R' 'html_escape.R'\n'html_print.R' 'htmltools-package.R' 'images.R' 'known_tags.R'\n'selector.R' 'staticimports.R' 'tag_query.R' 'utils.R' 'tags.R'\n'template.R'",
        "NeedsCompilation": "yes",
        "Packaged": "2024-04-02 14:26:15 UTC; cpsievert",
        "Author": "Joe Cheng [aut],\n  Carson Sievert [aut, cre] (<https://orcid.org/0000-0002-4958-2844>),\n  Barret Schloerke [aut] (<https://orcid.org/0000-0001-9986-114X>),\n  Winston Chang [aut] (<https://orcid.org/0000-0002-1576-2126>),\n  Yihui Xie [aut],\n  Jeff Allen [aut],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Carson Sievert <carson@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-04-04 05:03:00 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 02:47:27 UTC; windows",
        "Archs": "x64"
      }
    },
    "htmlwidgets": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Type": "Package",
        "Package": "htmlwidgets",
        "Title": "HTML Widgets for R",
        "Version": "1.6.4",
        "Authors@R": "c(\n    person(\"Ramnath\", \"Vaidyanathan\", role = c(\"aut\", \"cph\")),\n    person(\"Yihui\", \"Xie\", role = \"aut\"),\n    person(\"JJ\", \"Allaire\", role = \"aut\"),\n    person(\"Joe\", \"Cheng\", , \"joe@posit.co\", role = \"aut\"),\n    person(\"Carson\", \"Sievert\", , \"carson@posit.co\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"0000-0002-4958-2844\")),\n    person(\"Kenton\", \"Russell\", role = c(\"aut\", \"cph\")),\n    person(\"Ellis\", \"Hughes\", role = \"ctb\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "A framework for creating HTML widgets that render in various\n    contexts including the R console, 'R Markdown' documents, and 'Shiny'\n    web applications.",
        "License": "MIT + file LICENSE",
        "URL": "https://github.com/ramnathv/htmlwidgets",
        "BugReports": "https://github.com/ramnathv/htmlwidgets/issues",
        "Imports": "grDevices, htmltools (>= 0.5.7), jsonlite (>= 0.9.16), knitr\n(>= 1.8), rmarkdown, yaml",
        "Suggests": "testthat",
        "Enhances": "shiny (>= 1.1)",
        "VignetteBuilder": "knitr",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.3",
        "NeedsCompilation": "no",
        "Packaged": "2023-12-06 00:11:16 UTC; cpsievert",
        "Author": "Ramnath Vaidyanathan [aut, cph],\n  Yihui Xie [aut],\n  JJ Allaire [aut],\n  Joe Cheng [aut],\n  Carson Sievert [aut, cre] (<https://orcid.org/0000-0002-4958-2844>),\n  Kenton Russell [aut, cph],\n  Ellis Hughes [ctb],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Carson Sievert <carson@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2023-12-06 06:00:06 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:35:04 UTC; windows"
      }
    },
    "httpuv": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Type": "Package",
        "Package": "httpuv",
        "Title": "HTTP and WebSocket Server Library",
        "Version": "1.6.15",
        "Authors@R": "c(\n    person(\"Joe\", \"Cheng\", , \"joe@posit.co\", role = \"aut\"),\n    person(\"Winston\", \"Chang\", , \"winston@posit.co\", role = c(\"aut\", \"cre\")),\n    person(\"Posit, PBC\", \"fnd\", role = \"cph\"),\n    person(\"Hector\", \"Corrada Bravo\", role = \"ctb\"),\n    person(\"Jeroen\", \"Ooms\", role = \"ctb\"),\n    person(\"Andrzej\", \"Krzemienski\", role = \"cph\",\n           comment = \"optional.hpp\"),\n    person(\"libuv project contributors\", role = \"cph\",\n           comment = \"libuv library, see src/libuv/AUTHORS file\"),\n    person(\"Joyent, Inc. and other Node contributors\", role = \"cph\",\n           comment = \"libuv library, see src/libuv/AUTHORS file; and http-parser library, see src/http-parser/AUTHORS file\"),\n    person(\"Niels\", \"Provos\", role = \"cph\",\n           comment = \"libuv subcomponent: tree.h\"),\n    person(\"Internet Systems Consortium, Inc.\", role = \"cph\",\n           comment = \"libuv subcomponent: inet_pton and inet_ntop, contained in src/libuv/src/inet.c\"),\n    person(\"Alexander\", \"Chemeris\", role = \"cph\",\n           comment = \"libuv subcomponent: stdint-msvc2008.h (from msinttypes)\"),\n    person(\"Google, Inc.\", role = \"cph\",\n           comment = \"libuv subcomponent: pthread-fixes.c\"),\n    person(\"Sony Mobile Communcations AB\", role = \"cph\",\n           comment = \"libuv subcomponent: pthread-fixes.c\"),\n    person(\"Berkeley Software Design Inc.\", role = \"cph\",\n           comment = \"libuv subcomponent: android-ifaddrs.h, android-ifaddrs.c\"),\n    person(\"Kenneth\", \"MacKay\", role = \"cph\",\n           comment = \"libuv subcomponent: android-ifaddrs.h, android-ifaddrs.c\"),\n    person(\"Emergya (Cloud4all, FP7/2007-2013, grant agreement no 289016)\", role = \"cph\",\n           comment = \"libuv subcomponent: android-ifaddrs.h, android-ifaddrs.c\"),\n    person(\"Steve\", \"Reid\", role = \"aut\",\n           comment = \"SHA-1 implementation\"),\n    person(\"James\", \"Brown\", role = \"aut\",\n           comment = \"SHA-1 implementation\"),\n    person(\"Bob\", \"Trower\", role = \"aut\",\n           comment = \"base64 implementation\"),\n    person(\"Alexander\", \"Peslyak\", role = \"aut\",\n           comment = \"MD5 implementation\"),\n    person(\"Trantor Standard Systems\", role = \"cph\",\n           comment = \"base64 implementation\"),\n    person(\"Igor\", \"Sysoev\", role = \"cph\",\n           comment = \"http-parser\")\n  )",
        "Description": "Provides low-level socket and protocol support for handling\n    HTTP and WebSocket requests directly from within R. It is primarily\n    intended as a building block for other packages, rather than making it\n    particularly easy to create complete web applications using httpuv\n    alone.  httpuv is built on top of the libuv and http-parser C\n    libraries, both of which were developed by Joyent, Inc. (See LICENSE\n    file for libuv and http-parser license information.)",
        "License": "GPL (>= 2) | file LICENSE",
        "URL": "https://github.com/rstudio/httpuv",
        "BugReports": "https://github.com/rstudio/httpuv/issues",
        "Depends": "R (>= 2.15.1)",
        "Imports": "later (>= 0.8.0), promises, R6, Rcpp (>= 1.0.7), utils",
        "Suggests": "callr, curl, testthat, websocket",
        "LinkingTo": "later, Rcpp",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.1",
        "SystemRequirements": "GNU make, zlib",
        "Collate": "'RcppExports.R' 'httpuv.R' 'random_port.R' 'server.R'\n'staticServer.R' 'static_paths.R' 'utils.R'",
        "NeedsCompilation": "yes",
        "Packaged": "2024-03-25 21:06:08 UTC; cpsievert",
        "Author": "Joe Cheng [aut],\n  Winston Chang [aut, cre],\n  Posit, PBC fnd [cph],\n  Hector Corrada Bravo [ctb],\n  Jeroen Ooms [ctb],\n  Andrzej Krzemienski [cph] (optional.hpp),\n  libuv project contributors [cph] (libuv library, see src/libuv/AUTHORS\n    file),\n  Joyent, Inc. and other Node contributors [cph] (libuv library, see\n    src/libuv/AUTHORS file; and http-parser library, see\n    src/http-parser/AUTHORS file),\n  Niels Provos [cph] (libuv subcomponent: tree.h),\n  Internet Systems Consortium, Inc. [cph] (libuv subcomponent: inet_pton\n    and inet_ntop, contained in src/libuv/src/inet.c),\n  Alexander Chemeris [cph] (libuv subcomponent: stdint-msvc2008.h (from\n    msinttypes)),\n  Google, Inc. [cph] (libuv subcomponent: pthread-fixes.c),\n  Sony Mobile Communcations AB [cph] (libuv subcomponent:\n    pthread-fixes.c),\n  Berkeley Software Design Inc. [cph] (libuv subcomponent:\n    android-ifaddrs.h, android-ifaddrs.c),\n  Kenneth MacKay [cph] (libuv subcomponent: android-ifaddrs.h,\n    android-ifaddrs.c),\n  Emergya (Cloud4all, FP7/2007-2013, grant agreement no 289016) [cph]\n    (libuv subcomponent: android-ifaddrs.h, android-ifaddrs.c),\n  Steve Reid [aut] (SHA-1 implementation),\n  James Brown [aut] (SHA-1 implementation),\n  Bob Trower [aut] (base64 implementation),\n  Alexander Peslyak [aut] (MD5 implementation),\n  Trantor Standard Systems [cph] (base64 implementation),\n  Igor Sysoev [cph] (http-parser)",
        "Maintainer": "Winston Chang <winston@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-03-26 05:50:06 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 02:54:52 UTC; windows",
        "Archs": "x64"
      }
    },
    "httr": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "httr",
        "Title": "Tools for Working with URLs and HTTP",
        "Version": "1.4.7",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = c(\"aut\", \"cre\")),\n    person(\"Posit, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "Useful tools for working with HTTP organised by HTTP verbs\n    (GET(), POST(), etc). Configuration functions make it easy to control\n    additional request components (authenticate(), add_headers() and so\n    on).",
        "License": "MIT + file LICENSE",
        "URL": "https://httr.r-lib.org/, https://github.com/r-lib/httr",
        "BugReports": "https://github.com/r-lib/httr/issues",
        "Depends": "R (>= 3.5)",
        "Imports": "curl (>= 5.0.2), jsonlite, mime, openssl (>= 0.8), R6",
        "Suggests": "covr, httpuv, jpeg, knitr, png, readr, rmarkdown, testthat\n(>= 0.8.0), xml2",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.3",
        "NeedsCompilation": "no",
        "Packaged": "2023-08-15 02:56:56 UTC; hadleywickham",
        "Author": "Hadley Wickham [aut, cre],\n  Posit, PBC [cph, fnd]",
        "Maintainer": "Hadley Wickham <hadley@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2023-08-15 09:00:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:12:07 UTC; windows"
      }
    },
    "isoband": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "isoband",
        "Title": "Generate Isolines and Isobands from Regularly Spaced Elevation\nGrids",
        "Version": "0.2.7",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"0000-0003-4757-117X\")),\n    person(\"Claus O.\", \"Wilke\", , \"wilke@austin.utexas.edu\", role = \"aut\",\n           comment = c(\"Original author\", ORCID = \"0000-0002-7470-9261\")),\n    person(\"Thomas Lin\", \"Pedersen\", , \"thomasp85@gmail.com\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-5147-4711\"))\n  )",
        "Description": "A fast C++ implementation to generate contour lines\n    (isolines) and contour polygons (isobands) from regularly spaced grids\n    containing elevation data.",
        "License": "MIT + file LICENSE",
        "URL": "https://isoband.r-lib.org",
        "BugReports": "https://github.com/r-lib/isoband/issues",
        "Imports": "grid, utils",
        "Suggests": "covr, ggplot2, knitr, magick, microbenchmark, rmarkdown, sf,\ntestthat, xml2",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.3",
        "SystemRequirements": "C++11",
        "NeedsCompilation": "yes",
        "Packaged": "2022-12-19 20:10:02 UTC; hadleywickham",
        "Author": "Hadley Wickham [aut, cre] (<https://orcid.org/0000-0003-4757-117X>),\n  Claus O. Wilke [aut] (Original author,\n    <https://orcid.org/0000-0002-7470-9261>),\n  Thomas Lin Pedersen [aut] (<https://orcid.org/0000-0002-5147-4711>)",
        "Maintainer": "Hadley Wickham <hadley@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2022-12-20 10:00:13 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:14 UTC; windows",
        "Archs": "x64"
      }
    },
    "jquerylib": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "jquerylib",
        "Title": "Obtain 'jQuery' as an HTML Dependency Object",
        "Version": "0.1.4",
        "Authors@R": "c(\n    person(\"Carson\", \"Sievert\", role = c(\"aut\", \"cre\"), email = \"carson@rstudio.com\", comment = c(ORCID = \"0000-0002-4958-2844\")),\n    person(\"Joe\", \"Cheng\", role = \"aut\", email = \"joe@rstudio.com\"),\n    person(family = \"RStudio\", role = \"cph\"),\n    person(family = \"jQuery Foundation\", role = \"cph\",\n    comment = \"jQuery library and jQuery UI library\"),\n    person(family = \"jQuery contributors\", role = c(\"ctb\", \"cph\"),\n    comment = \"jQuery library; authors listed in inst/lib/jquery-AUTHORS.txt\")\n    )",
        "Description": "Obtain any major version of 'jQuery' (<https://code.jquery.com/>) and use it in any webpage generated by 'htmltools' (e.g. 'shiny', 'htmlwidgets', and 'rmarkdown').\n    Most R users don't need to use this package directly, but other R packages (e.g. 'shiny', 'rmarkdown', etc.) depend on this package to avoid bundling redundant copies of 'jQuery'.",
        "License": "MIT + file LICENSE",
        "Encoding": "UTF-8",
        "Config/testthat/edition": "3",
        "RoxygenNote": "7.0.2",
        "Imports": "htmltools",
        "Suggests": "testthat",
        "NeedsCompilation": "no",
        "Packaged": "2021-04-26 16:40:21 UTC; cpsievert",
        "Author": "Carson Sievert [aut, cre] (<https://orcid.org/0000-0002-4958-2844>),\n  Joe Cheng [aut],\n  RStudio [cph],\n  jQuery Foundation [cph] (jQuery library and jQuery UI library),\n  jQuery contributors [ctb, cph] (jQuery library; authors listed in\n    inst/lib/jquery-AUTHORS.txt)",
        "Maintainer": "Carson Sievert <carson@rstudio.com>",
        "Repository": "CRAN",
        "Date/Publication": "2021-04-26 17:10:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 02:54:39 UTC; windows"
      }
    },
    "jsonlite": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "jsonlite",
        "Version": "1.8.9",
        "Title": "A Simple and Robust JSON Parser and Generator for R",
        "License": "MIT + file LICENSE",
        "Depends": "methods",
        "Authors@R": "c(\n    person(\"Jeroen\", \"Ooms\", role = c(\"aut\", \"cre\"), email = \"jeroenooms@gmail.com\",\n      comment = c(ORCID = \"0000-0002-4035-0289\")),\n    person(\"Duncan\", \"Temple Lang\", role = \"ctb\"),\n    person(\"Lloyd\", \"Hilaiel\", role = \"cph\", comment=\"author of bundled libyajl\"))",
        "URL": "https://jeroen.r-universe.dev/jsonlite\nhttps://arxiv.org/abs/1403.2805",
        "BugReports": "https://github.com/jeroen/jsonlite/issues",
        "Maintainer": "Jeroen Ooms <jeroenooms@gmail.com>",
        "VignetteBuilder": "knitr, R.rsp",
        "Description": "A reasonably fast JSON parser and generator, optimized for statistical \n    data and the web. Offers simple, flexible tools for working with JSON in R, and\n    is particularly powerful for building pipelines and interacting with a web API. \n    The implementation is based on the mapping described in the vignette (Ooms, 2014).\n    In addition to converting JSON data from/to R objects, 'jsonlite' contains \n    functions to stream, validate, and prettify JSON data. The unit tests included \n    with the package verify that all edge cases are encoded and decoded consistently \n    for use with dynamic data in systems and applications.",
        "Suggests": "httr, vctrs, testthat, knitr, rmarkdown, R.rsp, sf",
        "RoxygenNote": "7.2.3",
        "Encoding": "UTF-8",
        "NeedsCompilation": "yes",
        "Packaged": "2024-09-19 15:41:06 UTC; jeroen",
        "Author": "Jeroen Ooms [aut, cre] (<https://orcid.org/0000-0002-4035-0289>),\n  Duncan Temple Lang [ctb],\n  Lloyd Hilaiel [cph] (author of bundled libyajl)",
        "Repository": "CRAN",
        "Date/Publication": "2024-09-20 08:40:14 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:16 UTC; windows",
        "Archs": "x64"
      }
    },
    "knitr": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "knitr",
        "Type": "Package",
        "Title": "A General-Purpose Package for Dynamic Report Generation in R",
        "Version": "1.49",
        "Authors@R": "c(\n    person(\"Yihui\", \"Xie\", role = c(\"aut\", \"cre\"), email = \"xie@yihui.name\", comment = c(ORCID = \"0000-0003-0645-5666\")),\n    person(\"Abhraneel\", \"Sarma\", role = \"ctb\"),\n    person(\"Adam\", \"Vogt\", role = \"ctb\"),\n    person(\"Alastair\", \"Andrew\", role = \"ctb\"),\n    person(\"Alex\", \"Zvoleff\", role = \"ctb\"),\n    person(\"Amar\", \"Al-Zubaidi\", role = \"ctb\"),\n    person(\"Andre\", \"Simon\", role = \"ctb\", comment = \"the CSS files under inst/themes/ were derived from the Highlight package http://www.andre-simon.de\"),\n    person(\"Aron\", \"Atkins\", role = \"ctb\"),\n    person(\"Aaron\", \"Wolen\", role = \"ctb\"),\n    person(\"Ashley\", \"Manton\", role = \"ctb\"),\n    person(\"Atsushi\", \"Yasumoto\", role = \"ctb\", comment = c(ORCID = \"0000-0002-8335-495X\")),\n    person(\"Ben\", \"Baumer\", role = \"ctb\"),\n    person(\"Brian\", \"Diggs\", role = \"ctb\"),\n    person(\"Brian\", \"Zhang\", role = \"ctb\"),\n    person(\"Bulat\", \"Yapparov\", role = \"ctb\"),\n    person(\"Cassio\", \"Pereira\", role = \"ctb\"),\n    person(\"Christophe\", \"Dervieux\", role = \"ctb\"),\n    person(\"David\", \"Hall\", role = \"ctb\"),\n    person(\"David\", \"Hugh-Jones\", role = \"ctb\"),\n    person(\"David\", \"Robinson\", role = \"ctb\"),\n    person(\"Doug\", \"Hemken\", role = \"ctb\"),\n    person(\"Duncan\", \"Murdoch\", role = \"ctb\"),\n    person(\"Elio\", \"Campitelli\", role = \"ctb\"),\n    person(\"Ellis\", \"Hughes\", role = \"ctb\"),\n    person(\"Emily\", \"Riederer\", role = \"ctb\"),\n    person(\"Fabian\", \"Hirschmann\", role = \"ctb\"),\n    person(\"Fitch\", \"Simeon\", role = \"ctb\"),\n    person(\"Forest\", \"Fang\", role = \"ctb\"),\n    person(c(\"Frank\", \"E\", \"Harrell\", \"Jr\"), role = \"ctb\", comment = \"the Sweavel package at inst/misc/Sweavel.sty\"),\n    person(\"Garrick\", \"Aden-Buie\", role = \"ctb\"),\n    person(\"Gregoire\", \"Detrez\", role = \"ctb\"),\n    person(\"Hadley\", \"Wickham\", role = \"ctb\"),\n    person(\"Hao\", \"Zhu\", role = \"ctb\"),\n    person(\"Heewon\", \"Jeon\", role = \"ctb\"),\n    person(\"Henrik\", \"Bengtsson\", role = \"ctb\"),\n    person(\"Hiroaki\", \"Yutani\", role = \"ctb\"),\n    person(\"Ian\", \"Lyttle\", role = \"ctb\"),\n    person(\"Hodges\", \"Daniel\", role = \"ctb\"),\n    person(\"Jacob\", \"Bien\", role = \"ctb\"),\n    person(\"Jake\", \"Burkhead\", role = \"ctb\"),\n    person(\"James\", \"Manton\", role = \"ctb\"),\n    person(\"Jared\", \"Lander\", role = \"ctb\"),\n    person(\"Jason\", \"Punyon\", role = \"ctb\"),\n    person(\"Javier\", \"Luraschi\", role = \"ctb\"),\n    person(\"Jeff\", \"Arnold\", role = \"ctb\"),\n    person(\"Jenny\", \"Bryan\", role = \"ctb\"),\n    person(\"Jeremy\", \"Ashkenas\", role = c(\"ctb\", \"cph\"), comment = \"the CSS file at inst/misc/docco-classic.css\"),\n    person(\"Jeremy\", \"Stephens\", role = \"ctb\"),\n    person(\"Jim\", \"Hester\", role = \"ctb\"),\n    person(\"Joe\", \"Cheng\", role = \"ctb\"),\n    person(\"Johannes\", \"Ranke\", role = \"ctb\"),\n    person(\"John\", \"Honaker\", role = \"ctb\"),\n    person(\"John\", \"Muschelli\", role = \"ctb\"),\n    person(\"Jonathan\", \"Keane\", role = \"ctb\"),\n    person(\"JJ\", \"Allaire\", role = \"ctb\"),\n    person(\"Johan\", \"Toloe\", role = \"ctb\"),\n    person(\"Jonathan\", \"Sidi\", role = \"ctb\"),\n    person(\"Joseph\", \"Larmarange\", role = \"ctb\"),\n    person(\"Julien\", \"Barnier\", role = \"ctb\"),\n    person(\"Kaiyin\", \"Zhong\", role = \"ctb\"),\n    person(\"Kamil\", \"Slowikowski\", role = \"ctb\"),\n    person(\"Karl\", \"Forner\", role = \"ctb\"),\n    person(c(\"Kevin\", \"K.\"), \"Smith\", role = \"ctb\"),\n    person(\"Kirill\", \"Mueller\", role = \"ctb\"),\n    person(\"Kohske\", \"Takahashi\", role = \"ctb\"),\n    person(\"Lorenz\", \"Walthert\", role = \"ctb\"),\n    person(\"Lucas\", \"Gallindo\", role = \"ctb\"),\n    person(\"Marius\", \"Hofert\", role = \"ctb\"),\n    person(\"Martin\", \"Modrák\", role = \"ctb\"),\n    person(\"Michael\", \"Chirico\", role = \"ctb\"),\n    person(\"Michael\", \"Friendly\", role = \"ctb\"),\n    person(\"Michal\", \"Bojanowski\", role = \"ctb\"),\n    person(\"Michel\", \"Kuhlmann\", role = \"ctb\"),\n    person(\"Miller\", \"Patrick\", role = \"ctb\"),\n    person(\"Nacho\", \"Caballero\", role = \"ctb\"),\n    person(\"Nick\", \"Salkowski\", role = \"ctb\"),\n    person(\"Niels Richard\", \"Hansen\", role = \"ctb\"),\n    person(\"Noam\", \"Ross\", role = \"ctb\"),\n    person(\"Obada\", \"Mahdi\", role = \"ctb\"),\n    person(\"Pavel N.\", \"Krivitsky\", role = \"ctb\", comment=c(ORCID = \"0000-0002-9101-3362\")),\n    person(\"Pedro\", \"Faria\", role = \"ctb\"),\n    person(\"Qiang\", \"Li\", role = \"ctb\"),\n    person(\"Ramnath\", \"Vaidyanathan\", role = \"ctb\"),\n    person(\"Richard\", \"Cotton\", role = \"ctb\"),\n    person(\"Robert\", \"Krzyzanowski\", role = \"ctb\"),\n    person(\"Rodrigo\", \"Copetti\", role = \"ctb\"),\n    person(\"Romain\", \"Francois\", role = \"ctb\"),\n    person(\"Ruaridh\", \"Williamson\", role = \"ctb\"),\n    person(\"Sagiru\", \"Mati\", role = \"ctb\", comment = c(ORCID = \"0000-0003-1413-3974\")),\n    person(\"Scott\", \"Kostyshak\", role = \"ctb\"),\n    person(\"Sebastian\", \"Meyer\", role = \"ctb\"),\n    person(\"Sietse\", \"Brouwer\", role = \"ctb\"),\n    person(c(\"Simon\", \"de\"), \"Bernard\", role = \"ctb\"),\n    person(\"Sylvain\", \"Rousseau\", role = \"ctb\"),\n    person(\"Taiyun\", \"Wei\", role = \"ctb\"),\n    person(\"Thibaut\", \"Assus\", role = \"ctb\"),\n    person(\"Thibaut\", \"Lamadon\", role = \"ctb\"),\n    person(\"Thomas\", \"Leeper\", role = \"ctb\"),\n    person(\"Tim\", \"Mastny\", role = \"ctb\"),\n    person(\"Tom\", \"Torsney-Weir\", role = \"ctb\"),\n    person(\"Trevor\", \"Davis\", role = \"ctb\"),\n    person(\"Viktoras\", \"Veitas\", role = \"ctb\"),\n    person(\"Weicheng\", \"Zhu\", role = \"ctb\"),\n    person(\"Wush\", \"Wu\", role = \"ctb\"),\n    person(\"Zachary\", \"Foster\", role = \"ctb\"),\n    person(\"Zhian N.\", \"Kamvar\", role = \"ctb\", comment = c(ORCID = \"0000-0003-1458-7108\")),\n    person(given = \"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n    )",
        "Description": "Provides a general-purpose tool for dynamic report generation in R\n    using Literate Programming techniques.",
        "Depends": "R (>= 3.6.0)",
        "Imports": "evaluate (>= 0.15), highr (>= 0.11), methods, tools, xfun (>=\n0.48), yaml (>= 2.1.19)",
        "Suggests": "bslib, codetools, DBI (>= 0.4-1), digest, formatR, gifski,\ngridSVG, htmlwidgets (>= 0.7), jpeg, JuliaCall (>= 0.11.1),\nmagick, litedown, markdown (>= 1.3), png, ragg, reticulate (>=\n1.4), rgl (>= 0.95.1201), rlang, rmarkdown, sass, showtext,\nstyler (>= 1.2.0), targets (>= 0.6.0), testit, tibble,\ntikzDevice (>= 0.10), tinytex (>= 0.46), webshot, rstudioapi,\nsvglite",
        "License": "GPL",
        "URL": "https://yihui.org/knitr/",
        "BugReports": "https://github.com/yihui/knitr/issues",
        "Encoding": "UTF-8",
        "VignetteBuilder": "litedown, knitr",
        "SystemRequirements": "Package vignettes based on R Markdown v2 or\nreStructuredText require Pandoc (http://pandoc.org). The\nfunction rst2pdf() requires rst2pdf\n(https://github.com/rst2pdf/rst2pdf).",
        "Collate": "'block.R' 'cache.R' 'utils.R' 'citation.R' 'hooks-html.R'\n'plot.R' 'defaults.R' 'concordance.R' 'engine.R' 'highlight.R'\n'themes.R' 'header.R' 'hooks-asciidoc.R' 'hooks-chunk.R'\n'hooks-extra.R' 'hooks-latex.R' 'hooks-md.R' 'hooks-rst.R'\n'hooks-textile.R' 'hooks.R' 'output.R' 'package.R' 'pandoc.R'\n'params.R' 'parser.R' 'pattern.R' 'rocco.R' 'spin.R' 'table.R'\n'template.R' 'utils-conversion.R' 'utils-rd2html.R'\n'utils-string.R' 'utils-sweave.R' 'utils-upload.R'\n'utils-vignettes.R' 'zzz.R'",
        "RoxygenNote": "7.3.2",
        "NeedsCompilation": "no",
        "Packaged": "2024-11-06 23:10:53 UTC; runner",
        "Author": "Yihui Xie [aut, cre] (<https://orcid.org/0000-0003-0645-5666>),\n  Abhraneel Sarma [ctb],\n  Adam Vogt [ctb],\n  Alastair Andrew [ctb],\n  Alex Zvoleff [ctb],\n  Amar Al-Zubaidi [ctb],\n  Andre Simon [ctb] (the CSS files under inst/themes/ were derived from\n    the Highlight package http://www.andre-simon.de),\n  Aron Atkins [ctb],\n  Aaron Wolen [ctb],\n  Ashley Manton [ctb],\n  Atsushi Yasumoto [ctb] (<https://orcid.org/0000-0002-8335-495X>),\n  Ben Baumer [ctb],\n  Brian Diggs [ctb],\n  Brian Zhang [ctb],\n  Bulat Yapparov [ctb],\n  Cassio Pereira [ctb],\n  Christophe Dervieux [ctb],\n  David Hall [ctb],\n  David Hugh-Jones [ctb],\n  David Robinson [ctb],\n  Doug Hemken [ctb],\n  Duncan Murdoch [ctb],\n  Elio Campitelli [ctb],\n  Ellis Hughes [ctb],\n  Emily Riederer [ctb],\n  Fabian Hirschmann [ctb],\n  Fitch Simeon [ctb],\n  Forest Fang [ctb],\n  Frank E Harrell Jr [ctb] (the Sweavel package at inst/misc/Sweavel.sty),\n  Garrick Aden-Buie [ctb],\n  Gregoire Detrez [ctb],\n  Hadley Wickham [ctb],\n  Hao Zhu [ctb],\n  Heewon Jeon [ctb],\n  Henrik Bengtsson [ctb],\n  Hiroaki Yutani [ctb],\n  Ian Lyttle [ctb],\n  Hodges Daniel [ctb],\n  Jacob Bien [ctb],\n  Jake Burkhead [ctb],\n  James Manton [ctb],\n  Jared Lander [ctb],\n  Jason Punyon [ctb],\n  Javier Luraschi [ctb],\n  Jeff Arnold [ctb],\n  Jenny Bryan [ctb],\n  Jeremy Ashkenas [ctb, cph] (the CSS file at\n    inst/misc/docco-classic.css),\n  Jeremy Stephens [ctb],\n  Jim Hester [ctb],\n  Joe Cheng [ctb],\n  Johannes Ranke [ctb],\n  John Honaker [ctb],\n  John Muschelli [ctb],\n  Jonathan Keane [ctb],\n  JJ Allaire [ctb],\n  Johan Toloe [ctb],\n  Jonathan Sidi [ctb],\n  Joseph Larmarange [ctb],\n  Julien Barnier [ctb],\n  Kaiyin Zhong [ctb],\n  Kamil Slowikowski [ctb],\n  Karl Forner [ctb],\n  Kevin K. Smith [ctb],\n  Kirill Mueller [ctb],\n  Kohske Takahashi [ctb],\n  Lorenz Walthert [ctb],\n  Lucas Gallindo [ctb],\n  Marius Hofert [ctb],\n  Martin Modrák [ctb],\n  Michael Chirico [ctb],\n  Michael Friendly [ctb],\n  Michal Bojanowski [ctb],\n  Michel Kuhlmann [ctb],\n  Miller Patrick [ctb],\n  Nacho Caballero [ctb],\n  Nick Salkowski [ctb],\n  Niels Richard Hansen [ctb],\n  Noam Ross [ctb],\n  Obada Mahdi [ctb],\n  Pavel N. Krivitsky [ctb] (<https://orcid.org/0000-0002-9101-3362>),\n  Pedro Faria [ctb],\n  Qiang Li [ctb],\n  Ramnath Vaidyanathan [ctb],\n  Richard Cotton [ctb],\n  Robert Krzyzanowski [ctb],\n  Rodrigo Copetti [ctb],\n  Romain Francois [ctb],\n  Ruaridh Williamson [ctb],\n  Sagiru Mati [ctb] (<https://orcid.org/0000-0003-1413-3974>),\n  Scott Kostyshak [ctb],\n  Sebastian Meyer [ctb],\n  Sietse Brouwer [ctb],\n  Simon de Bernard [ctb],\n  Sylvain Rousseau [ctb],\n  Taiyun Wei [ctb],\n  Thibaut Assus [ctb],\n  Thibaut Lamadon [ctb],\n  Thomas Leeper [ctb],\n  Tim Mastny [ctb],\n  Tom Torsney-Weir [ctb],\n  Trevor Davis [ctb],\n  Viktoras Veitas [ctb],\n  Weicheng Zhu [ctb],\n  Wush Wu [ctb],\n  Zachary Foster [ctb],\n  Zhian N. Kamvar [ctb] (<https://orcid.org/0000-0003-1458-7108>),\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Yihui Xie <xie@yihui.name>",
        "Repository": "CRAN",
        "Date/Publication": "2024-11-08 09:30:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 02:54:40 UTC; windows"
      }
    },
    "labeling": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "labeling",
        "Type": "Package",
        "Title": "Axis Labeling",
        "Version": "0.4.3",
        "Date": "2023-08-29",
        "Author": "Justin Talbot,",
        "Maintainer": "Nuno Sempere <nuno.semperelh@gmail.com>",
        "Description": "Functions which provide a range of axis labeling algorithms. ",
        "License": "MIT + file LICENSE | Unlimited",
        "Collate": "'labeling.R'",
        "NeedsCompilation": "no",
        "Imports": "stats, graphics",
        "Packaged": "2023-08-29 21:01:57 UTC; loki",
        "Repository": "CRAN",
        "Date/Publication": "2023-08-29 22:20:02 UTC",
        "Built": "R 4.4.0; ; 2024-04-23 00:24:00 UTC; windows"
      }
    },
    "later": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "later",
        "Type": "Package",
        "Title": "Utilities for Scheduling Functions to Execute Later with Event\nLoops",
        "Version": "1.4.1",
        "Authors@R": "c(\n    person(\"Winston\", \"Chang\", role = c(\"aut\", \"cre\"), email = \"winston@posit.co\"),\n    person(\"Joe\", \"Cheng\", role = c(\"aut\"), email = \"joe@posit.co\"),\n    person(\"Charlie\", \"Gao\", role = c(\"aut\"), email = \"charlie.gao@shikokuchuo.net\", comment = c(ORCID = \"0000-0002-0750-061X\")),\n    person(family = \"Posit Software, PBC\", role = \"cph\"),\n    person(\"Marcus\", \"Geelnard\", role = c(\"ctb\", \"cph\"), comment = \"TinyCThread library, https://tinycthread.github.io/\"),\n    person(\"Evan\", \"Nemerson\", role = c(\"ctb\", \"cph\"), comment = \"TinyCThread library, https://tinycthread.github.io/\")\n    )",
        "Description": "Executes arbitrary R or C functions some time after the current\n    time, after the R execution stack has emptied. The functions are scheduled\n    in an event loop.",
        "URL": "https://r-lib.github.io/later/, https://github.com/r-lib/later",
        "BugReports": "https://github.com/r-lib/later/issues",
        "License": "MIT + file LICENSE",
        "Imports": "Rcpp (>= 0.12.9), rlang",
        "LinkingTo": "Rcpp",
        "RoxygenNote": "7.3.2",
        "Suggests": "knitr, nanonext, R6, rmarkdown, testthat (>= 2.1.0)",
        "VignetteBuilder": "knitr",
        "Encoding": "UTF-8",
        "NeedsCompilation": "yes",
        "Packaged": "2024-11-27 22:51:17 UTC; jcheng",
        "Author": "Winston Chang [aut, cre],\n  Joe Cheng [aut],\n  Charlie Gao [aut] (<https://orcid.org/0000-0002-0750-061X>),\n  Posit Software, PBC [cph],\n  Marcus Geelnard [ctb, cph] (TinyCThread library,\n    https://tinycthread.github.io/),\n  Evan Nemerson [ctb, cph] (TinyCThread library,\n    https://tinycthread.github.io/)",
        "Maintainer": "Winston Chang <winston@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-11-27 23:40:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:58 UTC; windows",
        "Archs": "x64"
      }
    },
    "lattice": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "lattice",
        "Version": "0.22-6",
        "Date": "2024-03-20",
        "Priority": "recommended",
        "Title": "Trellis Graphics for R",
        "Authors@R": "c(person(\"Deepayan\", \"Sarkar\", role = c(\"aut\", \"cre\"),\n\t            email = \"deepayan.sarkar@r-project.org\",\n\t\t    comment = c(ORCID = \"0000-0003-4107-1553\")),\n              person(\"Felix\", \"Andrews\", role = \"ctb\"),\n\t      person(\"Kevin\", \"Wright\", role = \"ctb\", comment = \"documentation\"),\n\t      person(\"Neil\", \"Klepeis\", role = \"ctb\"),\n\t      person(\"Johan\", \"Larsson\", role = \"ctb\", comment = \"miscellaneous improvements\"),\n              person(\"Zhijian (Jason)\", \"Wen\", role = \"cph\", comment = \"filled contour code\"),\n              person(\"Paul\", \"Murrell\", role = \"ctb\", email = \"paul@stat.auckland.ac.nz\"),\n\t      person(\"Stefan\", \"Eng\", role = \"ctb\", comment = \"violin plot improvements\"),\n\t      person(\"Achim\", \"Zeileis\", role = \"ctb\", comment = \"modern colors\"),\n              person(\"Alexandre\", \"Courtiol\", role = \"ctb\", comment = \"generics for larrows, lpolygon, lrect and lsegments\")\n\t      )",
        "Description": "A powerful and elegant high-level data visualization\n  system inspired by Trellis graphics, with an emphasis on\n  multivariate data. Lattice is sufficient for typical graphics needs,\n  and is also flexible enough to handle most nonstandard requirements.\n  See ?Lattice for an introduction.",
        "Depends": "R (>= 4.0.0)",
        "Suggests": "KernSmooth, MASS, latticeExtra, colorspace",
        "Imports": "grid, grDevices, graphics, stats, utils",
        "Enhances": "chron, zoo",
        "LazyLoad": "yes",
        "LazyData": "yes",
        "License": "GPL (>= 2)",
        "URL": "https://lattice.r-forge.r-project.org/",
        "BugReports": "https://github.com/deepayan/lattice/issues",
        "NeedsCompilation": "yes",
        "Packaged": "2024-03-20 03:08:45 UTC; deepayan",
        "Author": "Deepayan Sarkar [aut, cre] (<https://orcid.org/0000-0003-4107-1553>),\n  Felix Andrews [ctb],\n  Kevin Wright [ctb] (documentation),\n  Neil Klepeis [ctb],\n  Johan Larsson [ctb] (miscellaneous improvements),\n  Zhijian (Jason) Wen [cph] (filled contour code),\n  Paul Murrell [ctb],\n  Stefan Eng [ctb] (violin plot improvements),\n  Achim Zeileis [ctb] (modern colors),\n  Alexandre Courtiol [ctb] (generics for larrows, lpolygon, lrect and\n    lsegments)",
        "Maintainer": "Deepayan Sarkar <deepayan.sarkar@r-project.org>",
        "Repository": "CRAN",
        "Date/Publication": "2024-03-20 06:10:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2024-10-31 16:49:37 UTC; windows",
        "Archs": "x64"
      }
    },
    "lazyeval": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "lazyeval",
        "Version": "0.2.2",
        "Title": "Lazy (Non-Standard) Evaluation",
        "Description": "An alternative approach to non-standard evaluation using\n    formulas. Provides a full implementation of LISP style 'quasiquotation',\n    making it easier to generate code with other code.",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", ,\"hadley@rstudio.com\", c(\"aut\", \"cre\")),\n    person(\"RStudio\", role = \"cph\")\n    )",
        "License": "GPL-3",
        "LazyData": "true",
        "Depends": "R (>= 3.1.0)",
        "Suggests": "knitr, rmarkdown (>= 0.2.65), testthat, covr",
        "VignetteBuilder": "knitr",
        "RoxygenNote": "6.1.1",
        "NeedsCompilation": "yes",
        "Packaged": "2019-03-15 14:18:01 UTC; lionel",
        "Author": "Hadley Wickham [aut, cre],\n  RStudio [cph]",
        "Maintainer": "Hadley Wickham <hadley@rstudio.com>",
        "Repository": "CRAN",
        "Date/Publication": "2019-03-15 17:50:07 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:53:01 UTC; windows",
        "Archs": "x64"
      }
    },
    "lifecycle": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "lifecycle",
        "Title": "Manage the Life Cycle of your Package Functions",
        "Version": "1.0.4",
        "Authors@R": "c(\n    person(\"Lionel\", \"Henry\", , \"lionel@posit.co\", role = c(\"aut\", \"cre\")),\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = \"aut\",\n           comment = c(ORCID = \"0000-0003-4757-117X\")),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "Manage the life cycle of your exported functions with shared\n    conventions, documentation badges, and user-friendly deprecation\n    warnings.",
        "License": "MIT + file LICENSE",
        "URL": "https://lifecycle.r-lib.org/, https://github.com/r-lib/lifecycle",
        "BugReports": "https://github.com/r-lib/lifecycle/issues",
        "Depends": "R (>= 3.6)",
        "Imports": "cli (>= 3.4.0), glue, rlang (>= 1.1.0)",
        "Suggests": "covr, crayon, knitr, lintr, rmarkdown, testthat (>= 3.0.1),\ntibble, tidyverse, tools, vctrs, withr",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "tidyverse/tidytemplate, usethis",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.1",
        "NeedsCompilation": "no",
        "Packaged": "2023-11-06 16:07:36 UTC; lionel",
        "Author": "Lionel Henry [aut, cre],\n  Hadley Wickham [aut] (<https://orcid.org/0000-0003-4757-117X>),\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Lionel Henry <lionel@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2023-11-07 10:10:10 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 02:47:26 UTC; windows"
      }
    },
    "lubridate": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Type": "Package",
        "Package": "lubridate",
        "Title": "Make Dealing with Dates a Little Easier",
        "Version": "1.9.4",
        "Authors@R": "c(\n    person(\"Vitalie\", \"Spinu\", , \"spinuvit@gmail.com\", role = c(\"aut\", \"cre\")),\n    person(\"Garrett\", \"Grolemund\", role = \"aut\"),\n    person(\"Hadley\", \"Wickham\", role = \"aut\"),\n    person(\"Davis\", \"Vaughan\", role = \"ctb\"),\n    person(\"Ian\", \"Lyttle\", role = \"ctb\"),\n    person(\"Imanuel\", \"Costigan\", role = \"ctb\"),\n    person(\"Jason\", \"Law\", role = \"ctb\"),\n    person(\"Doug\", \"Mitarotonda\", role = \"ctb\"),\n    person(\"Joseph\", \"Larmarange\", role = \"ctb\"),\n    person(\"Jonathan\", \"Boiser\", role = \"ctb\"),\n    person(\"Chel Hee\", \"Lee\", role = \"ctb\")\n  )",
        "Maintainer": "Vitalie Spinu <spinuvit@gmail.com>",
        "Description": "Functions to work with date-times and time-spans: fast and\n    user friendly parsing of date-time data, extraction and updating of\n    components of a date-time (years, months, days, hours, minutes, and\n    seconds), algebraic manipulation on date-time and time-span objects.\n    The 'lubridate' package has a consistent and memorable syntax that\n    makes working with dates easy and fun.",
        "License": "GPL (>= 2)",
        "URL": "https://lubridate.tidyverse.org,\nhttps://github.com/tidyverse/lubridate",
        "BugReports": "https://github.com/tidyverse/lubridate/issues",
        "Depends": "methods, R (>= 3.2)",
        "Imports": "generics, timechange (>= 0.3.0)",
        "Suggests": "covr, knitr, rmarkdown, testthat (>= 2.1.0), vctrs (>= 0.6.5)",
        "Enhances": "chron, data.table, timeDate, tis, zoo",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "LazyData": "true",
        "RoxygenNote": "7.2.3",
        "SystemRequirements": "C++11, A system with zoneinfo data (e.g.\n/usr/share/zoneinfo). On Windows the zoneinfo included with R\nis used.",
        "Collate": "'Dates.r' 'POSIXt.r' 'util.r' 'parse.r' 'timespans.r'\n'intervals.r' 'difftimes.r' 'durations.r' 'periods.r'\n'accessors-date.R' 'accessors-day.r' 'accessors-dst.r'\n'accessors-hour.r' 'accessors-minute.r' 'accessors-month.r'\n'accessors-quarter.r' 'accessors-second.r' 'accessors-tz.r'\n'accessors-week.r' 'accessors-year.r' 'am-pm.r' 'time-zones.r'\n'numeric.r' 'coercion.r' 'constants.r' 'cyclic_encoding.r'\n'data.r' 'decimal-dates.r' 'deprecated.r' 'format_ISO8601.r'\n'guess.r' 'hidden.r' 'instants.r' 'leap-years.r'\n'ops-addition.r' 'ops-compare.r' 'ops-division.r'\n'ops-integer-division.r' 'ops-m+.r' 'ops-modulo.r'\n'ops-multiplication.r' 'ops-subtraction.r' 'package.r'\n'pretty.r' 'round.r' 'stamp.r' 'tzdir.R' 'update.r' 'vctrs.R'\n'zzz.R'",
        "NeedsCompilation": "yes",
        "Packaged": "2024-12-07 23:41:45 UTC; vitalie",
        "Author": "Vitalie Spinu [aut, cre],\n  Garrett Grolemund [aut],\n  Hadley Wickham [aut],\n  Davis Vaughan [ctb],\n  Ian Lyttle [ctb],\n  Imanuel Costigan [ctb],\n  Jason Law [ctb],\n  Doug Mitarotonda [ctb],\n  Joseph Larmarange [ctb],\n  Jonathan Boiser [ctb],\n  Chel Hee Lee [ctb]",
        "Repository": "CRAN",
        "Date/Publication": "2024-12-08 12:10:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 02:47:26 UTC; windows",
        "Archs": "x64"
      }
    },
    "magrittr": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Type": "Package",
        "Package": "magrittr",
        "Title": "A Forward-Pipe Operator for R",
        "Version": "2.0.3",
        "Authors@R": "c(\n    person(\"Stefan Milton\", \"Bache\", , \"stefan@stefanbache.dk\", role = c(\"aut\", \"cph\"),\n           comment = \"Original author and creator of magrittr\"),\n    person(\"Hadley\", \"Wickham\", , \"hadley@rstudio.com\", role = \"aut\"),\n    person(\"Lionel\", \"Henry\", , \"lionel@rstudio.com\", role = \"cre\"),\n    person(\"RStudio\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "Provides a mechanism for chaining commands with a new\n    forward-pipe operator, %>%. This operator will forward a value, or the\n    result of an expression, into the next function call/expression.\n    There is flexible support for the type of right-hand side expressions.\n    For more information, see package vignette.  To quote Rene Magritte,\n    \"Ceci n'est pas un pipe.\"",
        "License": "MIT + file LICENSE",
        "URL": "https://magrittr.tidyverse.org,\nhttps://github.com/tidyverse/magrittr",
        "BugReports": "https://github.com/tidyverse/magrittr/issues",
        "Depends": "R (>= 3.4.0)",
        "Suggests": "covr, knitr, rlang, rmarkdown, testthat",
        "VignetteBuilder": "knitr",
        "ByteCompile": "Yes",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.1.2",
        "NeedsCompilation": "yes",
        "Packaged": "2022-03-29 09:34:37 UTC; lionel",
        "Author": "Stefan Milton Bache [aut, cph] (Original author and creator of\n    magrittr),\n  Hadley Wickham [aut],\n  Lionel Henry [cre],\n  RStudio [cph, fnd]",
        "Maintainer": "Lionel Henry <lionel@rstudio.com>",
        "Repository": "CRAN",
        "Date/Publication": "2022-03-30 07:30:09 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:14 UTC; windows",
        "Archs": "x64"
      }
    },
    "mailR": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "mailR",
        "Type": "Package",
        "Title": "A Utility to Send Emails from R",
        "Description": "Interface to Apache Commons Email to send emails\n    from R.",
        "Version": "0.8",
        "Date": "2021-11-05",
        "Author": "Rahul Premraj",
        "Maintainer": "Rahul Premraj <r.premraj+mailR@gmail.com>",
        "License": "GPL-3",
        "Imports": "rJava, stringr, R.utils, assertthat",
        "SystemRequirements": "Java",
        "URL": "https://github.com/rpremrajGit/mailR",
        "RoxygenNote": "7.1.2",
        "Encoding": "UTF-8",
        "NeedsCompilation": "no",
        "Packaged": "2021-12-03 21:56:34 UTC; rpremraj",
        "Repository": "CRAN",
        "Date/Publication": "2021-12-03 22:20:13 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:22:20 UTC; windows"
      }
    },
    "mamHelpers": {
      "Source": "quant_dev-cran-local",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/quant_dev-cran-local",
      "description": {
        "Package": "mamHelpers",
        "Type": "Package",
        "Title": "MIM Helper Functions (misc)",
        "Version": "1.10.7",
        "Date": "2025-02-12",
        "Author": "MIM Quantitative Development",
        "Maintainer": "MIM Quant Dev <mim_quant_dev@manulife.com>",
        "Description": "Misc helper functions for MIM Quant Dev team.",
        "License": "file LICENSE",
        "Encoding": "UTF-8",
        "Imports": "dplyr, glue, httr, jsonlite, lubridate, pkgbuild, purrr,\nremotes, rlang",
        "Suggests": "DBI, RCurl, bizdays, digest, stringr, magrittr, modules, DT,\nassertthat, htmlwidgets, tibble, utils, writexl, dbHelpers,\nmailR",
        "RoxygenNote": "7.2.3",
        "NeedsCompilation": "no",
        "Packaged": "2025-02-12 14:53:41 UTC; runner",
        "Built": "R 4.4.2; ; 2025-03-04 18:41:23 UTC; windows"
      }
    },
    "memoise": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "memoise",
        "Title": "'Memoisation' of Functions",
        "Version": "2.0.1",
        "Authors@R": "\n    c(person(given = \"Hadley\",\n             family = \"Wickham\",\n             role = \"aut\",\n             email = \"hadley@rstudio.com\"),\n      person(given = \"Jim\",\n             family = \"Hester\",\n             role = \"aut\"),\n      person(given = \"Winston\",\n             family = \"Chang\",\n             role = c(\"aut\", \"cre\"),\n             email = \"winston@rstudio.com\"),\n      person(given = \"Kirill\",\n             family = \"Müller\",\n             role = \"aut\",\n             email = \"krlmlr+r@mailbox.org\"),\n      person(given = \"Daniel\",\n             family = \"Cook\",\n             role = \"aut\",\n             email = \"danielecook@gmail.com\"),\n      person(given = \"Mark\",\n             family = \"Edmondson\",\n             role = \"ctb\",\n             email = \"r@sunholo.com\"))",
        "Description": "Cache the results of a function so that when you\n    call it again with the same arguments it returns the previously computed\n    value.",
        "License": "MIT + file LICENSE",
        "URL": "https://memoise.r-lib.org, https://github.com/r-lib/memoise",
        "BugReports": "https://github.com/r-lib/memoise/issues",
        "Imports": "rlang (>= 0.4.10), cachem",
        "Suggests": "digest, aws.s3, covr, googleAuthR, googleCloudStorageR, httr,\ntestthat",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.1.2",
        "NeedsCompilation": "no",
        "Packaged": "2021-11-24 21:24:50 UTC; jhester",
        "Author": "Hadley Wickham [aut],\n  Jim Hester [aut],\n  Winston Chang [aut, cre],\n  Kirill Müller [aut],\n  Daniel Cook [aut],\n  Mark Edmondson [ctb]",
        "Maintainer": "Winston Chang <winston@rstudio.com>",
        "Repository": "CRAN",
        "Date/Publication": "2021-11-26 16:11:10 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 02:54:40 UTC; windows"
      }
    },
    "mgcv": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "mgcv",
        "Version": "1.9-1",
        "Author": "Simon Wood <simon.wood@r-project.org>",
        "Maintainer": "Simon Wood <simon.wood@r-project.org>",
        "Title": "Mixed GAM Computation Vehicle with Automatic Smoothness\nEstimation",
        "Description": "Generalized additive (mixed) models, some of their extensions and \n             other generalized ridge regression with multiple smoothing \n             parameter estimation by (Restricted) Marginal Likelihood, \n             Generalized Cross Validation and similar, or using iterated \n             nested Laplace approximation for fully Bayesian inference. See \n             Wood (2017) <doi:10.1201/9781315370279> for an overview. \n             Includes a gam() function, a wide variety of smoothers, 'JAGS' \n             support and distributions beyond the exponential family. ",
        "Priority": "recommended",
        "Depends": "R (>= 3.6.0), nlme (>= 3.1-64)",
        "Imports": "methods, stats, graphics, Matrix, splines, utils",
        "Suggests": "parallel, survival, MASS",
        "LazyLoad": "yes",
        "ByteCompile": "yes",
        "License": "GPL (>= 2)",
        "NeedsCompilation": "yes",
        "Packaged": "2023-12-20 10:39:06 UTC; sw283",
        "Repository": "CRAN",
        "Date/Publication": "2023-12-21 00:30:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2024-10-31 16:58:42 UTC; windows",
        "Archs": "x64"
      }
    },
    "mime": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "mime",
        "Type": "Package",
        "Title": "Map Filenames to MIME Types",
        "Version": "0.12",
        "Authors@R": "c(\n    person(\"Yihui\", \"Xie\", role = c(\"aut\", \"cre\"), email = \"xie@yihui.name\", comment = c(ORCID = \"0000-0003-0645-5666\")),\n    person(\"Jeffrey\", \"Horner\", role = \"ctb\"),\n    person(\"Beilei\", \"Bian\", role = \"ctb\")\n    )",
        "Description": "Guesses the MIME type from a filename extension using the data\n    derived from /etc/mime.types in UNIX-type systems.",
        "Imports": "tools",
        "License": "GPL",
        "URL": "https://github.com/yihui/mime",
        "BugReports": "https://github.com/yihui/mime/issues",
        "RoxygenNote": "7.1.1",
        "Encoding": "UTF-8",
        "NeedsCompilation": "yes",
        "Packaged": "2021-09-28 02:06:04 UTC; yihui",
        "Author": "Yihui Xie [aut, cre] (<https://orcid.org/0000-0003-0645-5666>),\n  Jeffrey Horner [ctb],\n  Beilei Bian [ctb]",
        "Maintainer": "Yihui Xie <xie@yihui.name>",
        "Repository": "CRAN",
        "Date/Publication": "2021-09-28 05:00:05 UTC",
        "Built": "R 4.4.0; x86_64-w64-mingw32; 2024-04-23 00:24:00 UTC; windows",
        "Archs": "x64"
      }
    },
    "modules": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "modules",
        "Title": "Self Contained Units of Source Code",
        "Version": "0.13.0",
        "Authors@R": "person(\"Sebastian\", \"Warnholz\", email = \"wahani@gmail.com\", role = c(\"aut\", \"cre\"))",
        "Description": "Provides modules as an organizational unit for source code. Modules\n    enforce to be more rigorous when defining dependencies and have\n    a local search path. They can be used as a sub unit within packages\n    or in scripts.",
        "BugReports": "https://github.com/wahani/modules/issues",
        "URL": "https://github.com/wahani/modules",
        "ByteCompile": "TRUE",
        "Depends": "R (>= 3.2.0)",
        "Imports": "utils",
        "License": "MIT + file LICENSE",
        "Encoding": "UTF-8",
        "Suggests": "testthat, devtools, knitr, lintr, rmarkdown, parallel",
        "RoxygenNote": "7.1.2",
        "Collate": "'amodule.R' 'NAMESPACE.R' 'getSearchPath.R' 'class.R'\n'depend.R' 'export.R' 'expose.R' 'extend.R' 'import.R'\n'module-class.R' 'module-coercion.R' 'module-helper.R'\n'module.R' 'use.R' 'testModule.R' 'base-override.R'",
        "VignetteBuilder": "knitr",
        "NeedsCompilation": "no",
        "Packaged": "2024-01-20 15:43:02 UTC; lswarnholz",
        "Author": "Sebastian Warnholz [aut, cre]",
        "Maintainer": "Sebastian Warnholz <wahani@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-01-21 12:00:02 UTC",
        "Built": "R 4.4.1; ; 2024-07-09 00:31:35 UTC; windows"
      }
    },
    "munsell": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "munsell",
        "Type": "Package",
        "Title": "Utilities for Using Munsell Colours",
        "Version": "0.5.1",
        "Author": "Charlotte Wickham <cwickham@gmail.com>",
        "Maintainer": "Charlotte Wickham <cwickham@gmail.com>",
        "Description": "Provides easy access to, and manipulation of, the Munsell \n    colours. Provides a mapping between Munsell's \n    original notation (e.g. \"5R 5/10\") and hexadecimal strings suitable \n    for use directly in R graphics. Also provides utilities \n    to explore slices through the Munsell colour tree, to transform \n    Munsell colours and display colour palettes.",
        "Suggests": "ggplot2, testthat",
        "Imports": "colorspace, methods",
        "License": "MIT + file LICENSE",
        "URL": "https://cran.r-project.org/package=munsell,\nhttps://github.com/cwickham/munsell/",
        "RoxygenNote": "7.3.1",
        "Encoding": "UTF-8",
        "BugReports": "https://github.com/cwickham/munsell/issues",
        "NeedsCompilation": "no",
        "Packaged": "2024-04-01 20:42:09 UTC; charlottewickham",
        "Repository": "CRAN",
        "Date/Publication": "2024-04-01 23:40:10 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 02:47:26 UTC; windows"
      }
    },
    "nlme": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "nlme",
        "Version": "3.1-166",
        "Date": "2024-08-13",
        "Priority": "recommended",
        "Title": "Linear and Nonlinear Mixed Effects Models",
        "Authors@R": "c(person(\"José\", \"Pinheiro\", role = \"aut\", comment = \"S version\"),\n             person(\"Douglas\", \"Bates\", role = \"aut\", comment = \"up to 2007\"),\n             person(\"Saikat\", \"DebRoy\", role = \"ctb\", comment = \"up to 2002\"),\n             person(\"Deepayan\", \"Sarkar\", role = \"ctb\", comment = \"up to 2005\"),\n             person(\"EISPACK authors\", role = \"ctb\", comment = \"src/rs.f\"),\n\t     person(\"Siem\", \"Heisterkamp\", role = \"ctb\", comment = \"Author fixed sigma\"),\n             person(\"Bert\", \"Van Willigen\",role = \"ctb\", comment = \"Programmer fixed sigma\"),\n             person(\"Johannes\", \"Ranke\", role = \"ctb\", comment = \"varConstProp()\"),\n\t     person(\"R Core Team\", email = \"R-core@R-project.org\",\n                    role = c(\"aut\", \"cre\")))",
        "Contact": "see 'MailingList'",
        "Description": "Fit and compare Gaussian linear and nonlinear mixed-effects models.",
        "Depends": "R (>= 3.6.0)",
        "Imports": "graphics, stats, utils, lattice",
        "Suggests": "MASS, SASmixed",
        "LazyData": "yes",
        "Encoding": "UTF-8",
        "License": "GPL (>= 2)",
        "BugReports": "https://bugs.r-project.org",
        "MailingList": "R-help@r-project.org",
        "URL": "https://svn.r-project.org/R-packages/trunk/nlme/",
        "NeedsCompilation": "yes",
        "Packaged": "2024-08-14 04:26:18 UTC; hornik",
        "Author": "José Pinheiro [aut] (S version),\n  Douglas Bates [aut] (up to 2007),\n  Saikat DebRoy [ctb] (up to 2002),\n  Deepayan Sarkar [ctb] (up to 2005),\n  EISPACK authors [ctb] (src/rs.f),\n  Siem Heisterkamp [ctb] (Author fixed sigma),\n  Bert Van Willigen [ctb] (Programmer fixed sigma),\n  Johannes Ranke [ctb] (varConstProp()),\n  R Core Team [aut, cre]",
        "Maintainer": "R Core Team <R-core@R-project.org>",
        "Repository": "CRAN",
        "Date/Publication": "2024-08-14 06:36:33 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2024-10-31 16:55:56 UTC; windows",
        "Archs": "x64"
      }
    },
    "odbc": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "odbc",
        "Title": "Connect to ODBC Compatible Databases (using the DBI Interface)",
        "Version": "1.5.0",
        "Authors@R": "c(\n    person(\"Jim\", \"Hester\", role = \"aut\"),\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = c(\"aut\", \"cre\")),\n    person(\"Oliver\", \"Gjoneski\", role = \"aut\"),\n    person(\"lexicalunit\", role = \"cph\",\n           comment = \"nanodbc library\"),\n    person(\"Google Inc.\", role = \"cph\",\n           comment = \"cctz library\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "A DBI-compatible interface to ODBC databases.",
        "License": "MIT + file LICENSE",
        "URL": "https://odbc.r-dbi.org, https://github.com/r-dbi/odbc,\nhttps://solutions.posit.co/connections/db/",
        "BugReports": "https://github.com/r-dbi/odbc/issues",
        "Depends": "R (>= 3.6.0)",
        "Imports": "bit64, blob (>= 1.2.0), cli, DBI (>= 1.0.0), hms, lifecycle,\nmethods, Rcpp (>= 0.12.11), rlang (>= 1.1.0)",
        "Suggests": "covr, DBItest, knitr, magrittr, rmarkdown, RSQLite, testthat\n(>= 3.0.0), tibble, withr",
        "LinkingTo": "Rcpp",
        "ByteCompile": "true",
        "Config/Needs/check": "pkgbuild",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.0",
        "SystemRequirements": "GNU make, An ODBC3 driver manager and drivers.",
        "Collate": "'RcppExports.R' 'aaa-odbc-data-type.R' 'connection-pane.R'\n'dbi-connection.R' 'odbc-connection.R' 'db.R' 'dbi-driver.R'\n'dbi-result.R' 'dbi-table.R' 'dbi.R' 'driver-access.R'\n'driver-bigquery.R' 'driver-databricks.R' 'driver-db2.R'\n'driver-hana.R' 'driver-hive.R' 'driver-impala.R'\n'driver-mysql.R' 'driver-oracle.R' 'driver-postgres.R'\n'driver-redshift.R' 'driver-snowflake.R' 'driver-spark.R'\n'driver-sql-server.R' 'driver-sqlite.R' 'driver-teradata.R'\n'driver-vertica.R' 'import-standalone-obj-type.R'\n'import-standalone-types-check.R' 'odbc-config.R'\n'odbc-data-sources.R' 'odbc-drivers.R' 'odbc-package.R'\n'odbc.R' 'utils.R' 'zzz.R'",
        "VignetteBuilder": "knitr",
        "NeedsCompilation": "yes",
        "Packaged": "2024-06-03 16:07:51 UTC; hadleywickham",
        "Author": "Jim Hester [aut],\n  Hadley Wickham [aut, cre],\n  Oliver Gjoneski [aut],\n  lexicalunit [cph] (nanodbc library),\n  Google Inc. [cph] (cctz library),\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Hadley Wickham <hadley@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-06-05 16:40:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 03:14:09 UTC; windows",
        "Archs": "x64"
      }
    },
    "openssl": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "openssl",
        "Type": "Package",
        "Title": "Toolkit for Encryption, Signatures and Certificates Based on\nOpenSSL",
        "Version": "2.3.1",
        "Authors@R": "c(person(\"Jeroen\", \"Ooms\", role = c(\"aut\", \"cre\"), email = \"jeroenooms@gmail.com\",\n    comment = c(ORCID = \"0000-0002-4035-0289\")),\n    person(\"Oliver\", \"Keyes\", role = \"ctb\"))",
        "Description": "Bindings to OpenSSL libssl and libcrypto, plus custom SSH key parsers.\n    Supports RSA, DSA and EC curves P-256, P-384, P-521, and curve25519. Cryptographic\n    signatures can either be created and verified manually or via x509 certificates. \n    AES can be used in cbc, ctr or gcm mode for symmetric encryption; RSA for asymmetric\n    (public key) encryption or EC for Diffie Hellman. High-level envelope functions \n    combine RSA and AES for encrypting arbitrary sized data. Other utilities include key\n    generators, hash functions (md5, sha1, sha256, etc), base64 encoder, a secure random\n    number generator, and 'bignum' math methods for manually performing crypto \n    calculations on large multibyte integers.",
        "License": "MIT + file LICENSE",
        "URL": "https://jeroen.r-universe.dev/openssl",
        "BugReports": "https://github.com/jeroen/openssl/issues",
        "SystemRequirements": "OpenSSL >= 1.0.2",
        "VignetteBuilder": "knitr",
        "Imports": "askpass",
        "Suggests": "curl, testthat (>= 2.1.0), digest, knitr, rmarkdown,\njsonlite, jose, sodium",
        "RoxygenNote": "7.3.2",
        "Encoding": "UTF-8",
        "NeedsCompilation": "yes",
        "Packaged": "2025-01-08 21:40:58 UTC; jeroen",
        "Author": "Jeroen Ooms [aut, cre] (<https://orcid.org/0000-0002-4035-0289>),\n  Oliver Keyes [ctb]",
        "Maintainer": "Jeroen Ooms <jeroenooms@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2025-01-09 12:50:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 02:54:50 UTC; windows",
        "Archs": "x64"
      }
    },
    "pillar": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "pillar",
        "Title": "Coloured Formatting for Columns",
        "Version": "1.10.1",
        "Authors@R": "\n    c(person(given = \"Kirill\",\n             family = \"M\\u00fcller\",\n             role = c(\"aut\", \"cre\"),\n             email = \"kirill@cynkra.com\",\n             comment = c(ORCID = \"0000-0002-1416-3412\")),\n      person(given = \"Hadley\",\n             family = \"Wickham\",\n             role = \"aut\"),\n      person(given = \"RStudio\",\n             role = \"cph\"))",
        "Description": "Provides 'pillar' and 'colonnade' generics designed\n    for formatting columns of data using the full range of colours\n    provided by modern terminals.",
        "License": "MIT + file LICENSE",
        "URL": "https://pillar.r-lib.org/, https://github.com/r-lib/pillar",
        "BugReports": "https://github.com/r-lib/pillar/issues",
        "Imports": "cli (>= 2.3.0), glue, lifecycle, rlang (>= 1.0.2), utf8 (>=\n1.1.0), utils, vctrs (>= 0.5.0)",
        "Suggests": "bit64, DBI, debugme, DiagrammeR, dplyr, formattable, ggplot2,\nknitr, lubridate, nanotime, nycflights13, palmerpenguins,\nrmarkdown, scales, stringi, survival, testthat (>= 3.1.1),\ntibble, units (>= 0.7.2), vdiffr, withr",
        "VignetteBuilder": "knitr",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.2.9000",
        "Config/testthat/edition": "3",
        "Config/testthat/parallel": "true",
        "Config/testthat/start-first": "format_multi_fuzz, format_multi_fuzz_2,\nformat_multi, ctl_colonnade, ctl_colonnade_1, ctl_colonnade_2",
        "Config/autostyle/scope": "line_breaks",
        "Config/autostyle/strict": "true",
        "Config/gha/extra-packages": "DiagrammeR=?ignore-before-r=3.5.0",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "NeedsCompilation": "no",
        "Packaged": "2025-01-07 10:10:11 UTC; kirill",
        "Author": "Kirill Müller [aut, cre] (<https://orcid.org/0000-0002-1416-3412>),\n  Hadley Wickham [aut],\n  RStudio [cph]",
        "Maintainer": "Kirill Müller <kirill@cynkra.com>",
        "Repository": "CRAN",
        "Date/Publication": "2025-01-07 11:10:06 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:12:07 UTC; windows"
      }
    },
    "pkgbuild": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "pkgbuild",
        "Title": "Find Tools Needed to Build R Packages",
        "Version": "1.4.6",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", role = \"aut\"),\n    person(\"Jim\", \"Hester\", role = \"aut\"),\n    person(\"Gábor\", \"Csárdi\", , \"csardi.gabor@gmail.com\", role = c(\"aut\", \"cre\")),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "Provides functions used to build R packages. Locates\n    compilers needed to build R packages on various platforms and ensures\n    the PATH is configured appropriately so R can use them.",
        "License": "MIT + file LICENSE",
        "URL": "https://github.com/r-lib/pkgbuild, https://pkgbuild.r-lib.org",
        "BugReports": "https://github.com/r-lib/pkgbuild/issues",
        "Depends": "R (>= 3.5)",
        "Imports": "callr (>= 3.2.0), cli (>= 3.4.0), desc, processx, R6",
        "Suggests": "covr, cpp11, knitr, Rcpp, rmarkdown, testthat (>= 3.2.0),\nwithr (>= 2.3.0)",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.2",
        "NeedsCompilation": "no",
        "Packaged": "2025-01-16 17:45:57 UTC; gaborcsardi",
        "Author": "Hadley Wickham [aut],\n  Jim Hester [aut],\n  Gábor Csárdi [aut, cre],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Gábor Csárdi <csardi.gabor@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2025-01-16 19:00:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-21 00:51:17 UTC; windows"
      }
    },
    "pkgconfig": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "pkgconfig",
        "Title": "Private Configuration for 'R' Packages",
        "Version": "2.0.3",
        "Author": "Gábor Csárdi",
        "Maintainer": "Gábor Csárdi <csardi.gabor@gmail.com>",
        "Description": "Set configuration options on a per-package basis.\n    Options set by a given package only apply to that package,\n    other packages are unaffected.",
        "License": "MIT + file LICENSE",
        "LazyData": "true",
        "Imports": "utils",
        "Suggests": "covr, testthat, disposables (>= 1.0.3)",
        "URL": "https://github.com/r-lib/pkgconfig#readme",
        "BugReports": "https://github.com/r-lib/pkgconfig/issues",
        "Encoding": "UTF-8",
        "NeedsCompilation": "no",
        "Packaged": "2019-09-22 08:42:40 UTC; gaborcsardi",
        "Repository": "CRAN",
        "Date/Publication": "2019-09-22 09:20:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 01:52:14 UTC; windows"
      }
    },
    "plogr": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "plogr",
        "Title": "The 'plog' C++ Logging Library",
        "Version": "0.2.0",
        "Date": "2018-03-24",
        "Authors@R": "c(\n  person(\"Kirill\", \"Müller\", role = c(\"aut\", \"cre\"), email = \"krlmlr+r@mailbox.org\"),\n  person(\"Sergey\", \"Podobry\", role = \"cph\", comment = \"Author of the bundled plog library\"))",
        "Description": "\n  A simple header-only logging library for C++.\n  Add 'LinkingTo: plogr' to 'DESCRIPTION', and '#include <plogr.h>' in your C++ modules to use it.",
        "Suggests": "Rcpp",
        "License": "MIT + file LICENSE",
        "Encoding": "UTF-8",
        "LazyData": "true",
        "URL": "https://github.com/krlmlr/plogr#readme",
        "BugReports": "https://github.com/krlmlr/plogr/issues",
        "RoxygenNote": "6.0.1.9000",
        "NeedsCompilation": "no",
        "Packaged": "2018-03-24 11:02:06 UTC; muelleki",
        "Author": "Kirill Müller [aut, cre],\n  Sergey Podobry [cph] (Author of the bundled plog library)",
        "Maintainer": "Kirill Müller <krlmlr+r@mailbox.org>",
        "Repository": "CRAN",
        "Date/Publication": "2018-03-25 15:25:27 UTC",
        "Built": "R 4.4.1; ; 2024-07-09 00:25:55 UTC; windows"
      }
    },
    "plotly": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "plotly",
        "Title": "Create Interactive Web Graphics via 'plotly.js'",
        "Version": "4.10.4",
        "Authors@R": "c(person(\"Carson\", \"Sievert\", role = c(\"aut\", \"cre\"),\n    email = \"cpsievert1@gmail.com\", comment = c(ORCID = \"0000-0002-4958-2844\")),\n    person(\"Chris\", \"Parmer\", role = \"aut\",\n    email = \"chris@plot.ly\"),\n    person(\"Toby\", \"Hocking\", role = \"aut\",\n    email = \"tdhock5@gmail.com\"),\n    person(\"Scott\", \"Chamberlain\", role = \"aut\",\n    email = \"myrmecocystus@gmail.com\"),\n    person(\"Karthik\", \"Ram\", role = \"aut\",\n    email = \"karthik.ram@gmail.com\"),\n    person(\"Marianne\", \"Corvellec\", role = \"aut\",\n    email = \"marianne.corvellec@igdore.org\", comment = c(ORCID = \"0000-0002-1994-3581\")),\n    person(\"Pedro\", \"Despouy\", role = \"aut\",\n    email = \"pedro@plot.ly\"),\n    person(\"Salim\", \"Brüggemann\", role = \"ctb\",\n    email = \"salim-b@pm.me\", comment = c(ORCID = \"0000-0002-5329-5987\")),\n    person(\"Plotly Technologies Inc.\", role = \"cph\"))",
        "License": "MIT + file LICENSE",
        "Description": "Create interactive web graphics from 'ggplot2' graphs and/or a custom interface to the (MIT-licensed) JavaScript library 'plotly.js' inspired by the grammar of graphics.",
        "URL": "https://plotly-r.com, https://github.com/plotly/plotly.R,\nhttps://plotly.com/r/",
        "BugReports": "https://github.com/plotly/plotly.R/issues",
        "Depends": "R (>= 3.2.0), ggplot2 (>= 3.0.0)",
        "Imports": "tools, scales, httr (>= 1.3.0), jsonlite (>= 1.6), magrittr,\ndigest, viridisLite, base64enc, htmltools (>= 0.3.6),\nhtmlwidgets (>= 1.5.2.9001), tidyr (>= 1.0.0), RColorBrewer,\ndplyr, vctrs, tibble, lazyeval (>= 0.2.0), rlang (>= 0.4.10),\ncrosstalk, purrr, data.table, promises",
        "Suggests": "MASS, maps, hexbin, ggthemes, GGally, ggalluvial, testthat,\nknitr, shiny (>= 1.1.0), shinytest (>= 1.3.0), curl, rmarkdown,\nCairo, broom, webshot, listviewer, dendextend, sf, png,\nIRdisplay, processx, plotlyGeoAssets, forcats, withr,\npalmerpenguins, rversions, reticulate, rsvg",
        "LazyData": "true",
        "RoxygenNote": "7.2.3",
        "Encoding": "UTF-8",
        "Config/Needs/check": "tidyverse/ggplot2, rcmdcheck, devtools, reshape2",
        "NeedsCompilation": "no",
        "Packaged": "2024-01-13 20:51:33 UTC; cpsievert",
        "Author": "Carson Sievert [aut, cre] (<https://orcid.org/0000-0002-4958-2844>),\n  Chris Parmer [aut],\n  Toby Hocking [aut],\n  Scott Chamberlain [aut],\n  Karthik Ram [aut],\n  Marianne Corvellec [aut] (<https://orcid.org/0000-0002-1994-3581>),\n  Pedro Despouy [aut],\n  Salim Brüggemann [ctb] (<https://orcid.org/0000-0002-5329-5987>),\n  Plotly Technologies Inc. [cph]",
        "Maintainer": "Carson Sievert <cpsievert1@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-01-13 22:40:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 04:20:19 UTC; windows"
      }
    },
    "processx": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "processx",
        "Title": "Execute and Control System Processes",
        "Version": "3.8.5",
        "Authors@R": "c(\n    person(\"Gábor\", \"Csárdi\", , \"csardi.gabor@gmail.com\", role = c(\"aut\", \"cre\", \"cph\"),\n           comment = c(ORCID = \"0000-0001-7098-9676\")),\n    person(\"Winston\", \"Chang\", role = \"aut\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\")),\n    person(\"Ascent Digital Services\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "Tools to run system processes in the background.  It can\n    check if a background process is running; wait on a background process\n    to finish; get the exit status of finished processes; kill background\n    processes. It can read the standard output and error of the processes,\n    using non-blocking connections. 'processx' can poll a process for\n    standard output or error, with a timeout. It can also poll several\n    processes at once.",
        "License": "MIT + file LICENSE",
        "URL": "https://processx.r-lib.org, https://github.com/r-lib/processx",
        "BugReports": "https://github.com/r-lib/processx/issues",
        "Depends": "R (>= 3.4.0)",
        "Imports": "ps (>= 1.2.0), R6, utils",
        "Suggests": "callr (>= 3.7.3), cli (>= 3.3.0), codetools, covr, curl,\ndebugme, parallel, rlang (>= 1.0.2), testthat (>= 3.0.0),\nwebfakes, withr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.1.9000",
        "NeedsCompilation": "yes",
        "Packaged": "2025-01-08 20:40:10 UTC; gaborcsardi",
        "Author": "Gábor Csárdi [aut, cre, cph] (<https://orcid.org/0000-0001-7098-9676>),\n  Winston Chang [aut],\n  Posit Software, PBC [cph, fnd],\n  Ascent Digital Services [cph, fnd]",
        "Maintainer": "Gábor Csárdi <csardi.gabor@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2025-01-08 21:30:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 02:47:26 UTC; windows",
        "Archs": "x64"
      }
    },
    "promises": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Type": "Package",
        "Package": "promises",
        "Title": "Abstractions for Promise-Based Asynchronous Programming",
        "Version": "1.3.2",
        "Authors@R": "c(\n    person(\"Joe\", \"Cheng\", , \"joe@posit.co\", role = c(\"aut\", \"cre\")),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "Provides fundamental abstractions for doing asynchronous\n    programming in R using promises. Asynchronous programming is useful\n    for allowing a single R process to orchestrate multiple tasks in the\n    background while also attending to something else. Semantics are\n    similar to 'JavaScript' promises, but with a syntax that is idiomatic\n    R.",
        "License": "MIT + file LICENSE",
        "URL": "https://rstudio.github.io/promises/,\nhttps://github.com/rstudio/promises",
        "BugReports": "https://github.com/rstudio/promises/issues",
        "Imports": "fastmap (>= 1.1.0), later, magrittr (>= 1.5), R6, Rcpp, rlang,\nstats",
        "Suggests": "future (>= 1.21.0), knitr, purrr, rmarkdown, spelling,\ntestthat, vembedr",
        "LinkingTo": "later, Rcpp",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "rsconnect",
        "Encoding": "UTF-8",
        "Language": "en-US",
        "RoxygenNote": "7.3.2",
        "NeedsCompilation": "yes",
        "Packaged": "2024-11-27 23:38:47 UTC; jcheng",
        "Author": "Joe Cheng [aut, cre],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Joe Cheng <joe@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-11-28 00:40:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 02:47:26 UTC; windows",
        "Archs": "x64"
      }
    },
    "ps": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "ps",
        "Title": "List, Query, Manipulate System Processes",
        "Version": "1.8.1",
        "Authors@R": "c(\n    person(\"Jay\", \"Loden\", role = \"aut\"),\n    person(\"Dave\", \"Daeschler\", role = \"aut\"),\n    person(\"Giampaolo\", \"Rodola'\", role = \"aut\"),\n    person(\"Gábor\", \"Csárdi\", , \"csardi.gabor@gmail.com\", role = c(\"aut\", \"cre\")),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "List, query and manipulate all system processes, on\n    'Windows', 'Linux' and 'macOS'.",
        "License": "MIT + file LICENSE",
        "URL": "https://github.com/r-lib/ps, https://ps.r-lib.org/",
        "BugReports": "https://github.com/r-lib/ps/issues",
        "Depends": "R (>= 3.4)",
        "Imports": "utils",
        "Suggests": "callr, covr, curl, pillar, pingr, processx (>= 3.1.0), R6,\nrlang, testthat (>= 3.0.0), webfakes, withr",
        "Biarch": "true",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.2",
        "NeedsCompilation": "yes",
        "Packaged": "2024-10-28 21:43:41 UTC; gaborcsardi",
        "Author": "Jay Loden [aut],\n  Dave Daeschler [aut],\n  Giampaolo Rodola' [aut],\n  Gábor Csárdi [aut, cre],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Gábor Csárdi <csardi.gabor@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-10-28 22:10:02 UTC",
        "Built": "R 4.4.1; x86_64-w64-mingw32; 2024-11-04 01:27:59 UTC; windows",
        "Archs": "x64"
      }
    },
    "purrr": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "purrr",
        "Title": "Functional Programming Tools",
        "Version": "1.0.2",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@rstudio.com\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"0000-0003-4757-117X\")),\n    person(\"Lionel\", \"Henry\", , \"lionel@rstudio.com\", role = \"aut\"),\n    person(\"RStudio\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "A complete and consistent functional programming toolkit for\n    R.",
        "License": "MIT + file LICENSE",
        "URL": "https://purrr.tidyverse.org/, https://github.com/tidyverse/purrr",
        "BugReports": "https://github.com/tidyverse/purrr/issues",
        "Depends": "R (>= 3.5.0)",
        "Imports": "cli (>= 3.6.1), lifecycle (>= 1.0.3), magrittr (>= 1.5.0),\nrlang (>= 1.1.1), vctrs (>= 0.6.3)",
        "Suggests": "covr, dplyr (>= 0.7.8), httr, knitr, lubridate, rmarkdown,\ntestthat (>= 3.0.0), tibble, tidyselect",
        "LinkingTo": "cli",
        "VignetteBuilder": "knitr",
        "Biarch": "true",
        "Config/Needs/website": "tidyverse/tidytemplate, tidyr",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.3",
        "NeedsCompilation": "yes",
        "Packaged": "2023-08-08 16:13:31 UTC; hadleywickham",
        "Author": "Hadley Wickham [aut, cre] (<https://orcid.org/0000-0003-4757-117X>),\n  Lionel Henry [aut],\n  RStudio [cph, fnd]",
        "Maintainer": "Hadley Wickham <hadley@rstudio.com>",
        "Repository": "CRAN",
        "Date/Publication": "2023-08-10 08:20:07 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 03:12:18 UTC; windows",
        "Archs": "x64"
      }
    },
    "rJava": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "rJava",
        "Version": "1.0-11",
        "Title": "Low-Level R to Java Interface",
        "Author": "Simon Urbanek <simon.urbanek@r-project.org>",
        "Maintainer": "Simon Urbanek <simon.urbanek@r-project.org>",
        "Depends": "R (>= 3.6.0), methods",
        "Description": "Low-level interface to Java VM very much like .C/.Call and friends. Allows creation of objects, calling methods and accessing fields.",
        "License": "LGPL-2.1",
        "URL": "http://www.rforge.net/rJava/",
        "SystemRequirements": "Java JDK 1.2 or higher (for JRI/REngine JDK 1.4 or\nhigher), GNU make",
        "BugReports": "https://github.com/s-u/rJava/issues",
        "NeedsCompilation": "yes",
        "Packaged": "2024-01-25 22:25:37 UTC; rforge",
        "Repository": "CRAN",
        "Date/Publication": "2024-01-26 16:02:25 UTC",
        "Built": "R 4.4.0; x86_64-w64-mingw32; 2024-04-23 00:25:11 UTC; windows",
        "Archs": "x64"
      }
    },
    "rappdirs": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Type": "Package",
        "Package": "rappdirs",
        "Title": "Application Directories: Determine Where to Save Data, Caches,\nand Logs",
        "Version": "0.3.3",
        "Authors@R": "\n    c(person(given = \"Hadley\",\n             family = \"Wickham\",\n             role = c(\"trl\", \"cre\", \"cph\"),\n             email = \"hadley@rstudio.com\"),\n      person(given = \"RStudio\",\n             role = \"cph\"),\n      person(given = \"Sridhar\",\n             family = \"Ratnakumar\",\n             role = \"aut\"),\n      person(given = \"Trent\",\n             family = \"Mick\",\n             role = \"aut\"),\n      person(given = \"ActiveState\",\n             role = \"cph\",\n             comment = \"R/appdir.r, R/cache.r, R/data.r, R/log.r translated from appdirs\"),\n      person(given = \"Eddy\",\n             family = \"Petrisor\",\n             role = \"ctb\"),\n      person(given = \"Trevor\",\n             family = \"Davis\",\n             role = c(\"trl\", \"aut\")),\n      person(given = \"Gabor\",\n             family = \"Csardi\",\n             role = \"ctb\"),\n      person(given = \"Gregory\",\n             family = \"Jefferis\",\n             role = \"ctb\"))",
        "Description": "An easy way to determine which directories on the\n    users computer you should use to save data, caches and logs. A port of\n    Python's 'Appdirs' (<https://github.com/ActiveState/appdirs>) to\n    R.",
        "License": "MIT + file LICENSE",
        "URL": "https://rappdirs.r-lib.org, https://github.com/r-lib/rappdirs",
        "BugReports": "https://github.com/r-lib/rappdirs/issues",
        "Depends": "R (>= 3.2)",
        "Suggests": "roxygen2, testthat (>= 3.0.0), covr, withr",
        "Copyright": "Original python appdirs module copyright (c) 2010\nActiveState Software Inc. R port copyright Hadley Wickham,\nRStudio. See file LICENSE for details.",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.1.1",
        "Config/testthat/edition": "3",
        "NeedsCompilation": "yes",
        "Packaged": "2021-01-28 22:29:57 UTC; hadley",
        "Author": "Hadley Wickham [trl, cre, cph],\n  RStudio [cph],\n  Sridhar Ratnakumar [aut],\n  Trent Mick [aut],\n  ActiveState [cph] (R/appdir.r, R/cache.r, R/data.r, R/log.r translated\n    from appdirs),\n  Eddy Petrisor [ctb],\n  Trevor Davis [trl, aut],\n  Gabor Csardi [ctb],\n  Gregory Jefferis [ctb]",
        "Maintainer": "Hadley Wickham <hadley@rstudio.com>",
        "Repository": "CRAN",
        "Date/Publication": "2021-01-31 05:40:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:14 UTC; windows",
        "Archs": "x64"
      }
    },
    "redux": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "redux",
        "Title": "R Bindings to 'hiredis'",
        "Version": "1.1.4",
        "Authors@R": "c(person(\"Rich\", \"FitzJohn\", role = c(\"aut\", \"cre\"),\n    email = \"rich.fitzjohn@gmail.com\"))",
        "Description": "A 'hiredis' wrapper that includes support for\n    transactions, pipelining, blocking subscription, serialisation of\n    all keys and values, 'Redis' error handling with R errors.\n    Includes an automatically generated 'R6' interface to the full\n    'hiredis' API.  Generated functions are faithful to the\n    'hiredis' documentation while attempting to match R's argument\n    semantics.  Serialisation must be explicitly done by the user, but\n    both binary and text-mode serialisation is supported.",
        "SystemRequirements": "hiredis",
        "License": "GPL-2",
        "URL": "https://github.com/richfitz/redux",
        "BugReports": "https://github.com/richfitz/redux/issues",
        "Depends": "R (>= 3.2.0)",
        "Imports": "R6, storr (>= 1.1.1)",
        "Suggests": "knitr, rmarkdown, sys, testthat",
        "VignetteBuilder": "knitr",
        "RoxygenNote": "7.1.2",
        "Encoding": "UTF-8",
        "NeedsCompilation": "yes",
        "Packaged": "2023-11-29 10:44:57 UTC; rfitzjoh",
        "Author": "Rich FitzJohn [aut, cre]",
        "Maintainer": "Rich FitzJohn <rich.fitzjohn@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2023-11-30 14:50:02 UTC",
        "Built": "R 4.4.1; x86_64-w64-mingw32; 2024-07-09 00:49:47 UTC; windows",
        "Archs": "x64"
      }
    },
    "remotes": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "remotes",
        "Title": "R Package Installation from Remote Repositories, Including\n'GitHub'",
        "Version": "2.5.0",
        "Authors@R": "c(\n    person(\"Gábor\", \"Csárdi\", , \"csardi.gabor@gmail.com\", role = c(\"aut\", \"cre\")),\n    person(\"Jim\", \"Hester\", role = \"aut\"),\n    person(\"Hadley\", \"Wickham\", role = \"aut\"),\n    person(\"Winston\", \"Chang\", role = \"aut\"),\n    person(\"Martin\", \"Morgan\", role = \"aut\"),\n    person(\"Dan\", \"Tenenbaum\", role = \"aut\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\")),\n    person(\"Ascent Digital Services\", role = \"cph\")\n  )",
        "Description": "Download and install R packages stored in 'GitHub', 'GitLab',\n    'Bitbucket', 'Bioconductor', or plain 'subversion' or 'git'\n    repositories.  This package provides the 'install_*' functions in\n    'devtools'. Indeed most of the code was copied over from 'devtools'.",
        "License": "MIT + file LICENSE",
        "URL": "https://remotes.r-lib.org, https://github.com/r-lib/remotes#readme",
        "BugReports": "https://github.com/r-lib/remotes/issues",
        "Depends": "R (>= 3.0.0)",
        "Imports": "methods, stats, tools, utils",
        "Suggests": "brew, callr, codetools, covr, curl, git2r (>= 0.23.0), knitr,\nmockery, pingr, pkgbuild (>= 1.0.1), rmarkdown, rprojroot,\ntestthat (>= 3.0.0), webfakes, withr",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.3",
        "SystemRequirements": "Subversion for install_svn, git for install_git",
        "NeedsCompilation": "no",
        "Packaged": "2024-03-17 12:41:55 UTC; gaborcsardi",
        "Author": "Gábor Csárdi [aut, cre],\n  Jim Hester [aut],\n  Hadley Wickham [aut],\n  Winston Chang [aut],\n  Martin Morgan [aut],\n  Dan Tenenbaum [aut],\n  Posit Software, PBC [cph, fnd],\n  Ascent Digital Services [cph]",
        "Maintainer": "Gábor Csárdi <csardi.gabor@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-03-17 13:20:02 UTC",
        "Built": "R 4.4.1; ; 2024-07-09 00:25:02 UTC; windows"
      }
    },
    "rlang": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "rlang",
        "Version": "1.1.5",
        "Title": "Functions for Base Types and Core R and 'Tidyverse' Features",
        "Description": "A toolbox for working with base types, core R features\n  like the condition system, and core 'Tidyverse' features like tidy\n  evaluation.",
        "Authors@R": "c(\n    person(\"Lionel\", \"Henry\", ,\"lionel@posit.co\", c(\"aut\", \"cre\")),\n    person(\"Hadley\", \"Wickham\", ,\"hadley@posit.co\", \"aut\"),\n    person(given = \"mikefc\",\n           email = \"mikefc@coolbutuseless.com\", \n           role = \"cph\", \n           comment = \"Hash implementation based on Mike's xxhashlite\"),\n    person(given = \"Yann\",\n           family = \"Collet\",\n           role = \"cph\", \n           comment = \"Author of the embedded xxHash library\"),\n    person(given = \"Posit, PBC\", role = c(\"cph\", \"fnd\"))\n    )",
        "License": "MIT + file LICENSE",
        "ByteCompile": "true",
        "Biarch": "true",
        "Depends": "R (>= 3.5.0)",
        "Imports": "utils",
        "Suggests": "cli (>= 3.1.0), covr, crayon, fs, glue, knitr, magrittr,\nmethods, pillar, rmarkdown, stats, testthat (>= 3.0.0), tibble,\nusethis, vctrs (>= 0.2.3), withr",
        "Enhances": "winch",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.2",
        "URL": "https://rlang.r-lib.org, https://github.com/r-lib/rlang",
        "BugReports": "https://github.com/r-lib/rlang/issues",
        "Config/testthat/edition": "3",
        "Config/Needs/website": "dplyr, tidyverse/tidytemplate",
        "NeedsCompilation": "yes",
        "Packaged": "2025-01-17 08:43:17 UTC; lionel",
        "Author": "Lionel Henry [aut, cre],\n  Hadley Wickham [aut],\n  mikefc [cph] (Hash implementation based on Mike's xxhashlite),\n  Yann Collet [cph] (Author of the embedded xxHash library),\n  Posit, PBC [cph, fnd]",
        "Maintainer": "Lionel Henry <lionel@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2025-01-17 14:30:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-21 00:51:18 UTC; windows",
        "Archs": "x64"
      }
    },
    "rmarkdown": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Type": "Package",
        "Package": "rmarkdown",
        "Title": "Dynamic Documents for R",
        "Version": "2.29",
        "Authors@R": "c(\n    person(\"JJ\", \"Allaire\", , \"jj@posit.co\", role = \"aut\"),\n    person(\"Yihui\", \"Xie\", , \"xie@yihui.name\", role = c(\"aut\", \"cre\"), comment = c(ORCID = \"0000-0003-0645-5666\")),\n    person(\"Christophe\", \"Dervieux\", , \"cderv@posit.co\", role = \"aut\", comment = c(ORCID = \"0000-0003-4474-2498\")),\n    person(\"Jonathan\", \"McPherson\", , \"jonathan@posit.co\", role = \"aut\"),\n    person(\"Javier\", \"Luraschi\", role = \"aut\"),\n    person(\"Kevin\", \"Ushey\", , \"kevin@posit.co\", role = \"aut\"),\n    person(\"Aron\", \"Atkins\", , \"aron@posit.co\", role = \"aut\"),\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = \"aut\"),\n    person(\"Joe\", \"Cheng\", , \"joe@posit.co\", role = \"aut\"),\n    person(\"Winston\", \"Chang\", , \"winston@posit.co\", role = \"aut\"),\n    person(\"Richard\", \"Iannone\", , \"rich@posit.co\", role = \"aut\", comment = c(ORCID = \"0000-0003-3925-190X\")),\n    person(\"Andrew\", \"Dunning\", role = \"ctb\", comment = c(ORCID = \"0000-0003-0464-5036\")),\n    person(\"Atsushi\", \"Yasumoto\", role = c(\"ctb\", \"cph\"), comment = c(ORCID = \"0000-0002-8335-495X\", cph = \"Number sections Lua filter\")),\n    person(\"Barret\", \"Schloerke\", role = \"ctb\"),\n    person(\"Carson\", \"Sievert\", role = \"ctb\", comment = c(ORCID = \"0000-0002-4958-2844\")), \n    person(\"Devon\", \"Ryan\", , \"dpryan79@gmail.com\", role = \"ctb\", comment = c(ORCID = \"0000-0002-8549-0971\")),\n    person(\"Frederik\", \"Aust\", , \"frederik.aust@uni-koeln.de\", role = \"ctb\", comment = c(ORCID = \"0000-0003-4900-788X\")),\n    person(\"Jeff\", \"Allen\", , \"jeff@posit.co\", role = \"ctb\"), \n    person(\"JooYoung\", \"Seo\", role = \"ctb\", comment = c(ORCID = \"0000-0002-4064-6012\")),\n    person(\"Malcolm\", \"Barrett\", role = \"ctb\"),\n    person(\"Rob\", \"Hyndman\", , \"Rob.Hyndman@monash.edu\", role = \"ctb\"),\n    person(\"Romain\", \"Lesur\", role = \"ctb\"),\n    person(\"Roy\", \"Storey\", role = \"ctb\"),\n    person(\"Ruben\", \"Arslan\", , \"ruben.arslan@uni-goettingen.de\", role = \"ctb\"),\n    person(\"Sergio\", \"Oller\", role = \"ctb\"),\n    person(given = \"Posit Software, PBC\", role = c(\"cph\", \"fnd\")),\n    person(, \"jQuery UI contributors\", role = c(\"ctb\", \"cph\"), comment = \"jQuery UI library; authors listed in inst/rmd/h/jqueryui/AUTHORS.txt\"),\n    person(\"Mark\", \"Otto\", role = \"ctb\", comment = \"Bootstrap library\"),\n    person(\"Jacob\", \"Thornton\", role = \"ctb\", comment = \"Bootstrap library\"),\n    person(, \"Bootstrap contributors\", role = \"ctb\", comment = \"Bootstrap library\"),\n    person(, \"Twitter, Inc\", role = \"cph\", comment = \"Bootstrap library\"),\n    person(\"Alexander\", \"Farkas\", role = c(\"ctb\", \"cph\"), comment = \"html5shiv library\"),\n    person(\"Scott\", \"Jehl\", role = c(\"ctb\", \"cph\"), comment = \"Respond.js library\"),\n    person(\"Ivan\", \"Sagalaev\", role = c(\"ctb\", \"cph\"), comment = \"highlight.js library\"),\n    person(\"Greg\", \"Franko\", role = c(\"ctb\", \"cph\"), comment = \"tocify library\"),\n    person(\"John\", \"MacFarlane\", role = c(\"ctb\", \"cph\"), comment = \"Pandoc templates\"),\n    person(, \"Google, Inc.\", role = c(\"ctb\", \"cph\"), comment = \"ioslides library\"),\n    person(\"Dave\", \"Raggett\", role = \"ctb\", comment = \"slidy library\"),\n    person(, \"W3C\", role = \"cph\", comment = \"slidy library\"),\n    person(\"Dave\", \"Gandy\", role = c(\"ctb\", \"cph\"), comment = \"Font-Awesome\"),\n    person(\"Ben\", \"Sperry\", role = \"ctb\", comment = \"Ionicons\"),\n    person(, \"Drifty\", role = \"cph\", comment = \"Ionicons\"),\n    person(\"Aidan\", \"Lister\", role = c(\"ctb\", \"cph\"), comment = \"jQuery StickyTabs\"),\n    person(\"Benct Philip\", \"Jonsson\", role = c(\"ctb\", \"cph\"), comment = \"pagebreak Lua filter\"),\n    person(\"Albert\", \"Krewinkel\", role = c(\"ctb\", \"cph\"), comment = \"pagebreak Lua filter\")\n  )",
        "Description": "Convert R Markdown documents into a variety of formats.",
        "License": "GPL-3",
        "URL": "https://github.com/rstudio/rmarkdown,\nhttps://pkgs.rstudio.com/rmarkdown/",
        "BugReports": "https://github.com/rstudio/rmarkdown/issues",
        "Depends": "R (>= 3.0)",
        "Imports": "bslib (>= 0.2.5.1), evaluate (>= 0.13), fontawesome (>=\n0.5.0), htmltools (>= 0.5.1), jquerylib, jsonlite, knitr (>=\n1.43), methods, tinytex (>= 0.31), tools, utils, xfun (>=\n0.36), yaml (>= 2.1.19)",
        "Suggests": "digest, dygraphs, fs, rsconnect, downlit (>= 0.4.0), katex\n(>= 1.4.0), sass (>= 0.4.0), shiny (>= 1.6.0), testthat (>=\n3.0.3), tibble, vctrs, cleanrmd, withr (>= 2.4.2), xml2",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "rstudio/quillt, pkgdown",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.2",
        "SystemRequirements": "pandoc (>= 1.14) - http://pandoc.org",
        "NeedsCompilation": "no",
        "Packaged": "2024-11-01 19:32:48 UTC; runner",
        "Author": "JJ Allaire [aut],\n  Yihui Xie [aut, cre] (<https://orcid.org/0000-0003-0645-5666>),\n  Christophe Dervieux [aut] (<https://orcid.org/0000-0003-4474-2498>),\n  Jonathan McPherson [aut],\n  Javier Luraschi [aut],\n  Kevin Ushey [aut],\n  Aron Atkins [aut],\n  Hadley Wickham [aut],\n  Joe Cheng [aut],\n  Winston Chang [aut],\n  Richard Iannone [aut] (<https://orcid.org/0000-0003-3925-190X>),\n  Andrew Dunning [ctb] (<https://orcid.org/0000-0003-0464-5036>),\n  Atsushi Yasumoto [ctb, cph] (<https://orcid.org/0000-0002-8335-495X>,\n    Number sections Lua filter),\n  Barret Schloerke [ctb],\n  Carson Sievert [ctb] (<https://orcid.org/0000-0002-4958-2844>),\n  Devon Ryan [ctb] (<https://orcid.org/0000-0002-8549-0971>),\n  Frederik Aust [ctb] (<https://orcid.org/0000-0003-4900-788X>),\n  Jeff Allen [ctb],\n  JooYoung Seo [ctb] (<https://orcid.org/0000-0002-4064-6012>),\n  Malcolm Barrett [ctb],\n  Rob Hyndman [ctb],\n  Romain Lesur [ctb],\n  Roy Storey [ctb],\n  Ruben Arslan [ctb],\n  Sergio Oller [ctb],\n  Posit Software, PBC [cph, fnd],\n  jQuery UI contributors [ctb, cph] (jQuery UI library; authors listed in\n    inst/rmd/h/jqueryui/AUTHORS.txt),\n  Mark Otto [ctb] (Bootstrap library),\n  Jacob Thornton [ctb] (Bootstrap library),\n  Bootstrap contributors [ctb] (Bootstrap library),\n  Twitter, Inc [cph] (Bootstrap library),\n  Alexander Farkas [ctb, cph] (html5shiv library),\n  Scott Jehl [ctb, cph] (Respond.js library),\n  Ivan Sagalaev [ctb, cph] (highlight.js library),\n  Greg Franko [ctb, cph] (tocify library),\n  John MacFarlane [ctb, cph] (Pandoc templates),\n  Google, Inc. [ctb, cph] (ioslides library),\n  Dave Raggett [ctb] (slidy library),\n  W3C [cph] (slidy library),\n  Dave Gandy [ctb, cph] (Font-Awesome),\n  Ben Sperry [ctb] (Ionicons),\n  Drifty [cph] (Ionicons),\n  Aidan Lister [ctb, cph] (jQuery StickyTabs),\n  Benct Philip Jonsson [ctb, cph] (pagebreak Lua filter),\n  Albert Krewinkel [ctb, cph] (pagebreak Lua filter)",
        "Maintainer": "Yihui Xie <xie@yihui.name>",
        "Repository": "CRAN",
        "Date/Publication": "2024-11-04 12:30:09 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:24:15 UTC; windows"
      }
    },
    "sass": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Type": "Package",
        "Package": "sass",
        "Version": "0.4.9",
        "Title": "Syntactically Awesome Style Sheets ('Sass')",
        "Description": "An 'SCSS' compiler, powered by the 'LibSass' library. With this,\n    R developers can use variables, inheritance, and functions to generate\n    dynamic style sheets. The package uses the 'Sass CSS' extension language,\n    which is stable, powerful, and CSS compatible.",
        "Authors@R": "c(\n    person(\"Joe\", \"Cheng\", , \"joe@rstudio.com\", \"aut\"),\n    person(\"Timothy\", \"Mastny\", , \"tim.mastny@gmail.com\", \"aut\"),\n    person(\"Richard\", \"Iannone\", , \"rich@rstudio.com\", \"aut\",\n       comment = c(ORCID = \"0000-0003-3925-190X\")),\n    person(\"Barret\", \"Schloerke\", , \"barret@rstudio.com\", \"aut\",\n           comment = c(ORCID = \"0000-0001-9986-114X\")),\n    person(\"Carson\", \"Sievert\", , \"carson@rstudio.com\", c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"0000-0002-4958-2844\")),\n    person(\"Christophe\", \"Dervieux\", , \"cderv@rstudio.com\", c(\"ctb\"),\n           comment = c(ORCID = \"0000-0003-4474-2498\")),\n    person(family = \"RStudio\", role = c(\"cph\", \"fnd\")),\n    person(family = \"Sass Open Source Foundation\", role = c(\"ctb\", \"cph\"),\n           comment = \"LibSass library\"),\n    person(\"Greter\", \"Marcel\", role = c(\"ctb\", \"cph\"),\n           comment = \"LibSass library\"),\n    person(\"Mifsud\", \"Michael\", role = c(\"ctb\", \"cph\"),\n           comment = \"LibSass library\"),\n    person(\"Hampton\", \"Catlin\", role = c(\"ctb\", \"cph\"),\n           comment = \"LibSass library\"),\n    person(\"Natalie\", \"Weizenbaum\", role = c(\"ctb\", \"cph\"),\n           comment = \"LibSass library\"),\n    person(\"Chris\", \"Eppstein\", role = c(\"ctb\", \"cph\"),\n           comment = \"LibSass library\"),\n    person(\"Adams\", \"Joseph\", role = c(\"ctb\", \"cph\"),\n           comment = \"json.cpp\"),\n    person(\"Trifunovic\", \"Nemanja\", role = c(\"ctb\", \"cph\"),\n           comment = \"utf8.h\")\n    )",
        "License": "MIT + file LICENSE",
        "URL": "https://rstudio.github.io/sass/, https://github.com/rstudio/sass",
        "BugReports": "https://github.com/rstudio/sass/issues",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.1",
        "SystemRequirements": "GNU make",
        "Imports": "fs (>= 1.2.4), rlang (>= 0.4.10), htmltools (>= 0.5.1), R6,\nrappdirs",
        "Suggests": "testthat, knitr, rmarkdown, withr, shiny, curl",
        "VignetteBuilder": "knitr",
        "Config/testthat/edition": "3",
        "NeedsCompilation": "yes",
        "Packaged": "2024-03-15 21:58:01 UTC; cpsievert",
        "Author": "Joe Cheng [aut],\n  Timothy Mastny [aut],\n  Richard Iannone [aut] (<https://orcid.org/0000-0003-3925-190X>),\n  Barret Schloerke [aut] (<https://orcid.org/0000-0001-9986-114X>),\n  Carson Sievert [aut, cre] (<https://orcid.org/0000-0002-4958-2844>),\n  Christophe Dervieux [ctb] (<https://orcid.org/0000-0003-4474-2498>),\n  RStudio [cph, fnd],\n  Sass Open Source Foundation [ctb, cph] (LibSass library),\n  Greter Marcel [ctb, cph] (LibSass library),\n  Mifsud Michael [ctb, cph] (LibSass library),\n  Hampton Catlin [ctb, cph] (LibSass library),\n  Natalie Weizenbaum [ctb, cph] (LibSass library),\n  Chris Eppstein [ctb, cph] (LibSass library),\n  Adams Joseph [ctb, cph] (json.cpp),\n  Trifunovic Nemanja [ctb, cph] (utf8.h)",
        "Maintainer": "Carson Sievert <carson@rstudio.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-03-15 22:30:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 02:54:40 UTC; windows",
        "Archs": "x64"
      }
    },
    "scales": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "scales",
        "Title": "Scale Functions for Visualization",
        "Version": "1.3.0",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = c(\"aut\")),\n    person(\"Thomas Lin\", \"Pedersen\", , \"thomas.pedersen@posit.co\", role = c(\"cre\", \"aut\"),\n           comment = c(ORCID = \"0000-0002-5147-4711\")),\n    person(\"Dana\", \"Seidel\", role = \"aut\"),\n    person(\"Posit, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "Graphical scales map data to aesthetics, and provide methods\n    for automatically determining breaks and labels for axes and legends.",
        "License": "MIT + file LICENSE",
        "URL": "https://scales.r-lib.org, https://github.com/r-lib/scales",
        "BugReports": "https://github.com/r-lib/scales/issues",
        "Depends": "R (>= 3.6)",
        "Imports": "cli, farver (>= 2.0.3), glue, labeling, lifecycle, munsell (>=\n0.5), R6, RColorBrewer, rlang (>= 1.0.0), viridisLite",
        "Suggests": "bit64, covr, dichromat, ggplot2, hms (>= 0.5.0), stringi,\ntestthat (>= 3.0.0)",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "LazyLoad": "yes",
        "RoxygenNote": "7.2.3",
        "NeedsCompilation": "yes",
        "Packaged": "2023-11-27 20:27:59 UTC; thomas",
        "Author": "Hadley Wickham [aut],\n  Thomas Lin Pedersen [cre, aut]\n    (<https://orcid.org/0000-0002-5147-4711>),\n  Dana Seidel [aut],\n  Posit, PBC [cph, fnd]",
        "Maintainer": "Thomas Lin Pedersen <thomas.pedersen@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2023-11-28 09:10:06 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 02:54:40 UTC; windows"
      }
    },
    "sendmailR": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "sendmailR",
        "Version": "1.4-0",
        "Title": "Send Email Using R",
        "Description": "Package contains a simple SMTP client with minimal dependencies which \n        provides a portable solution for sending email, including file attachments and inline html reports, \n        from within R. SMTP Authentication and SSL/STARTTLS is implemented using curl.",
        "Authors@R": "c(\n        person(\"Olaf\", \"Mersmann\", role=c(\"aut\", \"cre\"),\n               comment = c(ORCID = \"0000-0002-7720-4939\"),\n               email = \"olafm@p-value.net\"),\n        person(\"Quinn\", \"Weber\", role=\"ctb\"),\n        person(\"Marius\", \"Barth\", role = \"ctb\",\n               comment = c(ORCID = \"0000-0002-3421-6665\")),\n        person(\"Are\", \"Edvardsen\", role = \"ctb\",\n               comment = c(ORCID = \"0000-0002-5210-3656\")),\n        person(\"Alexander\", \"Bartel\", role = \"ctb\", \n               comment = c(ORCID = \"0000-0002-1280-6138\"))\n        )",
        "URL": "https://github.com/olafmersmann/sendmailR",
        "BugReports": "https://github.com/olafmersmann/sendmailR/issues",
        "Depends": "R (>= 3.0.0)",
        "Imports": "base64enc",
        "Suggests": "curl (>= 4.0), knitr, rmarkdown, htmltools",
        "License": "GPL-2",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.3",
        "VignetteBuilder": "knitr",
        "NeedsCompilation": "no",
        "Packaged": "2023-01-11 18:18:37 UTC; olafm",
        "Author": "Olaf Mersmann [aut, cre] (<https://orcid.org/0000-0002-7720-4939>),\n  Quinn Weber [ctb],\n  Marius Barth [ctb] (<https://orcid.org/0000-0002-3421-6665>),\n  Are Edvardsen [ctb] (<https://orcid.org/0000-0002-5210-3656>),\n  Alexander Bartel [ctb] (<https://orcid.org/0000-0002-1280-6138>)",
        "Maintainer": "Olaf Mersmann <olafm@p-value.net>",
        "Repository": "CRAN",
        "Date/Publication": "2023-01-12 09:30:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 01:54:44 UTC; windows"
      }
    },
    "shiny": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "shiny",
        "Type": "Package",
        "Title": "Web Application Framework for R",
        "Version": "1.10.0",
        "Authors@R": "c(\n    person(\"Winston\", \"Chang\", role = c(\"aut\", \"cre\"), email = \"winston@posit.co\", comment = c(ORCID = \"0000-0002-1576-2126\")),\n    person(\"Joe\", \"Cheng\", role = \"aut\", email = \"joe@posit.co\"),\n    person(\"JJ\", \"Allaire\", role = \"aut\", email = \"jj@posit.co\"),\n    person(\"Carson\", \"Sievert\", role = \"aut\", email = \"carson@posit.co\", comment = c(ORCID = \"0000-0002-4958-2844\")),\n    person(\"Barret\", \"Schloerke\", role = \"aut\", email = \"barret@posit.co\", comment = c(ORCID = \"0000-0001-9986-114X\")),\n    person(\"Yihui\", \"Xie\", role = \"aut\", email = \"yihui@posit.co\"),\n    person(\"Jeff\", \"Allen\", role = \"aut\"),\n    person(\"Jonathan\", \"McPherson\", role = \"aut\", email = \"jonathan@posit.co\"),\n    person(\"Alan\", \"Dipert\", role = \"aut\"),\n    person(\"Barbara\", \"Borges\", role = \"aut\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\")),\n    person(family = \"jQuery Foundation\", role = \"cph\",\n    comment = \"jQuery library and jQuery UI library\"),\n    person(family = \"jQuery contributors\", role = c(\"ctb\", \"cph\"),\n    comment = \"jQuery library; authors listed in inst/www/shared/jquery-AUTHORS.txt\"),\n    person(family = \"jQuery UI contributors\", role = c(\"ctb\", \"cph\"),\n    comment = \"jQuery UI library; authors listed in inst/www/shared/jqueryui/AUTHORS.txt\"),\n    person(\"Mark\", \"Otto\", role = \"ctb\",\n    comment = \"Bootstrap library\"),\n    person(\"Jacob\", \"Thornton\", role = \"ctb\",\n    comment = \"Bootstrap library\"),\n    person(family = \"Bootstrap contributors\", role = \"ctb\",\n    comment = \"Bootstrap library\"),\n    person(family = \"Twitter, Inc\", role = \"cph\",\n    comment = \"Bootstrap library\"),\n    person(\"Prem Nawaz\", \"Khan\", role = \"ctb\",\n    comment = \"Bootstrap accessibility plugin\"),\n    person(\"Victor\", \"Tsaran\", role = \"ctb\",\n    comment = \"Bootstrap accessibility plugin\"),\n    person(\"Dennis\", \"Lembree\", role = \"ctb\",\n    comment = \"Bootstrap accessibility plugin\"),\n    person(\"Srinivasu\", \"Chakravarthula\", role = \"ctb\",\n    comment = \"Bootstrap accessibility plugin\"),\n    person(\"Cathy\", \"O'Connor\", role = \"ctb\",\n    comment = \"Bootstrap accessibility plugin\"),\n    person(family = \"PayPal, Inc\", role = \"cph\",\n    comment = \"Bootstrap accessibility plugin\"),\n    person(\"Stefan\", \"Petre\", role = c(\"ctb\", \"cph\"),\n    comment = \"Bootstrap-datepicker library\"),\n    person(\"Andrew\", \"Rowls\", role = c(\"ctb\", \"cph\"),\n    comment = \"Bootstrap-datepicker library\"),\n    person(\"Brian\", \"Reavis\", role = c(\"ctb\", \"cph\"),\n    comment = \"selectize.js library\"),\n    person(\"Salmen\", \"Bejaoui\", role = c(\"ctb\", \"cph\"),\n    comment = \"selectize-plugin-a11y library\"),\n    person(\"Denis\", \"Ineshin\", role = c(\"ctb\", \"cph\"),\n    comment = \"ion.rangeSlider library\"),\n    person(\"Sami\", \"Samhuri\", role = c(\"ctb\", \"cph\"),\n    comment = \"Javascript strftime library\"),\n    person(family = \"SpryMedia Limited\", role = c(\"ctb\", \"cph\"),\n    comment = \"DataTables library\"),\n    person(\"John\", \"Fraser\", role = c(\"ctb\", \"cph\"),\n    comment = \"showdown.js library\"),\n    person(\"John\", \"Gruber\", role = c(\"ctb\", \"cph\"),\n    comment = \"showdown.js library\"),\n    person(\"Ivan\", \"Sagalaev\", role = c(\"ctb\", \"cph\"),\n    comment = \"highlight.js library\"),\n    person(family = \"R Core Team\", role = c(\"ctb\", \"cph\"),\n    comment = \"tar implementation from R\")\n    )",
        "Description": "Makes it incredibly easy to build interactive web\n    applications with R. Automatic \"reactive\" binding between inputs and\n    outputs and extensive prebuilt widgets make it possible to build\n    beautiful, responsive, and powerful applications with minimal effort.",
        "License": "GPL-3 | file LICENSE",
        "Depends": "R (>= 3.0.2), methods",
        "Imports": "utils, grDevices, httpuv (>= 1.5.2), mime (>= 0.3), jsonlite\n(>= 0.9.16), xtable, fontawesome (>= 0.4.0), htmltools (>=\n0.5.4), R6 (>= 2.0), sourcetools, later (>= 1.0.0), promises\n(>= 1.3.2), tools, crayon, rlang (>= 0.4.10), fastmap (>=\n1.1.1), withr, commonmark (>= 1.7), glue (>= 1.3.2), bslib (>=\n0.6.0), cachem (>= 1.1.0), lifecycle (>= 0.2.0)",
        "Suggests": "coro (>= 1.1.0), datasets, DT, Cairo (>= 1.5-5), testthat (>=\n3.0.0), knitr (>= 1.6), markdown, rmarkdown, ggplot2, reactlog\n(>= 1.0.0), magrittr, yaml, future, dygraphs, ragg, showtext,\nsass",
        "URL": "https://shiny.posit.co/, https://github.com/rstudio/shiny",
        "BugReports": "https://github.com/rstudio/shiny/issues",
        "Collate": "'globals.R' 'app-state.R' 'app_template.R' 'bind-cache.R'\n'bind-event.R' 'bookmark-state-local.R' 'bookmark-state.R'\n'bootstrap-deprecated.R' 'bootstrap-layout.R' 'conditions.R'\n'map.R' 'utils.R' 'bootstrap.R' 'busy-indicators-spinners.R'\n'busy-indicators.R' 'cache-utils.R' 'deprecated.R' 'devmode.R'\n'diagnose.R' 'extended-task.R' 'fileupload.R' 'graph.R'\n'reactives.R' 'reactive-domains.R' 'history.R' 'hooks.R'\n'html-deps.R' 'image-interact-opts.R' 'image-interact.R'\n'imageutils.R' 'input-action.R' 'input-checkbox.R'\n'input-checkboxgroup.R' 'input-date.R' 'input-daterange.R'\n'input-file.R' 'input-numeric.R' 'input-password.R'\n'input-radiobuttons.R' 'input-select.R' 'input-slider.R'\n'input-submit.R' 'input-text.R' 'input-textarea.R'\n'input-utils.R' 'insert-tab.R' 'insert-ui.R' 'jqueryui.R'\n'knitr.R' 'middleware-shiny.R' 'middleware.R' 'timer.R'\n'shiny.R' 'mock-session.R' 'modal.R' 'modules.R'\n'notifications.R' 'priorityqueue.R' 'progress.R' 'react.R'\n'reexports.R' 'render-cached-plot.R' 'render-plot.R'\n'render-table.R' 'run-url.R' 'runapp.R' 'serializers.R'\n'server-input-handlers.R' 'server-resource-paths.R' 'server.R'\n'shiny-options.R' 'shiny-package.R' 'shinyapp.R' 'shinyui.R'\n'shinywrappers.R' 'showcase.R' 'snapshot.R' 'staticimports.R'\n'tar.R' 'test-export.R' 'test-server.R' 'test.R'\n'update-input.R' 'utils-lang.R' 'version_bs_date_picker.R'\n'version_ion_range_slider.R' 'version_jquery.R'\n'version_jqueryui.R' 'version_selectize.R' 'version_strftime.R'\n'viewer.R'",
        "RoxygenNote": "7.3.2",
        "Encoding": "UTF-8",
        "RdMacros": "lifecycle",
        "Config/testthat/edition": "3",
        "Config/Needs/check": "shinytest2",
        "NeedsCompilation": "no",
        "Packaged": "2024-12-13 21:47:15 UTC; cpsievert",
        "Author": "Winston Chang [aut, cre] (<https://orcid.org/0000-0002-1576-2126>),\n  Joe Cheng [aut],\n  JJ Allaire [aut],\n  Carson Sievert [aut] (<https://orcid.org/0000-0002-4958-2844>),\n  Barret Schloerke [aut] (<https://orcid.org/0000-0001-9986-114X>),\n  Yihui Xie [aut],\n  Jeff Allen [aut],\n  Jonathan McPherson [aut],\n  Alan Dipert [aut],\n  Barbara Borges [aut],\n  Posit Software, PBC [cph, fnd],\n  jQuery Foundation [cph] (jQuery library and jQuery UI library),\n  jQuery contributors [ctb, cph] (jQuery library; authors listed in\n    inst/www/shared/jquery-AUTHORS.txt),\n  jQuery UI contributors [ctb, cph] (jQuery UI library; authors listed in\n    inst/www/shared/jqueryui/AUTHORS.txt),\n  Mark Otto [ctb] (Bootstrap library),\n  Jacob Thornton [ctb] (Bootstrap library),\n  Bootstrap contributors [ctb] (Bootstrap library),\n  Twitter, Inc [cph] (Bootstrap library),\n  Prem Nawaz Khan [ctb] (Bootstrap accessibility plugin),\n  Victor Tsaran [ctb] (Bootstrap accessibility plugin),\n  Dennis Lembree [ctb] (Bootstrap accessibility plugin),\n  Srinivasu Chakravarthula [ctb] (Bootstrap accessibility plugin),\n  Cathy O'Connor [ctb] (Bootstrap accessibility plugin),\n  PayPal, Inc [cph] (Bootstrap accessibility plugin),\n  Stefan Petre [ctb, cph] (Bootstrap-datepicker library),\n  Andrew Rowls [ctb, cph] (Bootstrap-datepicker library),\n  Brian Reavis [ctb, cph] (selectize.js library),\n  Salmen Bejaoui [ctb, cph] (selectize-plugin-a11y library),\n  Denis Ineshin [ctb, cph] (ion.rangeSlider library),\n  Sami Samhuri [ctb, cph] (Javascript strftime library),\n  SpryMedia Limited [ctb, cph] (DataTables library),\n  John Fraser [ctb, cph] (showdown.js library),\n  John Gruber [ctb, cph] (showdown.js library),\n  Ivan Sagalaev [ctb, cph] (highlight.js library),\n  R Core Team [ctb, cph] (tar implementation from R)",
        "Maintainer": "Winston Chang <winston@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-12-14 00:10:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:24:24 UTC; windows"
      }
    },
    "shinyWidgets": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "shinyWidgets",
        "Title": "Custom Inputs Widgets for Shiny",
        "Version": "0.8.7",
        "Authors@R": "c(\n  person(\"Victor\", \"Perrier\", email = \"victor.perrier@dreamrs.fr\", role = c(\"aut\", \"cre\", \"cph\")),\n  person(\"Fanny\", \"Meyer\", role = \"aut\"),\n  person(\"David\", \"Granjon\", role = \"aut\"),\n  person(\"Ian\", \"Fellows\", role = \"ctb\", comment = \"Methods for mutating vertical tabs & updateMultiInput\"),\n  person(\"Wil\", \"Davis\", role = \"ctb\", comment = \"numericRangeInput function\"),\n  person(\"Spencer\", \"Matthews\", role = \"ctb\", comment = \"autoNumeric methods\"),\n  person(family = \"JavaScript and CSS libraries authors\", role = c(\"ctb\", \"cph\"), comment = \"All authors are listed in LICENSE.md\")\n  )",
        "Description": "Collection of custom input controls and user interface components for 'Shiny' applications. \n  Give your applications a unique and colorful style !",
        "URL": "https://github.com/dreamRs/shinyWidgets,\nhttps://dreamrs.github.io/shinyWidgets/",
        "BugReports": "https://github.com/dreamRs/shinyWidgets/issues",
        "License": "GPL-3",
        "Encoding": "UTF-8",
        "LazyData": "true",
        "RoxygenNote": "7.3.2",
        "Depends": "R (>= 3.1.0)",
        "Imports": "bslib, sass, shiny (>= 1.6.0), htmltools (>= 0.5.1), jsonlite,\ngrDevices, rlang",
        "Suggests": "testthat, covr, ggplot2, DT, scales, shinydashboard,\nshinydashboardPlus",
        "NeedsCompilation": "no",
        "Packaged": "2024-09-23 06:53:57 UTC; perri",
        "Author": "Victor Perrier [aut, cre, cph],\n  Fanny Meyer [aut],\n  David Granjon [aut],\n  Ian Fellows [ctb] (Methods for mutating vertical tabs &\n    updateMultiInput),\n  Wil Davis [ctb] (numericRangeInput function),\n  Spencer Matthews [ctb] (autoNumeric methods),\n  JavaScript and CSS libraries authors [ctb, cph] (All authors are listed\n    in LICENSE.md)",
        "Maintainer": "Victor Perrier <victor.perrier@dreamrs.fr>",
        "Repository": "CRAN",
        "Date/Publication": "2024-09-23 07:40:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:35:17 UTC; windows"
      }
    },
    "shinyalert": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "shinyalert",
        "Title": "Easily Create Pretty Popup Messages (Modals) in 'Shiny'",
        "Version": "3.1.0",
        "Authors@R": "c(\n    person(\"Dean\", \"Attali\",\n        email = \"daattali@gmail.com\",\n        role = c(\"aut\", \"cre\"),\n        comment = c(ORCID=\"0000-0002-5645-3493\", \"R interface\")),\n    person(\"Tristan\", \"Edwards\", role = c(\"aut\"),\n        comment = \"sweetalert library\"),\n    person(\"Zhengjia\", \"Wang\", role = c(\"ctb\"))\n    )",
        "Description": "Easily create pretty popup messages (modals) in 'Shiny'. A modal can\n    contain text, images, OK/Cancel buttons, an input to get a response from the\n    user, and many more customizable options.",
        "URL": "https://github.com/daattali/shinyalert,\nhttps://daattali.com/shiny/shinyalert-demo/",
        "BugReports": "https://github.com/daattali/shinyalert/issues",
        "Depends": "R (>= 3.0.2)",
        "Imports": "htmltools (>= 0.3.5), shiny (>= 1.0.4), uuid",
        "Suggests": "colourpicker, shinydisconnect",
        "License": "MIT + file LICENSE",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.3",
        "NeedsCompilation": "no",
        "Packaged": "2024-04-26 16:57:44 UTC; Dean",
        "Author": "Dean Attali [aut, cre] (<https://orcid.org/0000-0002-5645-3493>, R\n    interface),\n  Tristan Edwards [aut] (sweetalert library),\n  Zhengjia Wang [ctb]",
        "Maintainer": "Dean Attali <daattali@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-04-27 23:10:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:36:11 UTC; windows"
      }
    },
    "shinycssloaders": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "shinycssloaders",
        "Title": "Add Loading Animations to a 'shiny' Output While It's\nRecalculating",
        "Version": "1.1.0",
        "Authors@R": "c(\n    person(\"Dean\",\"Attali\",email=\"daattali@gmail.com\",role=c(\"aut\",\"cre\"),\n        comment = c(\"Maintainer/developer of shinycssloaders since 2019\", ORCID=\"0000-0002-5645-3493\")),\n    person(\"Andras\",\"Sali\",email=\"andras.sali@alphacruncher.hu\",role=c(\"aut\"),comment=\"Original creator of shinycssloaders package\"),\n    person(\"Luke\",\"Hass\",role=c(\"ctb\",\"cph\"),comment=\"Author of included CSS loader code\")\n    )",
        "Description": "When a 'Shiny' output (such as a plot, table, map, etc.) is recalculating, it remains \n    visible but gets greyed out. Using 'shinycssloaders', you can add a loading animation (\"spinner\")\n    to outputs instead. By wrapping a 'Shiny' output in 'withSpinner()', a spinner will automatically\n    appear while the output is recalculating. You can also manually show and hide the spinner, or add\n    a full-page spinner to cover the entire page.\n    See the demo online at <https://daattali.com/shiny/shinycssloaders-demo/>.",
        "License": "MIT + file LICENSE",
        "URL": "https://github.com/daattali/shinycssloaders,\nhttps://daattali.com/shiny/shinycssloaders-demo/",
        "BugReports": "https://github.com/daattali/shinycssloaders/issues",
        "Depends": "R (>= 3.1)",
        "Imports": "digest, glue, grDevices, htmltools (>= 0.3.5), shiny",
        "Suggests": "knitr, shinydisconnect, shinyjs",
        "RoxygenNote": "7.2.3",
        "Encoding": "UTF-8",
        "NeedsCompilation": "no",
        "Packaged": "2024-07-30 18:52:48 UTC; Dean",
        "Author": "Dean Attali [aut, cre] (Maintainer/developer of shinycssloaders since\n    2019, <https://orcid.org/0000-0002-5645-3493>),\n  Andras Sali [aut] (Original creator of shinycssloaders package),\n  Luke Hass [ctb, cph] (Author of included CSS loader code)",
        "Maintainer": "Dean Attali <daattali@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-07-30 22:30:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:35:16 UTC; windows"
      }
    },
    "shinydashboard": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "shinydashboard",
        "Title": "Create Dashboards with 'Shiny'",
        "Version": "0.7.2",
        "Authors@R": "c(\n    person(\"Winston\", \"Chang\", role = c(\"aut\", \"cre\"), email = \"winston@rstudio.com\"),\n    person(\"Barbara\", \"Borges Ribeiro\", role = \"aut\", email = \"barbara@rstudio.com\"),\n    person(family = \"RStudio\", role = \"cph\"),\n    person(family = \"Almasaeed Studio\", role = c(\"ctb\", \"cph\"), comment = \"AdminLTE theme for Bootstrap\"),\n    person(family = \"Adobe Systems Incorporated\", role = c(\"ctb\", \"cph\"), comment = \"Source Sans Pro font\")\n    )",
        "Description": "Create dashboards with 'Shiny'. This package provides\n    a theme on top of 'Shiny', making it easy to create attractive dashboards.",
        "URL": "http://rstudio.github.io/shinydashboard/",
        "Depends": "R (>= 3.0)",
        "License": "GPL (>= 2) | file LICENSE",
        "Imports": "utils, shiny (>= 1.0.0), htmltools (>= 0.2.6), promises",
        "BugReports": "https://github.com/rstudio/shinydashboard",
        "RoxygenNote": "6.0.1.9000",
        "NeedsCompilation": "no",
        "Packaged": "2021-09-29 17:40:23 UTC; winston",
        "Author": "Winston Chang [aut, cre],\n  Barbara Borges Ribeiro [aut],\n  RStudio [cph],\n  Almasaeed Studio [ctb, cph] (AdminLTE theme for Bootstrap),\n  Adobe Systems Incorporated [ctb, cph] (Source Sans Pro font)",
        "Maintainer": "Winston Chang <winston@rstudio.com>",
        "Repository": "CRAN",
        "Date/Publication": "2021-09-30 12:10:06 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:35:15 UTC; windows"
      }
    },
    "shinydisconnect": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "shinydisconnect",
        "Title": "Show a Nice Message When a 'Shiny' App Disconnects or Errors",
        "Version": "0.1.1",
        "Authors@R": "person(given = \"Dean\", family = \"Attali\",\n    email = \"daattali@gmail.com\",\n    role = c(\"aut\", \"cre\", \"cph\"),\n    comment = c(ORCID=\"0000-0002-5645-3493\"))",
        "Description": "A 'Shiny' app can disconnect for a variety of reasons: an unrecoverable error occurred in\n    the app, the server went down, the user lost internet connection, or any other reason\n    that might cause the 'Shiny' app to lose connection to its server. With 'shinydisconnect', you can\n    call disonnectMessage() anywhere in a Shiny app's UI to add a nice message when this happens. \n    Works locally (running Shiny apps within 'RStudio') and on Shiny servers (such as shinyapps.io,\n    'RStudio Connect', 'Shiny Server Open Source', 'Shiny Server Pro'). See demo online at \n    <https://daattali.com/shiny/shinydisconnect-demo/>.",
        "URL": "https://github.com/daattali/shinydisconnect,\nhttps://daattali.com/shiny/shinydisconnect-demo/",
        "BugReports": "https://github.com/daattali/shinydisconnect/issues",
        "Imports": "checkmate, glue, htmltools, shiny (>= 1.0)",
        "Suggests": "colourpicker",
        "Depends": "R (>= 3.0.0)",
        "License": "MIT + file LICENSE",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.3",
        "NeedsCompilation": "no",
        "Packaged": "2023-08-20 04:01:54 UTC; Dean-X1C",
        "Author": "Dean Attali [aut, cre, cph] (<https://orcid.org/0000-0002-5645-3493>)",
        "Maintainer": "Dean Attali <daattali@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2023-08-21 08:30:07 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:35:37 UTC; windows"
      }
    },
    "shinyjs": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "shinyjs",
        "Title": "Easily Improve the User Experience of Your Shiny Apps in Seconds",
        "Version": "2.1.0",
        "Authors@R": "person(\"Dean\", \"Attali\", \n    email = \"daattali@gmail.com\",\n    role = c(\"aut\", \"cre\"),\n    comment= c(ORCID=\"0000-0002-5645-3493\"))",
        "Description": "Perform common useful JavaScript operations in Shiny apps that will\n    greatly improve your apps without having to know any JavaScript. Examples\n    include: hiding an element, disabling an input, resetting an input back to\n    its original value, delaying code execution by a few seconds, and many more\n    useful functions for both the end user and the developer. 'shinyjs' can also\n    be used to easily call your own custom JavaScript functions from R.",
        "URL": "https://deanattali.com/shinyjs/",
        "BugReports": "https://github.com/daattali/shinyjs/issues",
        "Depends": "R (>= 3.1.0)",
        "Imports": "digest (>= 0.6.8), jsonlite, shiny (>= 1.0.0)",
        "Suggests": "htmltools (>= 0.2.9), knitr (>= 1.7), rmarkdown, shinyAce,\nshinydisconnect, testthat (>= 0.9.1)",
        "License": "MIT + file LICENSE",
        "VignetteBuilder": "knitr",
        "RoxygenNote": "7.1.1",
        "Encoding": "UTF-8",
        "NeedsCompilation": "no",
        "Packaged": "2021-12-21 11:32:22 UTC; Dean-X1C",
        "Author": "Dean Attali [aut, cre] (<https://orcid.org/0000-0002-5645-3493>)",
        "Maintainer": "Dean Attali <daattali@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2021-12-23 10:10:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:35:15 UTC; windows"
      }
    },
    "sourcetools": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "sourcetools",
        "Type": "Package",
        "Title": "Tools for Reading, Tokenizing and Parsing R Code",
        "Version": "0.1.7-1",
        "Author": "Kevin Ushey",
        "Maintainer": "Kevin Ushey <kevinushey@gmail.com>",
        "Description": "Tools for the reading and tokenization of R code. The\n    'sourcetools' package provides both an R and C++ interface for the tokenization\n    of R code, and helpers for interacting with the tokenized representation of R\n    code.",
        "License": "MIT + file LICENSE",
        "Depends": "R (>= 3.0.2)",
        "Suggests": "testthat",
        "RoxygenNote": "5.0.1",
        "BugReports": "https://github.com/kevinushey/sourcetools/issues",
        "Encoding": "UTF-8",
        "NeedsCompilation": "yes",
        "Packaged": "2023-01-31 18:03:04 UTC; kevin",
        "Repository": "CRAN",
        "Date/Publication": "2023-02-01 10:10:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:58 UTC; windows",
        "Archs": "x64"
      }
    },
    "storr": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "storr",
        "Title": "Simple Key Value Stores",
        "Version": "1.2.5",
        "Description": "Creates and manages simple key-value stores.  These can\n    use a variety of approaches for storing the data.  This package\n    implements the base methods and support for file system, in-memory\n    and DBI-based database stores.",
        "Depends": "R (>= 3.3.0)",
        "License": "MIT + file LICENSE",
        "LazyData": "true",
        "Authors@R": "c(person(\"Rich\", \"FitzJohn\", role = c(\"aut\", \"cre\"),\n    email = \"rich.fitzjohn@gmail.com\"),\n    person(c(\"William\", \"Michael\"), \"Landau\",\n      email = \"will.landau@gmail.com\",\n      role = \"ctb\",\n      comment = c(ORCID = \"0000-0003-1878-3253\")\n    ))",
        "URL": "https://github.com/richfitz/storr",
        "BugReports": "https://github.com/richfitz/storr/issues",
        "Imports": "R6 (>= 2.1.0), digest",
        "Suggests": "DBI (>= 0.6), RSQLite (>= 1.1-2), RPostgres, knitr, mockr,\nparallel, progress, rbenchmark, rmarkdown, testthat (>= 3.0.0)",
        "VignetteBuilder": "knitr",
        "RoxygenNote": "6.1.1",
        "Encoding": "UTF-8",
        "NeedsCompilation": "yes",
        "Packaged": "2020-12-01 14:24:18 UTC; rich",
        "Author": "Rich FitzJohn [aut, cre],\n  William Michael Landau [ctb] (<https://orcid.org/0000-0003-1878-3253>)",
        "Maintainer": "Rich FitzJohn <rich.fitzjohn@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2020-12-01 17:20:02 UTC",
        "Built": "R 4.4.1; x86_64-w64-mingw32; 2024-07-09 00:41:11 UTC; windows",
        "Archs": "x64"
      }
    },
    "stringi": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "stringi",
        "Version": "1.8.4",
        "Date": "2024-05-06",
        "Title": "Fast and Portable Character String Processing Facilities",
        "Description": "A collection of character string/text/natural language\n    processing tools for pattern searching (e.g., with 'Java'-like regular\n    expressions or the 'Unicode' collation algorithm), random string generation,\n    case mapping, string transliteration, concatenation, sorting, padding,\n    wrapping, Unicode normalisation, date-time formatting and parsing,\n    and many more. They are fast, consistent, convenient, and -\n    thanks to 'ICU' (International Components for Unicode) -\n    portable across all locales and platforms. Documentation about 'stringi' is\n    provided via its website at <https://stringi.gagolewski.com/> and\n    the paper by Gagolewski (2022, <doi:10.18637/jss.v103.i02>).",
        "URL": "https://stringi.gagolewski.com/,\nhttps://github.com/gagolews/stringi, https://icu.unicode.org/",
        "BugReports": "https://github.com/gagolews/stringi/issues",
        "SystemRequirements": "ICU4C (>= 61, optional)",
        "Type": "Package",
        "Depends": "R (>= 3.4)",
        "Imports": "tools, utils, stats",
        "Biarch": "TRUE",
        "License": "file LICENSE",
        "Author": "Marek Gagolewski [aut, cre, cph] (<https://orcid.org/0000-0003-0637-6028>),\n    Bartek Tartanus [ctb], and others (stringi source code);\n    Unicode, Inc. and others (ICU4C source code, Unicode Character Database)",
        "Maintainer": "Marek Gagolewski <marek@gagolewski.com>",
        "RoxygenNote": "7.2.3",
        "Encoding": "UTF-8",
        "NeedsCompilation": "yes",
        "Packaged": "2024-05-06 12:50:25 UTC; gagolews",
        "License_is_FOSS": "yes",
        "Repository": "CRAN",
        "Date/Publication": "2024-05-06 15:00:02 UTC",
        "Built": "R 4.4.0; x86_64-w64-mingw32; 2024-05-06 23:50:54 UTC; windows",
        "Archs": "x64"
      }
    },
    "stringr": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "stringr",
        "Title": "Simple, Consistent Wrappers for Common String Operations",
        "Version": "1.5.1",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = c(\"aut\", \"cre\", \"cph\")),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "A consistent, simple and easy to use set of wrappers around\n    the fantastic 'stringi' package. All function and argument names (and\n    positions) are consistent, all functions deal with \"NA\"'s and zero\n    length vectors in the same way, and the output from one function is\n    easy to feed into the input of another.",
        "License": "MIT + file LICENSE",
        "URL": "https://stringr.tidyverse.org,\nhttps://github.com/tidyverse/stringr",
        "BugReports": "https://github.com/tidyverse/stringr/issues",
        "Depends": "R (>= 3.6)",
        "Imports": "cli, glue (>= 1.6.1), lifecycle (>= 1.0.3), magrittr, rlang\n(>= 1.0.0), stringi (>= 1.5.3), vctrs (>= 0.4.0)",
        "Suggests": "covr, dplyr, gt, htmltools, htmlwidgets, knitr, rmarkdown,\ntestthat (>= 3.0.0), tibble",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "LazyData": "true",
        "RoxygenNote": "7.2.3",
        "NeedsCompilation": "no",
        "Packaged": "2023-11-14 15:03:52 UTC; hadleywickham",
        "Author": "Hadley Wickham [aut, cre, cph],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Hadley Wickham <hadley@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2023-11-14 23:10:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:12:07 UTC; windows"
      }
    },
    "sys": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "sys",
        "Type": "Package",
        "Title": "Powerful and Reliable Tools for Running System Commands in R",
        "Version": "3.4.3",
        "Authors@R": "c(person(\"Jeroen\", \"Ooms\", role = c(\"aut\", \"cre\"), \n      email = \"jeroenooms@gmail.com\", comment = c(ORCID = \"0000-0002-4035-0289\")),\n    person(\"Gábor\", \"Csárdi\", , \"csardi.gabor@gmail.com\", role = \"ctb\"))",
        "Description": "Drop-in replacements for the base system2() function with fine control\n    and consistent behavior across platforms. Supports clean interruption, timeout, \n    background tasks, and streaming STDIN / STDOUT / STDERR over binary or text \n    connections. Arguments on Windows automatically get encoded and quoted to work \n    on different locales.",
        "License": "MIT + file LICENSE",
        "URL": "https://jeroen.r-universe.dev/sys",
        "BugReports": "https://github.com/jeroen/sys/issues",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.1.1",
        "Suggests": "unix (>= 1.4), spelling, testthat",
        "Language": "en-US",
        "NeedsCompilation": "yes",
        "Packaged": "2024-10-03 14:13:17 UTC; jeroen",
        "Author": "Jeroen Ooms [aut, cre] (<https://orcid.org/0000-0002-4035-0289>),\n  Gábor Csárdi [ctb]",
        "Maintainer": "Jeroen Ooms <jeroenooms@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-10-04 09:40:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:14 UTC; windows",
        "Archs": "x64"
      }
    },
    "tibble": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "tibble",
        "Title": "Simple Data Frames",
        "Version": "3.2.1",
        "Authors@R": "\n    c(person(given = \"Kirill\",\n             family = \"M\\u00fcller\",\n             role = c(\"aut\", \"cre\"),\n             email = \"kirill@cynkra.com\",\n             comment = c(ORCID = \"0000-0002-1416-3412\")),\n      person(given = \"Hadley\",\n             family = \"Wickham\",\n             role = \"aut\",\n             email = \"hadley@rstudio.com\"),\n      person(given = \"Romain\",\n             family = \"Francois\",\n             role = \"ctb\",\n             email = \"romain@r-enthusiasts.com\"),\n      person(given = \"Jennifer\",\n             family = \"Bryan\",\n             role = \"ctb\",\n             email = \"jenny@rstudio.com\"),\n      person(given = \"RStudio\",\n             role = c(\"cph\", \"fnd\")))",
        "Description": "Provides a 'tbl_df' class (the 'tibble') with stricter checking and better formatting than the traditional\n    data frame.",
        "License": "MIT + file LICENSE",
        "URL": "https://tibble.tidyverse.org/, https://github.com/tidyverse/tibble",
        "BugReports": "https://github.com/tidyverse/tibble/issues",
        "Depends": "R (>= 3.4.0)",
        "Imports": "fansi (>= 0.4.0), lifecycle (>= 1.0.0), magrittr, methods,\npillar (>= 1.8.1), pkgconfig, rlang (>= 1.0.2), utils, vctrs\n(>= 0.4.2)",
        "Suggests": "bench, bit64, blob, brio, callr, cli, covr, crayon (>=\n1.3.4), DiagrammeR, dplyr, evaluate, formattable, ggplot2,\nhere, hms, htmltools, knitr, lubridate, mockr, nycflights13,\npkgbuild, pkgload, purrr, rmarkdown, stringi, testthat (>=\n3.0.2), tidyr, withr",
        "VignetteBuilder": "knitr",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.3",
        "Config/testthat/edition": "3",
        "Config/testthat/parallel": "true",
        "Config/testthat/start-first": "vignette-formats, as_tibble, add,\ninvariants",
        "Config/autostyle/scope": "line_breaks",
        "Config/autostyle/strict": "true",
        "Config/autostyle/rmd": "false",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "NeedsCompilation": "yes",
        "Packaged": "2023-03-19 09:23:10 UTC; kirill",
        "Author": "Kirill Müller [aut, cre] (<https://orcid.org/0000-0002-1416-3412>),\n  Hadley Wickham [aut],\n  Romain Francois [ctb],\n  Jennifer Bryan [ctb],\n  RStudio [cph, fnd]",
        "Maintainer": "Kirill Müller <kirill@cynkra.com>",
        "Repository": "CRAN",
        "Date/Publication": "2023-03-20 06:30:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 03:24:20 UTC; windows",
        "Archs": "x64"
      }
    },
    "tidyr": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "tidyr",
        "Title": "Tidy Messy Data",
        "Version": "1.3.1",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = c(\"aut\", \"cre\")),\n    person(\"Davis\", \"Vaughan\", , \"davis@posit.co\", role = \"aut\"),\n    person(\"Maximilian\", \"Girlich\", role = \"aut\"),\n    person(\"Kevin\", \"Ushey\", , \"kevin@posit.co\", role = \"ctb\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "Tools to help to create tidy data, where each column is a\n    variable, each row is an observation, and each cell contains a single\n    value.  'tidyr' contains tools for changing the shape (pivoting) and\n    hierarchy (nesting and 'unnesting') of a dataset, turning deeply\n    nested lists into rectangular data frames ('rectangling'), and\n    extracting values out of string columns. It also includes tools for\n    working with missing values (both implicit and explicit).",
        "License": "MIT + file LICENSE",
        "URL": "https://tidyr.tidyverse.org, https://github.com/tidyverse/tidyr",
        "BugReports": "https://github.com/tidyverse/tidyr/issues",
        "Depends": "R (>= 3.6)",
        "Imports": "cli (>= 3.4.1), dplyr (>= 1.0.10), glue, lifecycle (>= 1.0.3),\nmagrittr, purrr (>= 1.0.1), rlang (>= 1.1.1), stringr (>=\n1.5.0), tibble (>= 2.1.1), tidyselect (>= 1.2.0), utils, vctrs\n(>= 0.5.2)",
        "Suggests": "covr, data.table, knitr, readr, repurrrsive (>= 1.1.0),\nrmarkdown, testthat (>= 3.0.0)",
        "LinkingTo": "cpp11 (>= 0.4.0)",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "LazyData": "true",
        "RoxygenNote": "7.3.0",
        "NeedsCompilation": "yes",
        "Packaged": "2024-01-23 14:27:23 UTC; hadleywickham",
        "Author": "Hadley Wickham [aut, cre],\n  Davis Vaughan [aut],\n  Maximilian Girlich [aut],\n  Kevin Ushey [ctb],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Hadley Wickham <hadley@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-01-24 14:50:09 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 04:00:29 UTC; windows",
        "Archs": "x64"
      }
    },
    "tidyselect": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "tidyselect",
        "Title": "Select from a Set of Strings",
        "Version": "1.2.1",
        "Authors@R": "c(\n    person(\"Lionel\", \"Henry\", , \"lionel@posit.co\", role = c(\"aut\", \"cre\")),\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = \"aut\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "A backend for the selecting functions of the 'tidyverse'.  It\n    makes it easy to implement select-like functions in your own packages\n    in a way that is consistent with other 'tidyverse' interfaces for\n    selection.",
        "License": "MIT + file LICENSE",
        "URL": "https://tidyselect.r-lib.org, https://github.com/r-lib/tidyselect",
        "BugReports": "https://github.com/r-lib/tidyselect/issues",
        "Depends": "R (>= 3.4)",
        "Imports": "cli (>= 3.3.0), glue (>= 1.3.0), lifecycle (>= 1.0.3), rlang\n(>= 1.0.4), vctrs (>= 0.5.2), withr",
        "Suggests": "covr, crayon, dplyr, knitr, magrittr, rmarkdown, stringr,\ntestthat (>= 3.1.1), tibble (>= 2.1.3)",
        "VignetteBuilder": "knitr",
        "ByteCompile": "true",
        "Config/testthat/edition": "3",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.0.9000",
        "NeedsCompilation": "yes",
        "Packaged": "2024-03-11 11:46:04 UTC; lionel",
        "Author": "Lionel Henry [aut, cre],\n  Hadley Wickham [aut],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Lionel Henry <lionel@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-03-11 14:10:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 03:12:07 UTC; windows"
      }
    },
    "timechange": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "timechange",
        "Title": "Efficient Manipulation of Date-Times",
        "Version": "0.3.0",
        "Authors@R": "c(person(\"Vitalie\", \"Spinu\", email = \"spinuvit@gmail.com\", role = c(\"aut\", \"cre\")),\n             person(\"Google Inc.\", role = c(\"ctb\", \"cph\")))",
        "Description": "Efficient routines for manipulation of date-time objects while\n   accounting for time-zones and daylight saving times. The package includes\n   utilities for updating of date-time components (year, month, day etc.),\n   modification of time-zones, rounding of date-times, period addition and\n   subtraction etc. Parts of the 'CCTZ' source code, released under the Apache\n   2.0 License, are included in this package. See\n   <https://github.com/google/cctz> for more details.",
        "Depends": "R (>= 3.3)",
        "License": "GPL (>= 3)",
        "Encoding": "UTF-8",
        "LinkingTo": "cpp11 (>= 0.2.7)",
        "Suggests": "testthat (>= 0.7.1.99), knitr",
        "SystemRequirements": "A system with zoneinfo data (e.g.\n/usr/share/zoneinfo) as well as a recent-enough C++11 compiler\n(such as g++-4.8 or later). On Windows the zoneinfo included\nwith R is used.",
        "BugReports": "https://github.com/vspinu/timechange/issues",
        "URL": "https://github.com/vspinu/timechange/",
        "RoxygenNote": "7.2.1",
        "NeedsCompilation": "yes",
        "Packaged": "2024-01-18 08:57:24 UTC; vspinu",
        "Author": "Vitalie Spinu [aut, cre],\n  Google Inc. [ctb, cph]",
        "Maintainer": "Vitalie Spinu <spinuvit@gmail.com>",
        "Repository": "CRAN",
        "Date/Publication": "2024-01-18 09:20:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:53:04 UTC; windows",
        "Archs": "x64"
      }
    },
    "tinytex": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "tinytex",
        "Type": "Package",
        "Title": "Helper Functions to Install and Maintain TeX Live, and Compile\nLaTeX Documents",
        "Version": "0.54",
        "Authors@R": "c(\n  person(\"Yihui\", \"Xie\", role = c(\"aut\", \"cre\", \"cph\"), email = \"xie@yihui.name\", comment = c(ORCID = \"0000-0003-0645-5666\")),\n  person(given = \"Posit Software, PBC\", role = c(\"cph\", \"fnd\")),\n  person(\"Christophe\", \"Dervieux\", role = \"ctb\", comment = c(ORCID = \"0000-0003-4474-2498\")),\n  person(\"Devon\", \"Ryan\", role = \"ctb\", email = \"dpryan79@gmail.com\", comment = c(ORCID = \"0000-0002-8549-0971\")),\n  person(\"Ethan\", \"Heinzen\", role = \"ctb\"),\n  person(\"Fernando\", \"Cagua\", role = \"ctb\"),\n  person()\n  )",
        "Description": "Helper functions to install and maintain the 'LaTeX' distribution\n  named 'TinyTeX' (<https://yihui.org/tinytex/>), a lightweight, cross-platform,\n  portable, and easy-to-maintain version of 'TeX Live'. This package also\n  contains helper functions to compile 'LaTeX' documents, and install missing\n  'LaTeX' packages automatically.",
        "Imports": "xfun (>= 0.48)",
        "Suggests": "testit, rstudioapi",
        "License": "MIT + file LICENSE",
        "URL": "https://github.com/rstudio/tinytex",
        "BugReports": "https://github.com/rstudio/tinytex/issues",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.2",
        "NeedsCompilation": "no",
        "Packaged": "2024-11-01 14:22:24 UTC; yihui",
        "Author": "Yihui Xie [aut, cre, cph] (<https://orcid.org/0000-0003-0645-5666>),\n  Posit Software, PBC [cph, fnd],\n  Christophe Dervieux [ctb] (<https://orcid.org/0000-0003-4474-2498>),\n  Devon Ryan [ctb] (<https://orcid.org/0000-0002-8549-0971>),\n  Ethan Heinzen [ctb],\n  Fernando Cagua [ctb]",
        "Maintainer": "Yihui Xie <xie@yihui.name>",
        "Repository": "CRAN",
        "Date/Publication": "2024-11-01 15:10:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 02:47:25 UTC; windows"
      }
    },
    "utf8": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "utf8",
        "Title": "Unicode Text Processing",
        "Version": "1.2.4",
        "Authors@R": "\n    c(person(given = c(\"Patrick\", \"O.\"),\n             family = \"Perry\",\n             role = c(\"aut\", \"cph\")),\n      person(given = \"Kirill\",\n             family = \"M\\u00fcller\",\n             role = \"cre\",\n             email = \"kirill@cynkra.com\"),\n      person(given = \"Unicode, Inc.\",\n             role = c(\"cph\", \"dtc\"),\n             comment = \"Unicode Character Database\"))",
        "Description": "Process and print 'UTF-8' encoded international\n    text (Unicode). Input, validate, normalize, encode, format, and\n    display.",
        "License": "Apache License (== 2.0) | file LICENSE",
        "URL": "https://ptrckprry.com/r-utf8/, https://github.com/patperry/r-utf8",
        "BugReports": "https://github.com/patperry/r-utf8/issues",
        "Depends": "R (>= 2.10)",
        "Suggests": "cli, covr, knitr, rlang, rmarkdown, testthat (>= 3.0.0),\nwithr",
        "VignetteBuilder": "knitr, rmarkdown",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.2.3",
        "NeedsCompilation": "yes",
        "Packaged": "2023-10-22 13:43:19 UTC; kirill",
        "Author": "Patrick O. Perry [aut, cph],\n  Kirill Müller [cre],\n  Unicode, Inc. [cph, dtc] (Unicode Character Database)",
        "Maintainer": "Kirill Müller <kirill@cynkra.com>",
        "Repository": "CRAN",
        "Date/Publication": "2023-10-22 21:50:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:14 UTC; windows",
        "Archs": "x64"
      }
    },
    "uuid": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "uuid",
        "Version": "1.2-1",
        "Title": "Tools for Generating and Handling of UUIDs",
        "Author": "Simon Urbanek [aut, cre, cph] (https://urbanek.org,\n    <https://orcid.org/0000-0003-2297-1732>),\n  Theodore Ts'o [aut, cph] (libuuid)",
        "Maintainer": "Simon Urbanek <Simon.Urbanek@r-project.org>",
        "Authors@R": "c(person(\"Simon\", \"Urbanek\", role=c(\"aut\",\"cre\",\"cph\"), email=\"Simon.Urbanek@r-project.org\", comment=c(\"https://urbanek.org\", ORCID=\"0000-0003-2297-1732\")), person(\"Theodore\",\"Ts'o\", email=\"tytso@thunk.org\", role=c(\"aut\",\"cph\"), comment=\"libuuid\"))",
        "Depends": "R (>= 2.9.0)",
        "Description": "Tools for generating and handling of UUIDs (Universally Unique Identifiers).",
        "License": "MIT + file LICENSE",
        "URL": "https://www.rforge.net/uuid",
        "BugReports": "https://github.com/s-u/uuid/issues",
        "NeedsCompilation": "yes",
        "Packaged": "2024-07-29 03:16:54 UTC; rforge",
        "Repository": "CRAN",
        "Date/Publication": "2024-07-29 07:09:22 UTC",
        "Built": "R 4.4.1; x86_64-w64-mingw32; 2024-08-15 15:29:00 UTC; windows",
        "Archs": "x64"
      }
    },
    "vctrs": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "vctrs",
        "Title": "Vector Helpers",
        "Version": "0.6.5",
        "Authors@R": "c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = \"aut\"),\n    person(\"Lionel\", \"Henry\", , \"lionel@posit.co\", role = \"aut\"),\n    person(\"Davis\", \"Vaughan\", , \"davis@posit.co\", role = c(\"aut\", \"cre\")),\n    person(\"data.table team\", role = \"cph\",\n           comment = \"Radix sort based on data.table's forder() and their contribution to R's order()\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "Defines new notions of prototype and size that are used to\n    provide tools for consistent and well-founded type-coercion and\n    size-recycling, and are in turn connected to ideas of type- and\n    size-stability useful for analysing function interfaces.",
        "License": "MIT + file LICENSE",
        "URL": "https://vctrs.r-lib.org/, https://github.com/r-lib/vctrs",
        "BugReports": "https://github.com/r-lib/vctrs/issues",
        "Depends": "R (>= 3.5.0)",
        "Imports": "cli (>= 3.4.0), glue, lifecycle (>= 1.0.3), rlang (>= 1.1.0)",
        "Suggests": "bit64, covr, crayon, dplyr (>= 0.8.5), generics, knitr,\npillar (>= 1.4.4), pkgdown (>= 2.0.1), rmarkdown, testthat (>=\n3.0.0), tibble (>= 3.1.3), waldo (>= 0.2.0), withr, xml2,\nzeallot",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "Language": "en-GB",
        "RoxygenNote": "7.2.3",
        "NeedsCompilation": "yes",
        "Packaged": "2023-12-01 16:27:12 UTC; davis",
        "Author": "Hadley Wickham [aut],\n  Lionel Henry [aut],\n  Davis Vaughan [aut, cre],\n  data.table team [cph] (Radix sort based on data.table's forder() and\n    their contribution to R's order()),\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Davis Vaughan <davis@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2023-12-01 23:50:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 02:54:40 UTC; windows",
        "Archs": "x64"
      }
    },
    "viridisLite": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "viridisLite",
        "Type": "Package",
        "Title": "Colorblind-Friendly Color Maps (Lite Version)",
        "Version": "0.4.2",
        "Date": "2023-05-02",
        "Authors@R": "c(\n      person(\"Simon\", \"Garnier\", email = \"garnier@njit.edu\", role = c(\"aut\", \"cre\")),\n      person(\"Noam\", \"Ross\", email = \"noam.ross@gmail.com\", role = c(\"ctb\", \"cph\")),\n      person(\"Bob\", \"Rudis\", email = \"bob@rud.is\", role = c(\"ctb\", \"cph\")),\n      person(\"Marco\", \"Sciaini\", email = \"sciaini.marco@gmail.com\", role = c(\"ctb\", \"cph\")),\n      person(\"Antônio Pedro\", \"Camargo\", role = c(\"ctb\", \"cph\")),\n      person(\"Cédric\", \"Scherer\", email = \"scherer@izw-berlin.de\", role = c(\"ctb\", \"cph\"))\n  )",
        "Maintainer": "Simon Garnier <garnier@njit.edu>",
        "Description": "Color maps designed to improve graph readability for readers with \n    common forms of color blindness and/or color vision deficiency. The color \n    maps are also perceptually-uniform, both in regular form and also when \n    converted to black-and-white for printing. This is the 'lite' version of the \n    'viridis' package that also contains 'ggplot2' bindings for discrete and \n    continuous color and fill scales and can be found at \n    <https://cran.r-project.org/package=viridis>.",
        "License": "MIT + file LICENSE",
        "Encoding": "UTF-8",
        "Depends": "R (>= 2.10)",
        "Suggests": "hexbin (>= 1.27.0), ggplot2 (>= 1.0.1), testthat, covr",
        "URL": "https://sjmgarnier.github.io/viridisLite/,\nhttps://github.com/sjmgarnier/viridisLite/",
        "BugReports": "https://github.com/sjmgarnier/viridisLite/issues/",
        "RoxygenNote": "7.2.3",
        "NeedsCompilation": "no",
        "Packaged": "2023-05-02 21:38:46 UTC; simon",
        "Author": "Simon Garnier [aut, cre],\n  Noam Ross [ctb, cph],\n  Bob Rudis [ctb, cph],\n  Marco Sciaini [ctb, cph],\n  Antônio Pedro Camargo [ctb, cph],\n  Cédric Scherer [ctb, cph]",
        "Repository": "CRAN",
        "Date/Publication": "2023-05-02 23:50:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 01:52:14 UTC; windows"
      }
    },
    "withr": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "withr",
        "Title": "Run Code 'With' Temporarily Modified Global State",
        "Version": "3.0.2",
        "Authors@R": "c(\n    person(\"Jim\", \"Hester\", role = \"aut\"),\n    person(\"Lionel\", \"Henry\", , \"lionel@posit.co\", role = c(\"aut\", \"cre\")),\n    person(\"Kirill\", \"Müller\", , \"krlmlr+r@mailbox.org\", role = \"aut\"),\n    person(\"Kevin\", \"Ushey\", , \"kevinushey@gmail.com\", role = \"aut\"),\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = \"aut\"),\n    person(\"Winston\", \"Chang\", role = \"aut\"),\n    person(\"Jennifer\", \"Bryan\", role = \"ctb\"),\n    person(\"Richard\", \"Cotton\", role = \"ctb\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )",
        "Description": "A set of functions to run code 'with' safely and temporarily\n    modified global state. Many of these functions were originally a part\n    of the 'devtools' package, this provides a simple package with limited\n    dependencies to provide access to these functions.",
        "License": "MIT + file LICENSE",
        "URL": "https://withr.r-lib.org, https://github.com/r-lib/withr#readme",
        "BugReports": "https://github.com/r-lib/withr/issues",
        "Depends": "R (>= 3.6.0)",
        "Imports": "graphics, grDevices",
        "Suggests": "callr, DBI, knitr, methods, rlang, rmarkdown (>= 2.12),\nRSQLite, testthat (>= 3.0.0)",
        "VignetteBuilder": "knitr",
        "Config/Needs/website": "tidyverse/tidytemplate",
        "Config/testthat/edition": "3",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.2",
        "Collate": "'aaa.R' 'collate.R' 'connection.R' 'db.R' 'defer-exit.R'\n'standalone-defer.R' 'defer.R' 'devices.R' 'local_.R' 'with_.R'\n'dir.R' 'env.R' 'file.R' 'language.R' 'libpaths.R' 'locale.R'\n'makevars.R' 'namespace.R' 'options.R' 'par.R' 'path.R' 'rng.R'\n'seed.R' 'wrap.R' 'sink.R' 'tempfile.R' 'timezone.R'\n'torture.R' 'utils.R' 'with.R'",
        "NeedsCompilation": "no",
        "Packaged": "2024-10-28 10:58:18 UTC; lionel",
        "Author": "Jim Hester [aut],\n  Lionel Henry [aut, cre],\n  Kirill Müller [aut],\n  Kevin Ushey [aut],\n  Hadley Wickham [aut],\n  Winston Chang [aut],\n  Jennifer Bryan [ctb],\n  Richard Cotton [ctb],\n  Posit Software, PBC [cph, fnd]",
        "Maintainer": "Lionel Henry <lionel@posit.co>",
        "Repository": "CRAN",
        "Date/Publication": "2024-10-28 13:30:02 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 01:52:14 UTC; windows"
      }
    },
    "xfun": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "xfun",
        "Type": "Package",
        "Title": "Supporting Functions for Packages Maintained by 'Yihui Xie'",
        "Version": "0.50",
        "Authors@R": "c(\n  person(\"Yihui\", \"Xie\", role = c(\"aut\", \"cre\", \"cph\"), email = \"xie@yihui.name\", comment = c(ORCID = \"0000-0003-0645-5666\")),\n  person(\"Wush\", \"Wu\", role = \"ctb\"),\n  person(\"Daijiang\", \"Li\", role = \"ctb\"),\n  person(\"Xianying\", \"Tan\", role = \"ctb\"),\n  person(\"Salim\", \"Brüggemann\", role = \"ctb\", email = \"salim-b@pm.me\", comment = c(ORCID = \"0000-0002-5329-5987\")),\n  person(\"Christophe\", \"Dervieux\", role = \"ctb\"),\n  person()\n  )",
        "Description": "Miscellaneous functions commonly used in other packages maintained by 'Yihui Xie'.",
        "Depends": "R (>= 3.2.0)",
        "Imports": "grDevices, stats, tools",
        "Suggests": "testit, parallel, codetools, methods, rstudioapi, tinytex (>=\n0.30), mime, litedown (>= 0.4), commonmark, knitr (>= 1.47),\nremotes, pak, rhub, renv, curl, xml2, jsonlite, magick, yaml,\nqs, rmarkdown",
        "License": "MIT + file LICENSE",
        "URL": "https://github.com/yihui/xfun",
        "BugReports": "https://github.com/yihui/xfun/issues",
        "Encoding": "UTF-8",
        "RoxygenNote": "7.3.2",
        "VignetteBuilder": "litedown",
        "NeedsCompilation": "yes",
        "Packaged": "2025-01-07 14:01:22 UTC; runner",
        "Author": "Yihui Xie [aut, cre, cph] (<https://orcid.org/0000-0003-0645-5666>),\n  Wush Wu [ctb],\n  Daijiang Li [ctb],\n  Xianying Tan [ctb],\n  Salim Brüggemann [ctb] (<https://orcid.org/0000-0002-5329-5987>),\n  Christophe Dervieux [ctb]",
        "Maintainer": "Yihui Xie <xie@yihui.name>",
        "Repository": "CRAN",
        "Date/Publication": "2025-01-07 15:20:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-16 01:52:16 UTC; windows",
        "Archs": "x64"
      }
    },
    "xtable": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "xtable",
        "Version": "1.8-4",
        "Date": "2019-04-08",
        "Title": "Export Tables to LaTeX or HTML",
        "Authors@R": "c(person(\"David B.\", \"Dahl\", role=\"aut\"),\n             person(\"David\", \"Scott\", role=c(\"aut\",\"cre\"),\n               email=\"d.scott@auckland.ac.nz\"),\n             person(\"Charles\", \"Roosen\", role=\"aut\"),\n             person(\"Arni\", \"Magnusson\", role=\"aut\"),\n             person(\"Jonathan\", \"Swinton\", role=\"aut\"),\n             person(\"Ajay\", \"Shah\", role=\"ctb\"),\n             person(\"Arne\", \"Henningsen\", role=\"ctb\"),\n             person(\"Benno\", \"Puetz\", role=\"ctb\"),\n             person(\"Bernhard\", \"Pfaff\", role=\"ctb\"),\n             person(\"Claudio\", \"Agostinelli\", role=\"ctb\"),\n             person(\"Claudius\", \"Loehnert\", role=\"ctb\"),\n             person(\"David\", \"Mitchell\", role=\"ctb\"),\n             person(\"David\", \"Whiting\", role=\"ctb\"),\n             person(\"Fernando da\", \"Rosa\", role=\"ctb\"),\n             person(\"Guido\", \"Gay\", role=\"ctb\"),\n             person(\"Guido\", \"Schulz\", role=\"ctb\"),\n             person(\"Ian\", \"Fellows\", role=\"ctb\"),\n             person(\"Jeff\", \"Laake\", role=\"ctb\"),\n             person(\"John\", \"Walker\", role=\"ctb\"),\n             person(\"Jun\", \"Yan\", role=\"ctb\"),\n             person(\"Liviu\", \"Andronic\", role=\"ctb\"),\n             person(\"Markus\", \"Loecher\", role=\"ctb\"),\n             person(\"Martin\", \"Gubri\", role=\"ctb\"),\n             person(\"Matthieu\", \"Stigler\", role=\"ctb\"),\n             person(\"Robert\", \"Castelo\", role=\"ctb\"),\n             person(\"Seth\", \"Falcon\", role=\"ctb\"),\n             person(\"Stefan\", \"Edwards\", role=\"ctb\"),\n             person(\"Sven\", \"Garbade\", role=\"ctb\"),\n             person(\"Uwe\", \"Ligges\", role=\"ctb\"))",
        "Maintainer": "David Scott <d.scott@auckland.ac.nz>",
        "Imports": "stats, utils",
        "Suggests": "knitr, plm, zoo, survival",
        "VignetteBuilder": "knitr",
        "Description": "Coerce data to LaTeX and HTML tables.",
        "URL": "http://xtable.r-forge.r-project.org/",
        "Depends": "R (>= 2.10.0)",
        "License": "GPL (>= 2)",
        "Repository": "CRAN",
        "NeedsCompilation": "no",
        "Packaged": "2019-04-21 10:56:51 UTC; dsco036",
        "Author": "David B. Dahl [aut],\n  David Scott [aut, cre],\n  Charles Roosen [aut],\n  Arni Magnusson [aut],\n  Jonathan Swinton [aut],\n  Ajay Shah [ctb],\n  Arne Henningsen [ctb],\n  Benno Puetz [ctb],\n  Bernhard Pfaff [ctb],\n  Claudio Agostinelli [ctb],\n  Claudius Loehnert [ctb],\n  David Mitchell [ctb],\n  David Whiting [ctb],\n  Fernando da Rosa [ctb],\n  Guido Gay [ctb],\n  Guido Schulz [ctb],\n  Ian Fellows [ctb],\n  Jeff Laake [ctb],\n  John Walker [ctb],\n  Jun Yan [ctb],\n  Liviu Andronic [ctb],\n  Markus Loecher [ctb],\n  Martin Gubri [ctb],\n  Matthieu Stigler [ctb],\n  Robert Castelo [ctb],\n  Seth Falcon [ctb],\n  Stefan Edwards [ctb],\n  Sven Garbade [ctb],\n  Uwe Ligges [ctb]",
        "Date/Publication": "2019-04-21 12:20:03 UTC",
        "Built": "R 4.4.2; ; 2025-01-16 01:52:47 UTC; windows"
      }
    },
    "shinyRatings": {
        "Source": "CRAN",
        "Repository": "https://cran.r-project.org",
        "description": {
            "Package": "shinyRatings",
            "Version": "0.1.0",
            "Title": "An Intuitive Way of Providing Star Rating in a 'shiny' App",
            "Description": "A simple interface to integrate star ratings into your 'shiny' apps. It can be used for customer feedback systems, user reviews, or any application that requires user ratings. 'shinyRatings' offers a straightforward and customisable solution that enhances user engagement and facilitates valuable feedback collection.",
            "License": "MIT + file LICENSE",
            "Encoding": "UTF-8",
            "RoxygenNote": "7.2.3",
            "Suggests": "covr, testthat (>= 3.0.0)",
            "Config/testthat/edition": "3",
            "Imports": "shiny, htmltools, jsonlite",
            "NeedsCompilation": "no",
            "Packaged": "2023-07-13 13:25:35 UTC; shahronak47",
            "Author": "Ronak Shah [aut, cre]",
            "Maintainer": "Ronak Shah <shahronak47@yahoo.in>",
            "Repository": "CRAN",
            "Date/Publication": "2023-07-13 15:30:03 UTC",
            "Built": "R 4.4.3; ; 2025-03-31 02:10:59 UTC; windows"
        }
    },
    "yaml": {
      "Source": "CRAN",
      "Repository": "https://artifactory.platform.manulife.io/artifactory/ets-cloud-cran",
      "description": {
        "Package": "yaml",
        "Type": "Package",
        "Title": "Methods to Convert R Data to YAML and Back",
        "Date": "2024-07-22",
        "Version": "2.3.10",
        "Suggests": "RUnit",
        "Author": "Shawn P Garbett [aut], Jeremy Stephens [aut, cre], Kirill Simonov [aut], Yihui Xie [ctb],\n  Zhuoer Dong [ctb], Hadley Wickham [ctb], Jeffrey Horner [ctb], reikoch [ctb],\n  Will Beasley [ctb], Brendan O'Connor [ctb], Gregory R. Warnes [ctb],\n  Michael Quinn [ctb], Zhian N. Kamvar [ctb], Charlie Gao [ctb]",
        "Maintainer": "Shawn Garbett <shawn.garbett@vumc.org>",
        "License": "BSD_3_clause + file LICENSE",
        "Description": "Implements the 'libyaml' 'YAML' 1.1 parser and emitter\n  (<https://pyyaml.org/wiki/LibYAML>) for R.",
        "URL": "https://github.com/vubiostat/r-yaml/",
        "BugReports": "https://github.com/vubiostat/r-yaml/issues",
        "NeedsCompilation": "yes",
        "Packaged": "2024-07-22 15:44:18 UTC; garbetsp",
        "Repository": "CRAN",
        "Date/Publication": "2024-07-26 15:10:02 UTC",
        "Built": "R 4.4.2; x86_64-w64-mingw32; 2025-01-04 01:25:50 UTC; windows",
        "Archs": "x64"
      }
    }
  },
  "files": {
    "app.R": {
      "checksum": "cf1e75e8813a7f24f81ed1d10b32ce31"
    },
    "global.R": {
      "checksum": "c42e897b1ca544a06220eadb144f8e5c"
    },
    "server.R": {
      "checksum": "a47641d0ee68ffac83b7467f145c94e4"
    },
    "ui.R": {
      "checksum": "8b106940addb659e53574ce6319acbfc"
    }
  },
  "users": null
}
